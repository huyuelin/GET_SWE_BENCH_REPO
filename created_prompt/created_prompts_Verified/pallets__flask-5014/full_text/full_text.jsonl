{"instance_id": "pallets__flask-5014", "num_tokens of the message": 217124, "message": "Please look through the following GitHub problem description and Full Repository and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\nRequire a non-empty name for Blueprints\nThings do not work correctly if a Blueprint is given an empty name (e.g. #4944).\r\nIt would be helpful if a `ValueError` was raised when trying to do that.\n\n\n###\n\n### Full Repository ###\n{'docs': {'conf.py': {'classes': [], 'functions': [{'name': 'github_link', 'start_line': 69, 'end_line': 94, 'text': ['def github_link(name, rawtext, text, lineno, inliner, options=None, content=None):', '    app = inliner.document.settings.env.app', '    release = app.config.release', '    base_url = \"https://github.com/pallets/flask/tree/\"', '', '    if text.endswith(\">\"):', '        words, text = text[:-1].rsplit(\"<\", 1)', '        words = words.strip()', '    else:', '        words = None', '', '    if packaging.version.parse(release).is_devrelease:', '        url = f\"{base_url}main/{text}\"', '    else:', '        url = f\"{base_url}{release}/{text}\"', '', '    if words is None:', '        words = url', '', '    from docutils.nodes import reference', '    from docutils.parsers.rst.roles import set_classes', '', '    options = options or {}', '    set_classes(options)', '    node = reference(rawtext, words, refuri=url, **options)', '    return [node], []']}, {'name': 'setup', 'start_line': 97, 'end_line': 98, 'text': ['def setup(app):', '    app.add_role(\"gh\", github_link)']}], 'text': ['import packaging.version', 'from pallets_sphinx_themes import get_version', 'from pallets_sphinx_themes import ProjectLink', '', '# Project --------------------------------------------------------------', '', 'project = \"Flask\"', 'copyright = \"2010 Pallets\"', 'author = \"Pallets\"', 'release, version = get_version(\"Flask\")', '', '# General --------------------------------------------------------------', '', 'master_doc = \"index\"', 'extensions = [', '    \"sphinx.ext.autodoc\",', '    \"sphinx.ext.intersphinx\",', '    \"sphinxcontrib.log_cabinet\",', '    \"pallets_sphinx_themes\",', '    \"sphinx_issues\",', '    \"sphinx_tabs.tabs\",', ']', 'autodoc_typehints = \"description\"', 'intersphinx_mapping = {', '    \"python\": (\"https://docs.python.org/3/\", None),', '    \"werkzeug\": (\"https://werkzeug.palletsprojects.com/\", None),', '    \"click\": (\"https://click.palletsprojects.com/\", None),', '    \"jinja\": (\"https://jinja.palletsprojects.com/\", None),', '    \"itsdangerous\": (\"https://itsdangerous.palletsprojects.com/\", None),', '    \"sqlalchemy\": (\"https://docs.sqlalchemy.org/\", None),', '    \"wtforms\": (\"https://wtforms.readthedocs.io/\", None),', '    \"blinker\": (\"https://blinker.readthedocs.io/\", None),', '}', 'issues_github_path = \"pallets/flask\"', '', '# HTML -----------------------------------------------------------------', '', 'html_theme = \"flask\"', 'html_theme_options = {\"index_sidebar_logo\": False}', 'html_context = {', '    \"project_links\": [', '        ProjectLink(\"Donate\", \"https://palletsprojects.com/donate\"),', '        ProjectLink(\"PyPI Releases\", \"https://pypi.org/project/Flask/\"),', '        ProjectLink(\"Source Code\", \"https://github.com/pallets/flask/\"),', '        ProjectLink(\"Issue Tracker\", \"https://github.com/pallets/flask/issues/\"),', '        ProjectLink(\"Website\", \"https://palletsprojects.com/p/flask/\"),', '        ProjectLink(\"Twitter\", \"https://twitter.com/PalletsTeam\"),', '        ProjectLink(\"Chat\", \"https://discord.gg/pallets\"),', '    ]', '}', 'html_sidebars = {', '    \"index\": [\"project.html\", \"localtoc.html\", \"searchbox.html\", \"ethicalads.html\"],', '    \"**\": [\"localtoc.html\", \"relations.html\", \"searchbox.html\", \"ethicalads.html\"],', '}', 'singlehtml_sidebars = {\"index\": [\"project.html\", \"localtoc.html\", \"ethicalads.html\"]}', 'html_static_path = [\"_static\"]', 'html_favicon = \"_static/flask-icon.png\"', 'html_logo = \"_static/flask-icon.png\"', 'html_title = f\"Flask Documentation ({version})\"', 'html_show_sourcelink = False', '', '# LaTeX ----------------------------------------------------------------', '', 'latex_documents = [(master_doc, f\"Flask-{version}.tex\", html_title, author, \"manual\")]', '', '# Local Extensions -----------------------------------------------------', '', '', 'def github_link(name, rawtext, text, lineno, inliner, options=None, content=None):', '    app = inliner.document.settings.env.app', '    release = app.config.release', '    base_url = \"https://github.com/pallets/flask/tree/\"', '', '    if text.endswith(\">\"):', '        words, text = text[:-1].rsplit(\"<\", 1)', '        words = words.strip()', '    else:', '        words = None', '', '    if packaging.version.parse(release).is_devrelease:', '        url = f\"{base_url}main/{text}\"', '    else:', '        url = f\"{base_url}{release}/{text}\"', '', '    if words is None:', '        words = url', '', '    from docutils.nodes import reference', '    from docutils.parsers.rst.roles import set_classes', '', '    options = options or {}', '    set_classes(options)', '    node = reference(rawtext, words, refuri=url, **options)', '    return [node], []', '', '', 'def setup(app):', '    app.add_role(\"gh\", github_link)']}}, 'examples': {'tutorial': {'flaskr': {'db.py': {'classes': [], 'functions': [{'name': 'get_db', 'start_line': 8, 'end_line': 19, 'text': ['def get_db():', '    \"\"\"Connect to the application\\'s configured database. The connection', '    is unique for each request and will be reused if this is called', '    again.', '    \"\"\"', '    if \"db\" not in g:', '        g.db = sqlite3.connect(', '            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES', '        )', '        g.db.row_factory = sqlite3.Row', '', '    return g.db']}, {'name': 'close_db', 'start_line': 22, 'end_line': 29, 'text': ['def close_db(e=None):', '    \"\"\"If this request connected to the database, close the', '    connection.', '    \"\"\"', '    db = g.pop(\"db\", None)', '', '    if db is not None:', '        db.close()']}, {'name': 'init_db', 'start_line': 32, 'end_line': 37, 'text': ['def init_db():', '    \"\"\"Clear existing data and create new tables.\"\"\"', '    db = get_db()', '', '    with current_app.open_resource(\"schema.sql\") as f:', '        db.executescript(f.read().decode(\"utf8\"))']}, {'name': 'init_db_command', 'start_line': 41, 'end_line': 44, 'text': ['def init_db_command():', '    \"\"\"Clear existing data and create new tables.\"\"\"', '    init_db()', '    click.echo(\"Initialized the database.\")']}, {'name': 'init_app', 'start_line': 47, 'end_line': 52, 'text': ['def init_app(app):', '    \"\"\"Register database functions with the Flask app. This is called by', '    the application factory.', '    \"\"\"', '    app.teardown_appcontext(close_db)', '    app.cli.add_command(init_db_command)']}], 'text': ['import sqlite3', '', 'import click', 'from flask import current_app', 'from flask import g', '', '', 'def get_db():', '    \"\"\"Connect to the application\\'s configured database. The connection', '    is unique for each request and will be reused if this is called', '    again.', '    \"\"\"', '    if \"db\" not in g:', '        g.db = sqlite3.connect(', '            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES', '        )', '        g.db.row_factory = sqlite3.Row', '', '    return g.db', '', '', 'def close_db(e=None):', '    \"\"\"If this request connected to the database, close the', '    connection.', '    \"\"\"', '    db = g.pop(\"db\", None)', '', '    if db is not None:', '        db.close()', '', '', 'def init_db():', '    \"\"\"Clear existing data and create new tables.\"\"\"', '    db = get_db()', '', '    with current_app.open_resource(\"schema.sql\") as f:', '        db.executescript(f.read().decode(\"utf8\"))', '', '', '@click.command(\"init-db\")', 'def init_db_command():', '    \"\"\"Clear existing data and create new tables.\"\"\"', '    init_db()', '    click.echo(\"Initialized the database.\")', '', '', 'def init_app(app):', '    \"\"\"Register database functions with the Flask app. This is called by', '    the application factory.', '    \"\"\"', '    app.teardown_appcontext(close_db)', '    app.cli.add_command(init_db_command)']}, '__init__.py': {'classes': [], 'functions': [{'name': 'create_app', 'start_line': 6, 'end_line': 50, 'text': ['def create_app(test_config=None):', '    \"\"\"Create and configure an instance of the Flask application.\"\"\"', '    app = Flask(__name__, instance_relative_config=True)', '    app.config.from_mapping(', '        # a default secret that should be overridden by instance config', '        SECRET_KEY=\"dev\",', '        # store the database in the instance folder', '        DATABASE=os.path.join(app.instance_path, \"flaskr.sqlite\"),', '    )', '', '    if test_config is None:', '        # load the instance config, if it exists, when not testing', '        app.config.from_pyfile(\"config.py\", silent=True)', '    else:', '        # load the test config if passed in', '        app.config.update(test_config)', '', '    # ensure the instance folder exists', '    try:', '        os.makedirs(app.instance_path)', '    except OSError:', '        pass', '', '    @app.route(\"/hello\")', '    def hello():', '        return \"Hello, World!\"', '', '    # register the database commands', '    from flaskr import db', '', '    db.init_app(app)', '', '    # apply the blueprints to the app', '    from flaskr import auth, blog', '', '    app.register_blueprint(auth.bp)', '    app.register_blueprint(blog.bp)', '', \"    # make url_for('index') == url_for('blog.index')\", '    # in another app, you might define a separate main index here with', '    # app.route, while giving the blog blueprint a url_prefix, but for', '    # the tutorial the blog will be the main index', '    app.add_url_rule(\"/\", endpoint=\"index\")', '', '    return app']}, {'name': 'hello', 'start_line': 30, 'end_line': 31, 'text': ['    def hello():', '        return \"Hello, World!\"']}], 'text': ['import os', '', 'from flask import Flask', '', '', 'def create_app(test_config=None):', '    \"\"\"Create and configure an instance of the Flask application.\"\"\"', '    app = Flask(__name__, instance_relative_config=True)', '    app.config.from_mapping(', '        # a default secret that should be overridden by instance config', '        SECRET_KEY=\"dev\",', '        # store the database in the instance folder', '        DATABASE=os.path.join(app.instance_path, \"flaskr.sqlite\"),', '    )', '', '    if test_config is None:', '        # load the instance config, if it exists, when not testing', '        app.config.from_pyfile(\"config.py\", silent=True)', '    else:', '        # load the test config if passed in', '        app.config.update(test_config)', '', '    # ensure the instance folder exists', '    try:', '        os.makedirs(app.instance_path)', '    except OSError:', '        pass', '', '    @app.route(\"/hello\")', '    def hello():', '        return \"Hello, World!\"', '', '    # register the database commands', '    from flaskr import db', '', '    db.init_app(app)', '', '    # apply the blueprints to the app', '    from flaskr import auth, blog', '', '    app.register_blueprint(auth.bp)', '    app.register_blueprint(blog.bp)', '', \"    # make url_for('index') == url_for('blog.index')\", '    # in another app, you might define a separate main index here with', '    # app.route, while giving the blog blueprint a url_prefix, but for', '    # the tutorial the blog will be the main index', '    app.add_url_rule(\"/\", endpoint=\"index\")', '', '    return app']}, 'blog.py': {'classes': [], 'functions': [{'name': 'index', 'start_line': 17, 'end_line': 25, 'text': ['def index():', '    \"\"\"Show all the posts, most recent first.\"\"\"', '    db = get_db()', '    posts = db.execute(', '        \"SELECT p.id, title, body, created, author_id, username\"', '        \" FROM post p JOIN user u ON p.author_id = u.id\"', '        \" ORDER BY created DESC\"', '    ).fetchall()', '    return render_template(\"blog/index.html\", posts=posts)']}, {'name': 'get_post', 'start_line': 28, 'end_line': 57, 'text': ['def get_post(id, check_author=True):', '    \"\"\"Get a post and its author by id.', '', '    Checks that the id exists and optionally that the current user is', '    the author.', '', '    :param id: id of post to get', '    :param check_author: require the current user to be the author', '    :return: the post with author information', \"    :raise 404: if a post with the given id doesn't exist\", \"    :raise 403: if the current user isn't the author\", '    \"\"\"', '    post = (', '        get_db()', '        .execute(', '            \"SELECT p.id, title, body, created, author_id, username\"', '            \" FROM post p JOIN user u ON p.author_id = u.id\"', '            \" WHERE p.id = ?\",', '            (id,),', '        )', '        .fetchone()', '    )', '', '    if post is None:', '        abort(404, f\"Post id {id} doesn\\'t exist.\")', '', '    if check_author and post[\"author_id\"] != g.user[\"id\"]:', '        abort(403)', '', '    return post']}, {'name': 'create', 'start_line': 62, 'end_line': 83, 'text': ['def create():', '    \"\"\"Create a new post for the current user.\"\"\"', '    if request.method == \"POST\":', '        title = request.form[\"title\"]', '        body = request.form[\"body\"]', '        error = None', '', '        if not title:', '            error = \"Title is required.\"', '', '        if error is not None:', '            flash(error)', '        else:', '            db = get_db()', '            db.execute(', '                \"INSERT INTO post (title, body, author_id) VALUES (?, ?, ?)\",', '                (title, body, g.user[\"id\"]),', '            )', '            db.commit()', '            return redirect(url_for(\"blog.index\"))', '', '    return render_template(\"blog/create.html\")']}, {'name': 'update', 'start_line': 88, 'end_line': 110, 'text': ['def update(id):', '    \"\"\"Update a post if the current user is the author.\"\"\"', '    post = get_post(id)', '', '    if request.method == \"POST\":', '        title = request.form[\"title\"]', '        body = request.form[\"body\"]', '        error = None', '', '        if not title:', '            error = \"Title is required.\"', '', '        if error is not None:', '            flash(error)', '        else:', '            db = get_db()', '            db.execute(', '                \"UPDATE post SET title = ?, body = ? WHERE id = ?\", (title, body, id)', '            )', '            db.commit()', '            return redirect(url_for(\"blog.index\"))', '', '    return render_template(\"blog/update.html\", post=post)']}, {'name': 'delete', 'start_line': 115, 'end_line': 125, 'text': ['def delete(id):', '    \"\"\"Delete a post.', '', '    Ensures that the post exists and that the logged in user is the', '    author of the post.', '    \"\"\"', '    get_post(id)', '    db = get_db()', '    db.execute(\"DELETE FROM post WHERE id = ?\", (id,))', '    db.commit()', '    return redirect(url_for(\"blog.index\"))']}], 'text': ['from flask import Blueprint', 'from flask import flash', 'from flask import g', 'from flask import redirect', 'from flask import render_template', 'from flask import request', 'from flask import url_for', 'from werkzeug.exceptions import abort', '', 'from flaskr.auth import login_required', 'from flaskr.db import get_db', '', 'bp = Blueprint(\"blog\", __name__)', '', '', '@bp.route(\"/\")', 'def index():', '    \"\"\"Show all the posts, most recent first.\"\"\"', '    db = get_db()', '    posts = db.execute(', '        \"SELECT p.id, title, body, created, author_id, username\"', '        \" FROM post p JOIN user u ON p.author_id = u.id\"', '        \" ORDER BY created DESC\"', '    ).fetchall()', '    return render_template(\"blog/index.html\", posts=posts)', '', '', 'def get_post(id, check_author=True):', '    \"\"\"Get a post and its author by id.', '', '    Checks that the id exists and optionally that the current user is', '    the author.', '', '    :param id: id of post to get', '    :param check_author: require the current user to be the author', '    :return: the post with author information', \"    :raise 404: if a post with the given id doesn't exist\", \"    :raise 403: if the current user isn't the author\", '    \"\"\"', '    post = (', '        get_db()', '        .execute(', '            \"SELECT p.id, title, body, created, author_id, username\"', '            \" FROM post p JOIN user u ON p.author_id = u.id\"', '            \" WHERE p.id = ?\",', '            (id,),', '        )', '        .fetchone()', '    )', '', '    if post is None:', '        abort(404, f\"Post id {id} doesn\\'t exist.\")', '', '    if check_author and post[\"author_id\"] != g.user[\"id\"]:', '        abort(403)', '', '    return post', '', '', '@bp.route(\"/create\", methods=(\"GET\", \"POST\"))', '@login_required', 'def create():', '    \"\"\"Create a new post for the current user.\"\"\"', '    if request.method == \"POST\":', '        title = request.form[\"title\"]', '        body = request.form[\"body\"]', '        error = None', '', '        if not title:', '            error = \"Title is required.\"', '', '        if error is not None:', '            flash(error)', '        else:', '            db = get_db()', '            db.execute(', '                \"INSERT INTO post (title, body, author_id) VALUES (?, ?, ?)\",', '                (title, body, g.user[\"id\"]),', '            )', '            db.commit()', '            return redirect(url_for(\"blog.index\"))', '', '    return render_template(\"blog/create.html\")', '', '', '@bp.route(\"/<int:id>/update\", methods=(\"GET\", \"POST\"))', '@login_required', 'def update(id):', '    \"\"\"Update a post if the current user is the author.\"\"\"', '    post = get_post(id)', '', '    if request.method == \"POST\":', '        title = request.form[\"title\"]', '        body = request.form[\"body\"]', '        error = None', '', '        if not title:', '            error = \"Title is required.\"', '', '        if error is not None:', '            flash(error)', '        else:', '            db = get_db()', '            db.execute(', '                \"UPDATE post SET title = ?, body = ? WHERE id = ?\", (title, body, id)', '            )', '            db.commit()', '            return redirect(url_for(\"blog.index\"))', '', '    return render_template(\"blog/update.html\", post=post)', '', '', '@bp.route(\"/<int:id>/delete\", methods=(\"POST\",))', '@login_required', 'def delete(id):', '    \"\"\"Delete a post.', '', '    Ensures that the post exists and that the logged in user is the', '    author of the post.', '    \"\"\"', '    get_post(id)', '    db = get_db()', '    db.execute(\"DELETE FROM post WHERE id = ?\", (id,))', '    db.commit()', '    return redirect(url_for(\"blog.index\"))']}, 'auth.py': {'classes': [], 'functions': [{'name': 'login_required', 'start_line': 19, 'end_line': 29, 'text': ['def login_required(view):', '    \"\"\"View decorator that redirects anonymous users to the login page.\"\"\"', '', '    @functools.wraps(view)', '    def wrapped_view(**kwargs):', '        if g.user is None:', '            return redirect(url_for(\"auth.login\"))', '', '        return view(**kwargs)', '', '    return wrapped_view']}, {'name': 'load_logged_in_user', 'start_line': 33, 'end_line': 43, 'text': ['def load_logged_in_user():', '    \"\"\"If a user id is stored in the session, load the user object from', '    the database into ``g.user``.\"\"\"', '    user_id = session.get(\"user_id\")', '', '    if user_id is None:', '        g.user = None', '    else:', '        g.user = (', '            get_db().execute(\"SELECT * FROM user WHERE id = ?\", (user_id,)).fetchone()', '        )']}, {'name': 'register', 'start_line': 47, 'end_line': 81, 'text': ['def register():', '    \"\"\"Register a new user.', '', '    Validates that the username is not already taken. Hashes the', '    password for security.', '    \"\"\"', '    if request.method == \"POST\":', '        username = request.form[\"username\"]', '        password = request.form[\"password\"]', '        db = get_db()', '        error = None', '', '        if not username:', '            error = \"Username is required.\"', '        elif not password:', '            error = \"Password is required.\"', '', '        if error is None:', '            try:', '                db.execute(', '                    \"INSERT INTO user (username, password) VALUES (?, ?)\",', '                    (username, generate_password_hash(password)),', '                )', '                db.commit()', '            except db.IntegrityError:', '                # The username was already taken, which caused the', '                # commit to fail. Show a validation error.', '                error = f\"User {username} is already registered.\"', '            else:', '                # Success, go to the login page.', '                return redirect(url_for(\"auth.login\"))', '', '        flash(error)', '', '    return render_template(\"auth/register.html\")']}, {'name': 'login', 'start_line': 85, 'end_line': 109, 'text': ['def login():', '    \"\"\"Log in a registered user by adding the user id to the session.\"\"\"', '    if request.method == \"POST\":', '        username = request.form[\"username\"]', '        password = request.form[\"password\"]', '        db = get_db()', '        error = None', '        user = db.execute(', '            \"SELECT * FROM user WHERE username = ?\", (username,)', '        ).fetchone()', '', '        if user is None:', '            error = \"Incorrect username.\"', '        elif not check_password_hash(user[\"password\"], password):', '            error = \"Incorrect password.\"', '', '        if error is None:', '            # store the user id in a new session and return to the index', '            session.clear()', '            session[\"user_id\"] = user[\"id\"]', '            return redirect(url_for(\"index\"))', '', '        flash(error)', '', '    return render_template(\"auth/login.html\")']}, {'name': 'logout', 'start_line': 113, 'end_line': 116, 'text': ['def logout():', '    \"\"\"Clear the current session, including the stored user id.\"\"\"', '    session.clear()', '    return redirect(url_for(\"index\"))']}, {'name': 'wrapped_view', 'start_line': 23, 'end_line': 27, 'text': ['    def wrapped_view(**kwargs):', '        if g.user is None:', '            return redirect(url_for(\"auth.login\"))', '', '        return view(**kwargs)']}], 'text': ['import functools', '', 'from flask import Blueprint', 'from flask import flash', 'from flask import g', 'from flask import redirect', 'from flask import render_template', 'from flask import request', 'from flask import session', 'from flask import url_for', 'from werkzeug.security import check_password_hash', 'from werkzeug.security import generate_password_hash', '', 'from flaskr.db import get_db', '', 'bp = Blueprint(\"auth\", __name__, url_prefix=\"/auth\")', '', '', 'def login_required(view):', '    \"\"\"View decorator that redirects anonymous users to the login page.\"\"\"', '', '    @functools.wraps(view)', '    def wrapped_view(**kwargs):', '        if g.user is None:', '            return redirect(url_for(\"auth.login\"))', '', '        return view(**kwargs)', '', '    return wrapped_view', '', '', '@bp.before_app_request', 'def load_logged_in_user():', '    \"\"\"If a user id is stored in the session, load the user object from', '    the database into ``g.user``.\"\"\"', '    user_id = session.get(\"user_id\")', '', '    if user_id is None:', '        g.user = None', '    else:', '        g.user = (', '            get_db().execute(\"SELECT * FROM user WHERE id = ?\", (user_id,)).fetchone()', '        )', '', '', '@bp.route(\"/register\", methods=(\"GET\", \"POST\"))', 'def register():', '    \"\"\"Register a new user.', '', '    Validates that the username is not already taken. Hashes the', '    password for security.', '    \"\"\"', '    if request.method == \"POST\":', '        username = request.form[\"username\"]', '        password = request.form[\"password\"]', '        db = get_db()', '        error = None', '', '        if not username:', '            error = \"Username is required.\"', '        elif not password:', '            error = \"Password is required.\"', '', '        if error is None:', '            try:', '                db.execute(', '                    \"INSERT INTO user (username, password) VALUES (?, ?)\",', '                    (username, generate_password_hash(password)),', '                )', '                db.commit()', '            except db.IntegrityError:', '                # The username was already taken, which caused the', '                # commit to fail. Show a validation error.', '                error = f\"User {username} is already registered.\"', '            else:', '                # Success, go to the login page.', '                return redirect(url_for(\"auth.login\"))', '', '        flash(error)', '', '    return render_template(\"auth/register.html\")', '', '', '@bp.route(\"/login\", methods=(\"GET\", \"POST\"))', 'def login():', '    \"\"\"Log in a registered user by adding the user id to the session.\"\"\"', '    if request.method == \"POST\":', '        username = request.form[\"username\"]', '        password = request.form[\"password\"]', '        db = get_db()', '        error = None', '        user = db.execute(', '            \"SELECT * FROM user WHERE username = ?\", (username,)', '        ).fetchone()', '', '        if user is None:', '            error = \"Incorrect username.\"', '        elif not check_password_hash(user[\"password\"], password):', '            error = \"Incorrect password.\"', '', '        if error is None:', '            # store the user id in a new session and return to the index', '            session.clear()', '            session[\"user_id\"] = user[\"id\"]', '            return redirect(url_for(\"index\"))', '', '        flash(error)', '', '    return render_template(\"auth/login.html\")', '', '', '@bp.route(\"/logout\")', 'def logout():', '    \"\"\"Clear the current session, including the stored user id.\"\"\"', '    session.clear()', '    return redirect(url_for(\"index\"))']}}}, 'javascript': {'js_example': {'__init__.py': {'classes': [], 'functions': [], 'text': ['from flask import Flask', '', 'app = Flask(__name__)', '', 'from js_example import views  # noqa: E402, F401']}, 'views.py': {'classes': [], 'functions': [{'name': 'index', 'start_line': 10, 'end_line': 11, 'text': ['def index(js):', '    return render_template(f\"{js}.html\", js=js)']}, {'name': 'add', 'start_line': 15, 'end_line': 18, 'text': ['def add():', '    a = request.form.get(\"a\", 0, type=float)', '    b = request.form.get(\"b\", 0, type=float)', '    return jsonify(result=a + b)']}], 'text': ['from flask import jsonify', 'from flask import render_template', 'from flask import request', '', 'from js_example import app', '', '', '@app.route(\"/\", defaults={\"js\": \"fetch\"})', '@app.route(\"/<any(xhr, jquery, fetch):js>\")', 'def index(js):', '    return render_template(f\"{js}.html\", js=js)', '', '', '@app.route(\"/add\", methods=[\"POST\"])', 'def add():', '    a = request.form.get(\"a\", 0, type=float)', '    b = request.form.get(\"b\", 0, type=float)', '    return jsonify(result=a + b)']}}}, 'celery': {'make_celery.py': {'classes': [], 'functions': [], 'text': ['from task_app import create_app', '', 'flask_app = create_app()', 'celery_app = flask_app.extensions[\"celery\"]']}, 'src': {'task_app': {'__init__.py': {'classes': [{'name': 'FlaskTask', 'start_line': 30, 'end_line': 33, 'text': ['    class FlaskTask(Task):', '        def __call__(self, *args: object, **kwargs: object) -> object:', '            with app.app_context():', '                return self.run(*args, **kwargs)'], 'methods': [{'name': '__call__', 'start_line': 31, 'end_line': 33, 'text': ['        def __call__(self, *args: object, **kwargs: object) -> object:', '            with app.app_context():', '                return self.run(*args, **kwargs)']}]}], 'functions': [{'name': 'create_app', 'start_line': 7, 'end_line': 26, 'text': ['def create_app() -> Flask:', '    app = Flask(__name__)', '    app.config.from_mapping(', '        CELERY=dict(', '            broker_url=\"redis://localhost\",', '            result_backend=\"redis://localhost\",', '            task_ignore_result=True,', '        ),', '    )', '    app.config.from_prefixed_env()', '    celery_init_app(app)', '', '    @app.route(\"/\")', '    def index() -> str:', '        return render_template(\"index.html\")', '', '    from . import views', '', '    app.register_blueprint(views.bp)', '    return app']}, {'name': 'celery_init_app', 'start_line': 29, 'end_line': 39, 'text': ['def celery_init_app(app: Flask) -> Celery:', '    class FlaskTask(Task):', '        def __call__(self, *args: object, **kwargs: object) -> object:', '            with app.app_context():', '                return self.run(*args, **kwargs)', '', '    celery_app = Celery(app.name, task_cls=FlaskTask)', '    celery_app.config_from_object(app.config[\"CELERY\"])', '    celery_app.set_default()', '    app.extensions[\"celery\"] = celery_app', '    return celery_app']}, {'name': 'index', 'start_line': 20, 'end_line': 21, 'text': ['    def index() -> str:', '        return render_template(\"index.html\")']}], 'text': ['from celery import Celery', 'from celery import Task', 'from flask import Flask', 'from flask import render_template', '', '', 'def create_app() -> Flask:', '    app = Flask(__name__)', '    app.config.from_mapping(', '        CELERY=dict(', '            broker_url=\"redis://localhost\",', '            result_backend=\"redis://localhost\",', '            task_ignore_result=True,', '        ),', '    )', '    app.config.from_prefixed_env()', '    celery_init_app(app)', '', '    @app.route(\"/\")', '    def index() -> str:', '        return render_template(\"index.html\")', '', '    from . import views', '', '    app.register_blueprint(views.bp)', '    return app', '', '', 'def celery_init_app(app: Flask) -> Celery:', '    class FlaskTask(Task):', '        def __call__(self, *args: object, **kwargs: object) -> object:', '            with app.app_context():', '                return self.run(*args, **kwargs)', '', '    celery_app = Celery(app.name, task_cls=FlaskTask)', '    celery_app.config_from_object(app.config[\"CELERY\"])', '    celery_app.set_default()', '    app.extensions[\"celery\"] = celery_app', '    return celery_app']}, 'views.py': {'classes': [], 'functions': [{'name': 'result', 'start_line': 11, 'end_line': 18, 'text': ['def result(id: str) -> dict[str, object]:', '    result = AsyncResult(id)', '    ready = result.ready()', '    return {', '        \"ready\": ready,', '        \"successful\": result.successful() if ready else None,', '        \"value\": result.get() if ready else result.result,', '    }']}, {'name': 'add', 'start_line': 22, 'end_line': 26, 'text': ['def add() -> dict[str, object]:', '    a = request.form.get(\"a\", type=int)', '    b = request.form.get(\"b\", type=int)', '    result = tasks.add.delay(a, b)', '    return {\"result_id\": result.id}']}, {'name': 'block', 'start_line': 30, 'end_line': 32, 'text': ['def block() -> dict[str, object]:', '    result = tasks.block.delay()', '    return {\"result_id\": result.id}']}, {'name': 'process', 'start_line': 36, 'end_line': 38, 'text': ['def process() -> dict[str, object]:', '    result = tasks.process.delay(total=request.form.get(\"total\", type=int))', '    return {\"result_id\": result.id}']}], 'text': ['from celery.result import AsyncResult', 'from flask import Blueprint', 'from flask import request', '', 'from . import tasks', '', 'bp = Blueprint(\"tasks\", __name__, url_prefix=\"/tasks\")', '', '', '@bp.get(\"/result/<id>\")', 'def result(id: str) -> dict[str, object]:', '    result = AsyncResult(id)', '    ready = result.ready()', '    return {', '        \"ready\": ready,', '        \"successful\": result.successful() if ready else None,', '        \"value\": result.get() if ready else result.result,', '    }', '', '', '@bp.post(\"/add\")', 'def add() -> dict[str, object]:', '    a = request.form.get(\"a\", type=int)', '    b = request.form.get(\"b\", type=int)', '    result = tasks.add.delay(a, b)', '    return {\"result_id\": result.id}', '', '', '@bp.post(\"/block\")', 'def block() -> dict[str, object]:', '    result = tasks.block.delay()', '    return {\"result_id\": result.id}', '', '', '@bp.post(\"/process\")', 'def process() -> dict[str, object]:', '    result = tasks.process.delay(total=request.form.get(\"total\", type=int))', '    return {\"result_id\": result.id}']}, 'tasks.py': {'classes': [], 'functions': [{'name': 'add', 'start_line': 8, 'end_line': 9, 'text': ['def add(a: int, b: int) -> int:', '    return a + b']}, {'name': 'block', 'start_line': 13, 'end_line': 14, 'text': ['def block() -> None:', '    time.sleep(5)']}, {'name': 'process', 'start_line': 18, 'end_line': 23, 'text': ['def process(self: Task, total: int) -> object:', '    for i in range(total):', '        self.update_state(state=\"PROGRESS\", meta={\"current\": i + 1, \"total\": total})', '        time.sleep(1)', '', '    return {\"current\": total, \"total\": total}']}], 'text': ['import time', '', 'from celery import shared_task', 'from celery import Task', '', '', '@shared_task(ignore_result=False)', 'def add(a: int, b: int) -> int:', '    return a + b', '', '', '@shared_task()', 'def block() -> None:', '    time.sleep(5)', '', '', '@shared_task(bind=True, ignore_result=False)', 'def process(self: Task, total: int) -> object:', '    for i in range(total):', '        self.update_state(state=\"PROGRESS\", meta={\"current\": i + 1, \"total\": total})', '        time.sleep(1)', '', '    return {\"current\": total, \"total\": total}']}}}}}, 'src': {'flask': {'config.py': {'classes': [{'name': 'ConfigAttribute', 'start_line': 10, 'end_line': 26, 'text': ['class ConfigAttribute:', '    \"\"\"Makes an attribute forward to the config\"\"\"', '', '    def __init__(self, name: str, get_converter: t.Optional[t.Callable] = None) -> None:', '        self.__name__ = name', '        self.get_converter = get_converter', '', '    def __get__(self, obj: t.Any, owner: t.Any = None) -> t.Any:', '        if obj is None:', '            return self', '        rv = obj.config[self.__name__]', '        if self.get_converter is not None:', '            rv = self.get_converter(rv)', '        return rv', '', '    def __set__(self, obj: t.Any, value: t.Any) -> None:', '        obj.config[self.__name__] = value'], 'methods': [{'name': '__init__', 'start_line': 13, 'end_line': 15, 'text': ['    def __init__(self, name: str, get_converter: t.Optional[t.Callable] = None) -> None:', '        self.__name__ = name', '        self.get_converter = get_converter']}, {'name': '__get__', 'start_line': 17, 'end_line': 23, 'text': ['    def __get__(self, obj: t.Any, owner: t.Any = None) -> t.Any:', '        if obj is None:', '            return self', '        rv = obj.config[self.__name__]', '        if self.get_converter is not None:', '            rv = self.get_converter(rv)', '        return rv']}, {'name': '__set__', 'start_line': 25, 'end_line': 26, 'text': ['    def __set__(self, obj: t.Any, value: t.Any) -> None:', '        obj.config[self.__name__] = value']}]}, {'name': 'Config', 'start_line': 29, 'end_line': 343, 'text': ['class Config(dict):', '    \"\"\"Works exactly like a dict but provides ways to fill it from files', '    or special dictionaries.  There are two common patterns to populate the', '    config.', '', '    Either you can fill the config from a config file::', '', \"        app.config.from_pyfile('yourconfig.cfg')\", '', '    Or alternatively you can define the configuration options in the', '    module that calls :meth:`from_object` or provide an import path to', '    a module that should be loaded.  It is also possible to tell it to', '    use the same module and with that provide the configuration values', '    just before the call::', '', '        DEBUG = True', \"        SECRET_KEY = 'development key'\", '        app.config.from_object(__name__)', '', '    In both cases (loading from any Python file or loading from modules),', '    only uppercase keys are added to the config.  This makes it possible to use', '    lowercase values in the config file for temporary values that are not added', '    to the config or to define the config keys in the same file that implements', '    the application.', '', '    Probably the most interesting way to load configurations is from an', '    environment variable pointing to a file::', '', \"        app.config.from_envvar('YOURAPPLICATION_SETTINGS')\", '', '    In this case before launching the application you have to set this', '    environment variable to the file you want to use.  On Linux and OS X', '    use the export statement::', '', \"        export YOURAPPLICATION_SETTINGS='/path/to/config/file'\", '', '    On windows use `set` instead.', '', '    :param root_path: path to which files are read relative from.  When the', '                      config object is created by the application, this is', \"                      the application's :attr:`~flask.Flask.root_path`.\", '    :param defaults: an optional dictionary of default values', '    \"\"\"', '', '    def __init__(self, root_path: str, defaults: t.Optional[dict] = None) -> None:', '        super().__init__(defaults or {})', '        self.root_path = root_path', '', '    def from_envvar(self, variable_name: str, silent: bool = False) -> bool:', '        \"\"\"Loads a configuration from an environment variable pointing to', '        a configuration file.  This is basically just a shortcut with nicer', '        error messages for this line of code::', '', \"            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\", '', '        :param variable_name: name of the environment variable', '        :param silent: set to ``True`` if you want silent failure for missing', '                       files.', '        :return: ``True`` if the file was loaded successfully.', '        \"\"\"', '        rv = os.environ.get(variable_name)', '        if not rv:', '            if silent:', '                return False', '            raise RuntimeError(', '                f\"The environment variable {variable_name!r} is not set\"', '                \" and as such configuration could not be loaded. Set\"', '                \" this variable and make it point to a configuration\"', '                \" file\"', '            )', '        return self.from_pyfile(rv, silent=silent)', '', '    def from_prefixed_env(', '        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads', '    ) -> bool:', '        \"\"\"Load any environment variables that start with ``FLASK_``,', '        dropping the prefix from the env key for the config key. Values', '        are passed through a loading function to attempt to convert them', '        to more specific types than strings.', '', '        Keys are loaded in :func:`sorted` order.', '', '        The default loading function attempts to parse values as any', '        valid JSON type, including dicts and lists.', '', '        Specific items in nested dicts can be set by separating the', '        keys with double underscores (``__``). If an intermediate key', \"        doesn't exist, it will be initialized to an empty dict.\", '', '        :param prefix: Load env vars that start with this prefix,', '            separated with an underscore (``_``).', '        :param loads: Pass each string value to this function and use', '            the returned value as the config value. If any error is', '            raised it is ignored and the value remains a string. The', '            default is :func:`json.loads`.', '', '        .. versionadded:: 2.1', '        \"\"\"', '        prefix = f\"{prefix}_\"', '        len_prefix = len(prefix)', '', '        for key in sorted(os.environ):', '            if not key.startswith(prefix):', '                continue', '', '            value = os.environ[key]', '', '            try:', '                value = loads(value)', '            except Exception:', '                # Keep the value as a string if loading failed.', '                pass', '', '            # Change to key.removeprefix(prefix) on Python >= 3.9.', '            key = key[len_prefix:]', '', '            if \"__\" not in key:', '                # A non-nested key, set directly.', '                self[key] = value', '                continue', '', '            # Traverse nested dictionaries with keys separated by \"__\".', '            current = self', '            *parts, tail = key.split(\"__\")', '', '            for part in parts:', '                # If an intermediate dict does not exist, create it.', '                if part not in current:', '                    current[part] = {}', '', '                current = current[part]', '', '            current[tail] = value', '', '        return True', '', '    def from_pyfile(self, filename: str, silent: bool = False) -> bool:', '        \"\"\"Updates the values in the config from a Python file.  This function', '        behaves as if the file was imported as module with the', '        :meth:`from_object` function.', '', '        :param filename: the filename of the config.  This can either be an', '                         absolute filename or a filename relative to the', '                         root path.', '        :param silent: set to ``True`` if you want silent failure for missing', '                       files.', '        :return: ``True`` if the file was loaded successfully.', '', '        .. versionadded:: 0.7', '           `silent` parameter.', '        \"\"\"', '        filename = os.path.join(self.root_path, filename)', '        d = types.ModuleType(\"config\")', '        d.__file__ = filename', '        try:', '            with open(filename, mode=\"rb\") as config_file:', '                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)', '        except OSError as e:', '            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):', '                return False', '            e.strerror = f\"Unable to load configuration file ({e.strerror})\"', '            raise', '        self.from_object(d)', '        return True', '', '    def from_object(self, obj: t.Union[object, str]) -> None:', '        \"\"\"Updates the values from the given object.  An object can be of one', '        of the following two types:', '', '        -   a string: in this case the object with that name will be imported', '        -   an actual object reference: that object is used directly', '', '        Objects are usually either modules or classes. :meth:`from_object`', '        loads only the uppercase attributes of the module/class. A ``dict``', '        object will not work with :meth:`from_object` because the keys of a', '        ``dict`` are not attributes of the ``dict`` class.', '', '        Example of module-based configuration::', '', \"            app.config.from_object('yourapplication.default_config')\", '            from yourapplication import default_config', '            app.config.from_object(default_config)', '', '        Nothing is done to the object before loading. If the object is a', '        class and has ``@property`` attributes, it needs to be', '        instantiated before being passed to this method.', '', '        You should not use this function to load the actual configuration but', '        rather configuration defaults.  The actual config should be loaded', '        with :meth:`from_pyfile` and ideally from a location not within the', '        package because the package might be installed system wide.', '', '        See :ref:`config-dev-prod` for an example of class-based configuration', '        using :meth:`from_object`.', '', '        :param obj: an import name or object', '        \"\"\"', '        if isinstance(obj, str):', '            obj = import_string(obj)', '        for key in dir(obj):', '            if key.isupper():', '                self[key] = getattr(obj, key)', '', '    def from_file(', '        self,', '        filename: str,', '        load: t.Callable[[t.IO[t.Any]], t.Mapping],', '        silent: bool = False,', '        text: bool = True,', '    ) -> bool:', '        \"\"\"Update the values in the config from a file that is loaded', '        using the ``load`` parameter. The loaded data is passed to the', '        :meth:`from_mapping` method.', '', '        .. code-block:: python', '', '            import json', '            app.config.from_file(\"config.json\", load=json.load)', '', '            import tomllib', '            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)', '', '        :param filename: The path to the data file. This can be an', '            absolute path or relative to the config root path.', '        :param load: A callable that takes a file handle and returns a', '            mapping of loaded data from the file.', '        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``', '            implements a ``read`` method.', \"        :param silent: Ignore the file if it doesn't exist.\", '        :param text: Open the file in text or binary mode.', '        :return: ``True`` if the file was loaded successfully.', '', '        .. versionchanged:: 2.3', '            The ``text`` parameter was added.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        filename = os.path.join(self.root_path, filename)', '', '        try:', '            with open(filename, \"r\" if text else \"rb\") as f:', '                obj = load(f)', '        except OSError as e:', '            if silent and e.errno in (errno.ENOENT, errno.EISDIR):', '                return False', '', '            e.strerror = f\"Unable to load configuration file ({e.strerror})\"', '            raise', '', '        return self.from_mapping(obj)', '', '    def from_mapping(', '        self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any', '    ) -> bool:', '        \"\"\"Updates the config like :meth:`update` ignoring items with', '        non-upper keys.', '', '        :return: Always returns ``True``.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        mappings: t.Dict[str, t.Any] = {}', '        if mapping is not None:', '            mappings.update(mapping)', '        mappings.update(kwargs)', '        for key, value in mappings.items():', '            if key.isupper():', '                self[key] = value', '        return True', '', '    def get_namespace(', '        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True', '    ) -> t.Dict[str, t.Any]:', '        \"\"\"Returns a dictionary containing a subset of configuration options', '        that match the specified namespace/prefix. Example usage::', '', \"            app.config['IMAGE_STORE_TYPE'] = 'fs'\", \"            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\", \"            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\", \"            image_store_config = app.config.get_namespace('IMAGE_STORE_')\", '', '        The resulting dictionary `image_store_config` would look like::', '', '            {', \"                'type': 'fs',\", \"                'path': '/var/app/images',\", \"                'base_url': 'http://img.website.com'\", '            }', '', '        This is often useful when configuration options map directly to', '        keyword arguments in functions or class constructors.', '', '        :param namespace: a configuration namespace', '        :param lowercase: a flag indicating if the keys of the resulting', '                          dictionary should be lowercase', '        :param trim_namespace: a flag indicating if the keys of the resulting', '                          dictionary should not include the namespace', '', '        .. versionadded:: 0.11', '        \"\"\"', '        rv = {}', '        for k, v in self.items():', '            if not k.startswith(namespace):', '                continue', '            if trim_namespace:', '                key = k[len(namespace) :]', '            else:', '                key = k', '            if lowercase:', '                key = key.lower()', '            rv[key] = v', '        return rv', '', '    def __repr__(self) -> str:', '        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"'], 'methods': [{'name': '__init__', 'start_line': 73, 'end_line': 75, 'text': ['    def __init__(self, root_path: str, defaults: t.Optional[dict] = None) -> None:', '        super().__init__(defaults or {})', '        self.root_path = root_path']}, {'name': 'from_envvar', 'start_line': 77, 'end_line': 99, 'text': ['    def from_envvar(self, variable_name: str, silent: bool = False) -> bool:', '        \"\"\"Loads a configuration from an environment variable pointing to', '        a configuration file.  This is basically just a shortcut with nicer', '        error messages for this line of code::', '', \"            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\", '', '        :param variable_name: name of the environment variable', '        :param silent: set to ``True`` if you want silent failure for missing', '                       files.', '        :return: ``True`` if the file was loaded successfully.', '        \"\"\"', '        rv = os.environ.get(variable_name)', '        if not rv:', '            if silent:', '                return False', '            raise RuntimeError(', '                f\"The environment variable {variable_name!r} is not set\"', '                \" and as such configuration could not be loaded. Set\"', '                \" this variable and make it point to a configuration\"', '                \" file\"', '            )', '        return self.from_pyfile(rv, silent=silent)']}, {'name': 'from_prefixed_env', 'start_line': 101, 'end_line': 163, 'text': ['    def from_prefixed_env(', '        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads', '    ) -> bool:', '        \"\"\"Load any environment variables that start with ``FLASK_``,', '        dropping the prefix from the env key for the config key. Values', '        are passed through a loading function to attempt to convert them', '        to more specific types than strings.', '', '        Keys are loaded in :func:`sorted` order.', '', '        The default loading function attempts to parse values as any', '        valid JSON type, including dicts and lists.', '', '        Specific items in nested dicts can be set by separating the', '        keys with double underscores (``__``). If an intermediate key', \"        doesn't exist, it will be initialized to an empty dict.\", '', '        :param prefix: Load env vars that start with this prefix,', '            separated with an underscore (``_``).', '        :param loads: Pass each string value to this function and use', '            the returned value as the config value. If any error is', '            raised it is ignored and the value remains a string. The', '            default is :func:`json.loads`.', '', '        .. versionadded:: 2.1', '        \"\"\"', '        prefix = f\"{prefix}_\"', '        len_prefix = len(prefix)', '', '        for key in sorted(os.environ):', '            if not key.startswith(prefix):', '                continue', '', '            value = os.environ[key]', '', '            try:', '                value = loads(value)', '            except Exception:', '                # Keep the value as a string if loading failed.', '                pass', '', '            # Change to key.removeprefix(prefix) on Python >= 3.9.', '            key = key[len_prefix:]', '', '            if \"__\" not in key:', '                # A non-nested key, set directly.', '                self[key] = value', '                continue', '', '            # Traverse nested dictionaries with keys separated by \"__\".', '            current = self', '            *parts, tail = key.split(\"__\")', '', '            for part in parts:', '                # If an intermediate dict does not exist, create it.', '                if part not in current:', '                    current[part] = {}', '', '                current = current[part]', '', '            current[tail] = value', '', '        return True']}, {'name': 'from_pyfile', 'start_line': 165, 'end_line': 192, 'text': ['    def from_pyfile(self, filename: str, silent: bool = False) -> bool:', '        \"\"\"Updates the values in the config from a Python file.  This function', '        behaves as if the file was imported as module with the', '        :meth:`from_object` function.', '', '        :param filename: the filename of the config.  This can either be an', '                         absolute filename or a filename relative to the', '                         root path.', '        :param silent: set to ``True`` if you want silent failure for missing', '                       files.', '        :return: ``True`` if the file was loaded successfully.', '', '        .. versionadded:: 0.7', '           `silent` parameter.', '        \"\"\"', '        filename = os.path.join(self.root_path, filename)', '        d = types.ModuleType(\"config\")', '        d.__file__ = filename', '        try:', '            with open(filename, mode=\"rb\") as config_file:', '                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)', '        except OSError as e:', '            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):', '                return False', '            e.strerror = f\"Unable to load configuration file ({e.strerror})\"', '            raise', '        self.from_object(d)', '        return True']}, {'name': 'from_object', 'start_line': 194, 'end_line': 230, 'text': ['    def from_object(self, obj: t.Union[object, str]) -> None:', '        \"\"\"Updates the values from the given object.  An object can be of one', '        of the following two types:', '', '        -   a string: in this case the object with that name will be imported', '        -   an actual object reference: that object is used directly', '', '        Objects are usually either modules or classes. :meth:`from_object`', '        loads only the uppercase attributes of the module/class. A ``dict``', '        object will not work with :meth:`from_object` because the keys of a', '        ``dict`` are not attributes of the ``dict`` class.', '', '        Example of module-based configuration::', '', \"            app.config.from_object('yourapplication.default_config')\", '            from yourapplication import default_config', '            app.config.from_object(default_config)', '', '        Nothing is done to the object before loading. If the object is a', '        class and has ``@property`` attributes, it needs to be', '        instantiated before being passed to this method.', '', '        You should not use this function to load the actual configuration but', '        rather configuration defaults.  The actual config should be loaded', '        with :meth:`from_pyfile` and ideally from a location not within the', '        package because the package might be installed system wide.', '', '        See :ref:`config-dev-prod` for an example of class-based configuration', '        using :meth:`from_object`.', '', '        :param obj: an import name or object', '        \"\"\"', '        if isinstance(obj, str):', '            obj = import_string(obj)', '        for key in dir(obj):', '            if key.isupper():', '                self[key] = getattr(obj, key)']}, {'name': 'from_file', 'start_line': 232, 'end_line': 278, 'text': ['    def from_file(', '        self,', '        filename: str,', '        load: t.Callable[[t.IO[t.Any]], t.Mapping],', '        silent: bool = False,', '        text: bool = True,', '    ) -> bool:', '        \"\"\"Update the values in the config from a file that is loaded', '        using the ``load`` parameter. The loaded data is passed to the', '        :meth:`from_mapping` method.', '', '        .. code-block:: python', '', '            import json', '            app.config.from_file(\"config.json\", load=json.load)', '', '            import tomllib', '            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)', '', '        :param filename: The path to the data file. This can be an', '            absolute path or relative to the config root path.', '        :param load: A callable that takes a file handle and returns a', '            mapping of loaded data from the file.', '        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``', '            implements a ``read`` method.', \"        :param silent: Ignore the file if it doesn't exist.\", '        :param text: Open the file in text or binary mode.', '        :return: ``True`` if the file was loaded successfully.', '', '        .. versionchanged:: 2.3', '            The ``text`` parameter was added.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        filename = os.path.join(self.root_path, filename)', '', '        try:', '            with open(filename, \"r\" if text else \"rb\") as f:', '                obj = load(f)', '        except OSError as e:', '            if silent and e.errno in (errno.ENOENT, errno.EISDIR):', '                return False', '', '            e.strerror = f\"Unable to load configuration file ({e.strerror})\"', '            raise', '', '        return self.from_mapping(obj)']}, {'name': 'from_mapping', 'start_line': 280, 'end_line': 297, 'text': ['    def from_mapping(', '        self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any', '    ) -> bool:', '        \"\"\"Updates the config like :meth:`update` ignoring items with', '        non-upper keys.', '', '        :return: Always returns ``True``.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        mappings: t.Dict[str, t.Any] = {}', '        if mapping is not None:', '            mappings.update(mapping)', '        mappings.update(kwargs)', '        for key, value in mappings.items():', '            if key.isupper():', '                self[key] = value', '        return True']}, {'name': 'get_namespace', 'start_line': 299, 'end_line': 340, 'text': ['    def get_namespace(', '        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True', '    ) -> t.Dict[str, t.Any]:', '        \"\"\"Returns a dictionary containing a subset of configuration options', '        that match the specified namespace/prefix. Example usage::', '', \"            app.config['IMAGE_STORE_TYPE'] = 'fs'\", \"            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\", \"            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\", \"            image_store_config = app.config.get_namespace('IMAGE_STORE_')\", '', '        The resulting dictionary `image_store_config` would look like::', '', '            {', \"                'type': 'fs',\", \"                'path': '/var/app/images',\", \"                'base_url': 'http://img.website.com'\", '            }', '', '        This is often useful when configuration options map directly to', '        keyword arguments in functions or class constructors.', '', '        :param namespace: a configuration namespace', '        :param lowercase: a flag indicating if the keys of the resulting', '                          dictionary should be lowercase', '        :param trim_namespace: a flag indicating if the keys of the resulting', '                          dictionary should not include the namespace', '', '        .. versionadded:: 0.11', '        \"\"\"', '        rv = {}', '        for k, v in self.items():', '            if not k.startswith(namespace):', '                continue', '            if trim_namespace:', '                key = k[len(namespace) :]', '            else:', '                key = k', '            if lowercase:', '                key = key.lower()', '            rv[key] = v', '        return rv']}, {'name': '__repr__', 'start_line': 342, 'end_line': 343, 'text': ['    def __repr__(self) -> str:', '        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"']}]}], 'functions': [], 'text': ['import errno', 'import json', 'import os', 'import types', 'import typing as t', '', 'from werkzeug.utils import import_string', '', '', 'class ConfigAttribute:', '    \"\"\"Makes an attribute forward to the config\"\"\"', '', '    def __init__(self, name: str, get_converter: t.Optional[t.Callable] = None) -> None:', '        self.__name__ = name', '        self.get_converter = get_converter', '', '    def __get__(self, obj: t.Any, owner: t.Any = None) -> t.Any:', '        if obj is None:', '            return self', '        rv = obj.config[self.__name__]', '        if self.get_converter is not None:', '            rv = self.get_converter(rv)', '        return rv', '', '    def __set__(self, obj: t.Any, value: t.Any) -> None:', '        obj.config[self.__name__] = value', '', '', 'class Config(dict):', '    \"\"\"Works exactly like a dict but provides ways to fill it from files', '    or special dictionaries.  There are two common patterns to populate the', '    config.', '', '    Either you can fill the config from a config file::', '', \"        app.config.from_pyfile('yourconfig.cfg')\", '', '    Or alternatively you can define the configuration options in the', '    module that calls :meth:`from_object` or provide an import path to', '    a module that should be loaded.  It is also possible to tell it to', '    use the same module and with that provide the configuration values', '    just before the call::', '', '        DEBUG = True', \"        SECRET_KEY = 'development key'\", '        app.config.from_object(__name__)', '', '    In both cases (loading from any Python file or loading from modules),', '    only uppercase keys are added to the config.  This makes it possible to use', '    lowercase values in the config file for temporary values that are not added', '    to the config or to define the config keys in the same file that implements', '    the application.', '', '    Probably the most interesting way to load configurations is from an', '    environment variable pointing to a file::', '', \"        app.config.from_envvar('YOURAPPLICATION_SETTINGS')\", '', '    In this case before launching the application you have to set this', '    environment variable to the file you want to use.  On Linux and OS X', '    use the export statement::', '', \"        export YOURAPPLICATION_SETTINGS='/path/to/config/file'\", '', '    On windows use `set` instead.', '', '    :param root_path: path to which files are read relative from.  When the', '                      config object is created by the application, this is', \"                      the application's :attr:`~flask.Flask.root_path`.\", '    :param defaults: an optional dictionary of default values', '    \"\"\"', '', '    def __init__(self, root_path: str, defaults: t.Optional[dict] = None) -> None:', '        super().__init__(defaults or {})', '        self.root_path = root_path', '', '    def from_envvar(self, variable_name: str, silent: bool = False) -> bool:', '        \"\"\"Loads a configuration from an environment variable pointing to', '        a configuration file.  This is basically just a shortcut with nicer', '        error messages for this line of code::', '', \"            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\", '', '        :param variable_name: name of the environment variable', '        :param silent: set to ``True`` if you want silent failure for missing', '                       files.', '        :return: ``True`` if the file was loaded successfully.', '        \"\"\"', '        rv = os.environ.get(variable_name)', '        if not rv:', '            if silent:', '                return False', '            raise RuntimeError(', '                f\"The environment variable {variable_name!r} is not set\"', '                \" and as such configuration could not be loaded. Set\"', '                \" this variable and make it point to a configuration\"', '                \" file\"', '            )', '        return self.from_pyfile(rv, silent=silent)', '', '    def from_prefixed_env(', '        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads', '    ) -> bool:', '        \"\"\"Load any environment variables that start with ``FLASK_``,', '        dropping the prefix from the env key for the config key. Values', '        are passed through a loading function to attempt to convert them', '        to more specific types than strings.', '', '        Keys are loaded in :func:`sorted` order.', '', '        The default loading function attempts to parse values as any', '        valid JSON type, including dicts and lists.', '', '        Specific items in nested dicts can be set by separating the', '        keys with double underscores (``__``). If an intermediate key', \"        doesn't exist, it will be initialized to an empty dict.\", '', '        :param prefix: Load env vars that start with this prefix,', '            separated with an underscore (``_``).', '        :param loads: Pass each string value to this function and use', '            the returned value as the config value. If any error is', '            raised it is ignored and the value remains a string. The', '            default is :func:`json.loads`.', '', '        .. versionadded:: 2.1', '        \"\"\"', '        prefix = f\"{prefix}_\"', '        len_prefix = len(prefix)', '', '        for key in sorted(os.environ):', '            if not key.startswith(prefix):', '                continue', '', '            value = os.environ[key]', '', '            try:', '                value = loads(value)', '            except Exception:', '                # Keep the value as a string if loading failed.', '                pass', '', '            # Change to key.removeprefix(prefix) on Python >= 3.9.', '            key = key[len_prefix:]', '', '            if \"__\" not in key:', '                # A non-nested key, set directly.', '                self[key] = value', '                continue', '', '            # Traverse nested dictionaries with keys separated by \"__\".', '            current = self', '            *parts, tail = key.split(\"__\")', '', '            for part in parts:', '                # If an intermediate dict does not exist, create it.', '                if part not in current:', '                    current[part] = {}', '', '                current = current[part]', '', '            current[tail] = value', '', '        return True', '', '    def from_pyfile(self, filename: str, silent: bool = False) -> bool:', '        \"\"\"Updates the values in the config from a Python file.  This function', '        behaves as if the file was imported as module with the', '        :meth:`from_object` function.', '', '        :param filename: the filename of the config.  This can either be an', '                         absolute filename or a filename relative to the', '                         root path.', '        :param silent: set to ``True`` if you want silent failure for missing', '                       files.', '        :return: ``True`` if the file was loaded successfully.', '', '        .. versionadded:: 0.7', '           `silent` parameter.', '        \"\"\"', '        filename = os.path.join(self.root_path, filename)', '        d = types.ModuleType(\"config\")', '        d.__file__ = filename', '        try:', '            with open(filename, mode=\"rb\") as config_file:', '                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)', '        except OSError as e:', '            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):', '                return False', '            e.strerror = f\"Unable to load configuration file ({e.strerror})\"', '            raise', '        self.from_object(d)', '        return True', '', '    def from_object(self, obj: t.Union[object, str]) -> None:', '        \"\"\"Updates the values from the given object.  An object can be of one', '        of the following two types:', '', '        -   a string: in this case the object with that name will be imported', '        -   an actual object reference: that object is used directly', '', '        Objects are usually either modules or classes. :meth:`from_object`', '        loads only the uppercase attributes of the module/class. A ``dict``', '        object will not work with :meth:`from_object` because the keys of a', '        ``dict`` are not attributes of the ``dict`` class.', '', '        Example of module-based configuration::', '', \"            app.config.from_object('yourapplication.default_config')\", '            from yourapplication import default_config', '            app.config.from_object(default_config)', '', '        Nothing is done to the object before loading. If the object is a', '        class and has ``@property`` attributes, it needs to be', '        instantiated before being passed to this method.', '', '        You should not use this function to load the actual configuration but', '        rather configuration defaults.  The actual config should be loaded', '        with :meth:`from_pyfile` and ideally from a location not within the', '        package because the package might be installed system wide.', '', '        See :ref:`config-dev-prod` for an example of class-based configuration', '        using :meth:`from_object`.', '', '        :param obj: an import name or object', '        \"\"\"', '        if isinstance(obj, str):', '            obj = import_string(obj)', '        for key in dir(obj):', '            if key.isupper():', '                self[key] = getattr(obj, key)', '', '    def from_file(', '        self,', '        filename: str,', '        load: t.Callable[[t.IO[t.Any]], t.Mapping],', '        silent: bool = False,', '        text: bool = True,', '    ) -> bool:', '        \"\"\"Update the values in the config from a file that is loaded', '        using the ``load`` parameter. The loaded data is passed to the', '        :meth:`from_mapping` method.', '', '        .. code-block:: python', '', '            import json', '            app.config.from_file(\"config.json\", load=json.load)', '', '            import tomllib', '            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)', '', '        :param filename: The path to the data file. This can be an', '            absolute path or relative to the config root path.', '        :param load: A callable that takes a file handle and returns a', '            mapping of loaded data from the file.', '        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``', '            implements a ``read`` method.', \"        :param silent: Ignore the file if it doesn't exist.\", '        :param text: Open the file in text or binary mode.', '        :return: ``True`` if the file was loaded successfully.', '', '        .. versionchanged:: 2.3', '            The ``text`` parameter was added.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        filename = os.path.join(self.root_path, filename)', '', '        try:', '            with open(filename, \"r\" if text else \"rb\") as f:', '                obj = load(f)', '        except OSError as e:', '            if silent and e.errno in (errno.ENOENT, errno.EISDIR):', '                return False', '', '            e.strerror = f\"Unable to load configuration file ({e.strerror})\"', '            raise', '', '        return self.from_mapping(obj)', '', '    def from_mapping(', '        self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any', '    ) -> bool:', '        \"\"\"Updates the config like :meth:`update` ignoring items with', '        non-upper keys.', '', '        :return: Always returns ``True``.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        mappings: t.Dict[str, t.Any] = {}', '        if mapping is not None:', '            mappings.update(mapping)', '        mappings.update(kwargs)', '        for key, value in mappings.items():', '            if key.isupper():', '                self[key] = value', '        return True', '', '    def get_namespace(', '        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True', '    ) -> t.Dict[str, t.Any]:', '        \"\"\"Returns a dictionary containing a subset of configuration options', '        that match the specified namespace/prefix. Example usage::', '', \"            app.config['IMAGE_STORE_TYPE'] = 'fs'\", \"            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\", \"            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\", \"            image_store_config = app.config.get_namespace('IMAGE_STORE_')\", '', '        The resulting dictionary `image_store_config` would look like::', '', '            {', \"                'type': 'fs',\", \"                'path': '/var/app/images',\", \"                'base_url': 'http://img.website.com'\", '            }', '', '        This is often useful when configuration options map directly to', '        keyword arguments in functions or class constructors.', '', '        :param namespace: a configuration namespace', '        :param lowercase: a flag indicating if the keys of the resulting', '                          dictionary should be lowercase', '        :param trim_namespace: a flag indicating if the keys of the resulting', '                          dictionary should not include the namespace', '', '        .. versionadded:: 0.11', '        \"\"\"', '        rv = {}', '        for k, v in self.items():', '            if not k.startswith(namespace):', '                continue', '            if trim_namespace:', '                key = k[len(namespace) :]', '            else:', '                key = k', '            if lowercase:', '                key = key.lower()', '            rv[key] = v', '        return rv', '', '    def __repr__(self) -> str:', '        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"']}, 'sessions.py': {'classes': [{'name': 'SessionMixin', 'start_line': 21, 'end_line': 46, 'text': ['class SessionMixin(MutableMapping):', '    \"\"\"Expands a basic dictionary with session attributes.\"\"\"', '', '    @property', '    def permanent(self) -> bool:', '        \"\"\"This reflects the ``\\'_permanent\\'`` key in the dict.\"\"\"', '        return self.get(\"_permanent\", False)', '', '    @permanent.setter', '    def permanent(self, value: bool) -> None:', '        self[\"_permanent\"] = bool(value)', '', '    #: Some implementations can detect whether a session is newly', '    #: created, but that is not guaranteed. Use with caution. The mixin', '    # default is hard-coded ``False``.', '    new = False', '', '    #: Some implementations can detect changes to the session and set', '    #: this when that happens. The mixin default is hard coded to', '    #: ``True``.', '    modified = True', '', '    #: Some implementations can detect when session data is read or', '    #: written and set this when that happens. The mixin default is hard', '    #: coded to ``True``.', '    accessed = True'], 'methods': [{'name': 'permanent', 'start_line': 25, 'end_line': 27, 'text': ['    def permanent(self) -> bool:', '        \"\"\"This reflects the ``\\'_permanent\\'`` key in the dict.\"\"\"', '        return self.get(\"_permanent\", False)']}, {'name': 'permanent', 'start_line': 30, 'end_line': 31, 'text': ['    def permanent(self, value: bool) -> None:', '        self[\"_permanent\"] = bool(value)']}]}, {'name': 'SecureCookieSession', 'start_line': 49, 'end_line': 88, 'text': ['class SecureCookieSession(CallbackDict, SessionMixin):', '    \"\"\"Base class for sessions based on signed cookies.', '', '    This session backend will set the :attr:`modified` and', '    :attr:`accessed` attributes. It cannot reliably track whether a', '    session is new (vs. empty), so :attr:`new` remains hard coded to', '    ``False``.', '    \"\"\"', '', '    #: When data is changed, this is set to ``True``. Only the session', '    #: dictionary itself is tracked; if the session contains mutable', '    #: data (for example a nested dict) then this must be set to', '    #: ``True`` manually when modifying that data. The session cookie', '    #: will only be written to the response if this is ``True``.', '    modified = False', '', '    #: When data is read or written, this is set to ``True``. Used by', '    # :class:`.SecureCookieSessionInterface` to add a ``Vary: Cookie``', '    #: header, which allows caching proxies to cache different pages for', '    #: different users.', '    accessed = False', '', '    def __init__(self, initial: t.Any = None) -> None:', '        def on_update(self) -> None:', '            self.modified = True', '            self.accessed = True', '', '        super().__init__(initial, on_update)', '', '    def __getitem__(self, key: str) -> t.Any:', '        self.accessed = True', '        return super().__getitem__(key)', '', '    def get(self, key: str, default: t.Any = None) -> t.Any:', '        self.accessed = True', '        return super().get(key, default)', '', '    def setdefault(self, key: str, default: t.Any = None) -> t.Any:', '        self.accessed = True', '        return super().setdefault(key, default)'], 'methods': [{'name': '__init__', 'start_line': 71, 'end_line': 76, 'text': ['    def __init__(self, initial: t.Any = None) -> None:', '        def on_update(self) -> None:', '            self.modified = True', '            self.accessed = True', '', '        super().__init__(initial, on_update)']}, {'name': '__getitem__', 'start_line': 78, 'end_line': 80, 'text': ['    def __getitem__(self, key: str) -> t.Any:', '        self.accessed = True', '        return super().__getitem__(key)']}, {'name': 'get', 'start_line': 82, 'end_line': 84, 'text': ['    def get(self, key: str, default: t.Any = None) -> t.Any:', '        self.accessed = True', '        return super().get(key, default)']}, {'name': 'setdefault', 'start_line': 86, 'end_line': 88, 'text': ['    def setdefault(self, key: str, default: t.Any = None) -> t.Any:', '        self.accessed = True', '        return super().setdefault(key, default)']}]}, {'name': 'NullSession', 'start_line': 91, 'end_line': 105, 'text': ['class NullSession(SecureCookieSession):', '    \"\"\"Class used to generate nicer error messages if sessions are not', '    available.  Will still allow read-only access to the empty session', '    but fail on setting.', '    \"\"\"', '', '    def _fail(self, *args: t.Any, **kwargs: t.Any) -> \"te.NoReturn\":', '        raise RuntimeError(', '            \"The session is unavailable because no secret \"', '            \"key was set.  Set the secret_key on the \"', '            \"application to something unique and secret.\"', '        )', '', '    __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail  # type: ignore # noqa: B950', '    del _fail'], 'methods': [{'name': '_fail', 'start_line': 97, 'end_line': 102, 'text': ['    def _fail(self, *args: t.Any, **kwargs: t.Any) -> \"te.NoReturn\":', '        raise RuntimeError(', '            \"The session is unavailable because no secret \"', '            \"key was set.  Set the secret_key on the \"', '            \"application to something unique and secret.\"', '        )']}]}, {'name': 'SessionInterface', 'start_line': 108, 'end_line': 320, 'text': ['class SessionInterface:', '    \"\"\"The basic interface you have to implement in order to replace the', \"    default session interface which uses werkzeug's securecookie\", '    implementation.  The only methods you have to implement are', '    :meth:`open_session` and :meth:`save_session`, the others have', \"    useful defaults which you don't need to change.\", '', '    The session object returned by the :meth:`open_session` method has to', '    provide a dictionary like interface plus the properties and methods', '    from the :class:`SessionMixin`.  We recommend just subclassing a dict', '    and adding that mixin::', '', '        class Session(dict, SessionMixin):', '            pass', '', '    If :meth:`open_session` returns ``None`` Flask will call into', '    :meth:`make_null_session` to create a session that acts as replacement', '    if the session support cannot work because some requirement is not', '    fulfilled.  The default :class:`NullSession` class that is created', '    will complain that the secret key was not set.', '', '    To replace the session interface on an application all you have to do', '    is to assign :attr:`flask.Flask.session_interface`::', '', '        app = Flask(__name__)', '        app.session_interface = MySessionInterface()', '', '    Multiple requests with the same session may be sent and handled', '    concurrently. When implementing a new session interface, consider', '    whether reads or writes to the backing store must be synchronized.', '    There is no guarantee on the order in which the session for each', '    request is opened or saved, it will occur in the order that requests', '    begin and end processing.', '', '    .. versionadded:: 0.8', '    \"\"\"', '', '    #: :meth:`make_null_session` will look here for the class that should', '    #: be created when a null session is requested.  Likewise the', '    #: :meth:`is_null_session` method will perform a typecheck against', '    #: this type.', '    null_session_class = NullSession', '', '    #: A flag that indicates if the session interface is pickle based.', '    #: This can be used by Flask extensions to make a decision in regards', '    #: to how to deal with the session object.', '    #:', '    #: .. versionadded:: 0.10', '    pickle_based = False', '', '    def make_null_session(self, app: \"Flask\") -> NullSession:', '        \"\"\"Creates a null session which acts as a replacement object if the', '        real session support could not be loaded due to a configuration', '        error.  This mainly aids the user experience because the job of the', '        null session is to still support lookup without complaining but', '        modifications are answered with a helpful error message of what', '        failed.', '', '        This creates an instance of :attr:`null_session_class` by default.', '        \"\"\"', '        return self.null_session_class()', '', '    def is_null_session(self, obj: object) -> bool:', '        \"\"\"Checks if a given object is a null session.  Null sessions are', '        not asked to be saved.', '', '        This checks if the object is an instance of :attr:`null_session_class`', '        by default.', '        \"\"\"', '        return isinstance(obj, self.null_session_class)', '', '    def get_cookie_name(self, app: \"Flask\") -> str:', '        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"', '        return app.config[\"SESSION_COOKIE_NAME\"]', '', '    def get_cookie_domain(self, app: \"Flask\") -> t.Optional[str]:', '        \"\"\"Returns the domain that should be set for the session cookie.', '', '        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise', '        falls back to detecting the domain based on ``SERVER_NAME``.', '', '        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is', '        updated to avoid re-running the logic.', '        \"\"\"', '', '        rv = app.config[\"SESSION_COOKIE_DOMAIN\"]', '', '        # set explicitly, or cached from SERVER_NAME detection', '        # if False, return None', '        if rv is not None:', '            return rv if rv else None', '', '        rv = app.config[\"SERVER_NAME\"]', '', '        # server name not set, cache False to return none next time', '        if not rv:', '            app.config[\"SESSION_COOKIE_DOMAIN\"] = False', '            return None', '', '        # chop off the port which is usually not supported by browsers', \"        # remove any leading '.' since we'll add that later\", '        rv = rv.rsplit(\":\", 1)[0].lstrip(\".\")', '', '        if \".\" not in rv:', \"            # Chrome doesn't allow names without a '.'. This should only\", '            # come up with localhost. Hack around this by not setting', '            # the name, and show a warning.', '            warnings.warn(', '                f\"{rv!r} is not a valid cookie domain, it must contain\"', '                \" a \\'.\\'. Add an entry to your hosts file, for example\"', '                f\" \\'{rv}.localdomain\\', and use that instead.\"', '            )', '            app.config[\"SESSION_COOKIE_DOMAIN\"] = False', '            return None', '', '        ip = is_ip(rv)', '', '        if ip:', '            warnings.warn(', '                \"The session cookie domain is an IP address. This may not work\"', '                \" as intended in some browsers. Add an entry to your hosts\"', '                \\' file, for example \"localhost.localdomain\", and use that\\'', '                \" instead.\"', '            )', '', '        # if this is not an ip and app is mounted at the root, allow subdomain', \"        # matching by adding a '.' prefix\", '        if self.get_cookie_path(app) == \"/\" and not ip:', '            rv = f\".{rv}\"', '', '        app.config[\"SESSION_COOKIE_DOMAIN\"] = rv', '        return rv', '', '    def get_cookie_path(self, app: \"Flask\") -> str:', '        \"\"\"Returns the path for which the cookie should be valid.  The', '        default implementation uses the value from the ``SESSION_COOKIE_PATH``', \"        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\", \"        uses ``/`` if it's ``None``.\", '        \"\"\"', '        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]', '', '    def get_cookie_httponly(self, app: \"Flask\") -> bool:', '        \"\"\"Returns True if the session cookie should be httponly.  This', '        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``', '        config var.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_HTTPONLY\"]', '', '    def get_cookie_secure(self, app: \"Flask\") -> bool:', '        \"\"\"Returns True if the cookie should be secure.  This currently', '        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_SECURE\"]', '', '    def get_cookie_samesite(self, app: \"Flask\") -> str:', '        \"\"\"Return ``\\'Strict\\'`` or ``\\'Lax\\'`` if the cookie should use the', '        ``SameSite`` attribute. This currently just returns the value of', '        the :data:`SESSION_COOKIE_SAMESITE` setting.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_SAMESITE\"]', '', '    def get_expiration_time(', '        self, app: \"Flask\", session: SessionMixin', '    ) -> t.Optional[datetime]:', '        \"\"\"A helper method that returns an expiration date for the session', '        or ``None`` if the session is linked to the browser session.  The', '        default implementation returns now + the permanent session', '        lifetime configured on the application.', '        \"\"\"', '        if session.permanent:', '            return datetime.now(timezone.utc) + app.permanent_session_lifetime', '        return None', '', '    def should_set_cookie(self, app: \"Flask\", session: SessionMixin) -> bool:', '        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header', '        should be set for this session cookie for this response. If the session', '        has been modified, the cookie is set. If the session is permanent and', '        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is', '        always set.', '', '        This check is usually skipped if the session was deleted.', '', '        .. versionadded:: 0.11', '        \"\"\"', '', '        return session.modified or (', '            session.permanent and app.config[\"SESSION_REFRESH_EACH_REQUEST\"]', '        )', '', '    def open_session(', '        self, app: \"Flask\", request: \"Request\"', '    ) -> t.Optional[SessionMixin]:', '        \"\"\"This is called at the beginning of each request, after', '        pushing the request context, before matching the URL.', '', '        This must return an object which implements a dictionary-like', '        interface as well as the :class:`SessionMixin` interface.', '', '        This will return ``None`` to indicate that loading failed in', '        some way that is not immediately an error. The request', '        context will fall back to using :meth:`make_null_session`', '        in this case.', '        \"\"\"', '        raise NotImplementedError()', '', '    def save_session(', '        self, app: \"Flask\", session: SessionMixin, response: \"Response\"', '    ) -> None:', '        \"\"\"This is called at the end of each request, after generating', '        a response, before removing the request context. It is skipped', '        if :meth:`is_null_session` returns ``True``.', '        \"\"\"', '        raise NotImplementedError()'], 'methods': [{'name': 'make_null_session', 'start_line': 158, 'end_line': 168, 'text': ['    def make_null_session(self, app: \"Flask\") -> NullSession:', '        \"\"\"Creates a null session which acts as a replacement object if the', '        real session support could not be loaded due to a configuration', '        error.  This mainly aids the user experience because the job of the', '        null session is to still support lookup without complaining but', '        modifications are answered with a helpful error message of what', '        failed.', '', '        This creates an instance of :attr:`null_session_class` by default.', '        \"\"\"', '        return self.null_session_class()']}, {'name': 'is_null_session', 'start_line': 170, 'end_line': 177, 'text': ['    def is_null_session(self, obj: object) -> bool:', '        \"\"\"Checks if a given object is a null session.  Null sessions are', '        not asked to be saved.', '', '        This checks if the object is an instance of :attr:`null_session_class`', '        by default.', '        \"\"\"', '        return isinstance(obj, self.null_session_class)']}, {'name': 'get_cookie_name', 'start_line': 179, 'end_line': 181, 'text': ['    def get_cookie_name(self, app: \"Flask\") -> str:', '        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"', '        return app.config[\"SESSION_COOKIE_NAME\"]']}, {'name': 'get_cookie_domain', 'start_line': 183, 'end_line': 239, 'text': ['    def get_cookie_domain(self, app: \"Flask\") -> t.Optional[str]:', '        \"\"\"Returns the domain that should be set for the session cookie.', '', '        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise', '        falls back to detecting the domain based on ``SERVER_NAME``.', '', '        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is', '        updated to avoid re-running the logic.', '        \"\"\"', '', '        rv = app.config[\"SESSION_COOKIE_DOMAIN\"]', '', '        # set explicitly, or cached from SERVER_NAME detection', '        # if False, return None', '        if rv is not None:', '            return rv if rv else None', '', '        rv = app.config[\"SERVER_NAME\"]', '', '        # server name not set, cache False to return none next time', '        if not rv:', '            app.config[\"SESSION_COOKIE_DOMAIN\"] = False', '            return None', '', '        # chop off the port which is usually not supported by browsers', \"        # remove any leading '.' since we'll add that later\", '        rv = rv.rsplit(\":\", 1)[0].lstrip(\".\")', '', '        if \".\" not in rv:', \"            # Chrome doesn't allow names without a '.'. This should only\", '            # come up with localhost. Hack around this by not setting', '            # the name, and show a warning.', '            warnings.warn(', '                f\"{rv!r} is not a valid cookie domain, it must contain\"', '                \" a \\'.\\'. Add an entry to your hosts file, for example\"', '                f\" \\'{rv}.localdomain\\', and use that instead.\"', '            )', '            app.config[\"SESSION_COOKIE_DOMAIN\"] = False', '            return None', '', '        ip = is_ip(rv)', '', '        if ip:', '            warnings.warn(', '                \"The session cookie domain is an IP address. This may not work\"', '                \" as intended in some browsers. Add an entry to your hosts\"', '                \\' file, for example \"localhost.localdomain\", and use that\\'', '                \" instead.\"', '            )', '', '        # if this is not an ip and app is mounted at the root, allow subdomain', \"        # matching by adding a '.' prefix\", '        if self.get_cookie_path(app) == \"/\" and not ip:', '            rv = f\".{rv}\"', '', '        app.config[\"SESSION_COOKIE_DOMAIN\"] = rv', '        return rv']}, {'name': 'get_cookie_path', 'start_line': 241, 'end_line': 247, 'text': ['    def get_cookie_path(self, app: \"Flask\") -> str:', '        \"\"\"Returns the path for which the cookie should be valid.  The', '        default implementation uses the value from the ``SESSION_COOKIE_PATH``', \"        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\", \"        uses ``/`` if it's ``None``.\", '        \"\"\"', '        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]']}, {'name': 'get_cookie_httponly', 'start_line': 249, 'end_line': 254, 'text': ['    def get_cookie_httponly(self, app: \"Flask\") -> bool:', '        \"\"\"Returns True if the session cookie should be httponly.  This', '        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``', '        config var.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_HTTPONLY\"]']}, {'name': 'get_cookie_secure', 'start_line': 256, 'end_line': 260, 'text': ['    def get_cookie_secure(self, app: \"Flask\") -> bool:', '        \"\"\"Returns True if the cookie should be secure.  This currently', '        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_SECURE\"]']}, {'name': 'get_cookie_samesite', 'start_line': 262, 'end_line': 267, 'text': ['    def get_cookie_samesite(self, app: \"Flask\") -> str:', '        \"\"\"Return ``\\'Strict\\'`` or ``\\'Lax\\'`` if the cookie should use the', '        ``SameSite`` attribute. This currently just returns the value of', '        the :data:`SESSION_COOKIE_SAMESITE` setting.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_SAMESITE\"]']}, {'name': 'get_expiration_time', 'start_line': 269, 'end_line': 279, 'text': ['    def get_expiration_time(', '        self, app: \"Flask\", session: SessionMixin', '    ) -> t.Optional[datetime]:', '        \"\"\"A helper method that returns an expiration date for the session', '        or ``None`` if the session is linked to the browser session.  The', '        default implementation returns now + the permanent session', '        lifetime configured on the application.', '        \"\"\"', '        if session.permanent:', '            return datetime.now(timezone.utc) + app.permanent_session_lifetime', '        return None']}, {'name': 'should_set_cookie', 'start_line': 281, 'end_line': 295, 'text': ['    def should_set_cookie(self, app: \"Flask\", session: SessionMixin) -> bool:', '        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header', '        should be set for this session cookie for this response. If the session', '        has been modified, the cookie is set. If the session is permanent and', '        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is', '        always set.', '', '        This check is usually skipped if the session was deleted.', '', '        .. versionadded:: 0.11', '        \"\"\"', '', '        return session.modified or (', '            session.permanent and app.config[\"SESSION_REFRESH_EACH_REQUEST\"]', '        )']}, {'name': 'open_session', 'start_line': 297, 'end_line': 311, 'text': ['    def open_session(', '        self, app: \"Flask\", request: \"Request\"', '    ) -> t.Optional[SessionMixin]:', '        \"\"\"This is called at the beginning of each request, after', '        pushing the request context, before matching the URL.', '', '        This must return an object which implements a dictionary-like', '        interface as well as the :class:`SessionMixin` interface.', '', '        This will return ``None`` to indicate that loading failed in', '        some way that is not immediately an error. The request', '        context will fall back to using :meth:`make_null_session`', '        in this case.', '        \"\"\"', '        raise NotImplementedError()']}, {'name': 'save_session', 'start_line': 313, 'end_line': 320, 'text': ['    def save_session(', '        self, app: \"Flask\", session: SessionMixin, response: \"Response\"', '    ) -> None:', '        \"\"\"This is called at the end of each request, after generating', '        a response, before removing the request context. It is skipped', '        if :meth:`is_null_session` returns ``True``.', '        \"\"\"', '        raise NotImplementedError()']}]}, {'name': 'SecureCookieSessionInterface', 'start_line': 326, 'end_line': 419, 'text': ['class SecureCookieSessionInterface(SessionInterface):', '    \"\"\"The default session interface that stores sessions in signed cookies', '    through the :mod:`itsdangerous` module.', '    \"\"\"', '', '    #: the salt that should be applied on top of the secret key for the', '    #: signing of cookie based sessions.', '    salt = \"cookie-session\"', '    #: the hash function to use for the signature.  The default is sha1', '    digest_method = staticmethod(hashlib.sha1)', '    #: the name of the itsdangerous supported key derivation.  The default', '    #: is hmac.', '    key_derivation = \"hmac\"', '    #: A python serializer for the payload.  The default is a compact', '    #: JSON derived serializer with support for some extra Python types', '    #: such as datetime objects or tuples.', '    serializer = session_json_serializer', '    session_class = SecureCookieSession', '', '    def get_signing_serializer(', '        self, app: \"Flask\"', '    ) -> t.Optional[URLSafeTimedSerializer]:', '        if not app.secret_key:', '            return None', '        signer_kwargs = dict(', '            key_derivation=self.key_derivation, digest_method=self.digest_method', '        )', '        return URLSafeTimedSerializer(', '            app.secret_key,', '            salt=self.salt,', '            serializer=self.serializer,', '            signer_kwargs=signer_kwargs,', '        )', '', '    def open_session(', '        self, app: \"Flask\", request: \"Request\"', '    ) -> t.Optional[SecureCookieSession]:', '        s = self.get_signing_serializer(app)', '        if s is None:', '            return None', '        val = request.cookies.get(self.get_cookie_name(app))', '        if not val:', '            return self.session_class()', '        max_age = int(app.permanent_session_lifetime.total_seconds())', '        try:', '            data = s.loads(val, max_age=max_age)', '            return self.session_class(data)', '        except BadSignature:', '            return self.session_class()', '', '    def save_session(', '        self, app: \"Flask\", session: SessionMixin, response: \"Response\"', '    ) -> None:', '        name = self.get_cookie_name(app)', '        domain = self.get_cookie_domain(app)', '        path = self.get_cookie_path(app)', '        secure = self.get_cookie_secure(app)', '        samesite = self.get_cookie_samesite(app)', '        httponly = self.get_cookie_httponly(app)', '', '        # If the session is modified to be empty, remove the cookie.', '        # If the session is empty, return without setting the cookie.', '        if not session:', '            if session.modified:', '                response.delete_cookie(', '                    name,', '                    domain=domain,', '                    path=path,', '                    secure=secure,', '                    samesite=samesite,', '                    httponly=httponly,', '                )', '', '            return', '', '        # Add a \"Vary: Cookie\" header if the session was accessed at all.', '        if session.accessed:', '            response.vary.add(\"Cookie\")', '', '        if not self.should_set_cookie(app, session):', '            return', '', '        expires = self.get_expiration_time(app, session)', '        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore', '        response.set_cookie(', '            name,', '            val,  # type: ignore', '            expires=expires,', '            httponly=httponly,', '            domain=domain,', '            path=path,', '            secure=secure,', '            samesite=samesite,', '        )'], 'methods': [{'name': 'get_signing_serializer', 'start_line': 345, 'end_line': 358, 'text': ['    def get_signing_serializer(', '        self, app: \"Flask\"', '    ) -> t.Optional[URLSafeTimedSerializer]:', '        if not app.secret_key:', '            return None', '        signer_kwargs = dict(', '            key_derivation=self.key_derivation, digest_method=self.digest_method', '        )', '        return URLSafeTimedSerializer(', '            app.secret_key,', '            salt=self.salt,', '            serializer=self.serializer,', '            signer_kwargs=signer_kwargs,', '        )']}, {'name': 'open_session', 'start_line': 360, 'end_line': 374, 'text': ['    def open_session(', '        self, app: \"Flask\", request: \"Request\"', '    ) -> t.Optional[SecureCookieSession]:', '        s = self.get_signing_serializer(app)', '        if s is None:', '            return None', '        val = request.cookies.get(self.get_cookie_name(app))', '        if not val:', '            return self.session_class()', '        max_age = int(app.permanent_session_lifetime.total_seconds())', '        try:', '            data = s.loads(val, max_age=max_age)', '            return self.session_class(data)', '        except BadSignature:', '            return self.session_class()']}, {'name': 'save_session', 'start_line': 376, 'end_line': 419, 'text': ['    def save_session(', '        self, app: \"Flask\", session: SessionMixin, response: \"Response\"', '    ) -> None:', '        name = self.get_cookie_name(app)', '        domain = self.get_cookie_domain(app)', '        path = self.get_cookie_path(app)', '        secure = self.get_cookie_secure(app)', '        samesite = self.get_cookie_samesite(app)', '        httponly = self.get_cookie_httponly(app)', '', '        # If the session is modified to be empty, remove the cookie.', '        # If the session is empty, return without setting the cookie.', '        if not session:', '            if session.modified:', '                response.delete_cookie(', '                    name,', '                    domain=domain,', '                    path=path,', '                    secure=secure,', '                    samesite=samesite,', '                    httponly=httponly,', '                )', '', '            return', '', '        # Add a \"Vary: Cookie\" header if the session was accessed at all.', '        if session.accessed:', '            response.vary.add(\"Cookie\")', '', '        if not self.should_set_cookie(app, session):', '            return', '', '        expires = self.get_expiration_time(app, session)', '        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore', '        response.set_cookie(', '            name,', '            val,  # type: ignore', '            expires=expires,', '            httponly=httponly,', '            domain=domain,', '            path=path,', '            secure=secure,', '            samesite=samesite,', '        )']}]}], 'functions': [{'name': 'on_update', 'start_line': 72, 'end_line': 74, 'text': ['        def on_update(self) -> None:', '            self.modified = True', '            self.accessed = True']}], 'text': ['import hashlib', 'import typing as t', 'import warnings', 'from collections.abc import MutableMapping', 'from datetime import datetime', 'from datetime import timezone', '', 'from itsdangerous import BadSignature', 'from itsdangerous import URLSafeTimedSerializer', 'from werkzeug.datastructures import CallbackDict', '', 'from .helpers import is_ip', 'from .json.tag import TaggedJSONSerializer', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    import typing_extensions as te', '    from .app import Flask', '    from .wrappers import Request, Response', '', '', 'class SessionMixin(MutableMapping):', '    \"\"\"Expands a basic dictionary with session attributes.\"\"\"', '', '    @property', '    def permanent(self) -> bool:', '        \"\"\"This reflects the ``\\'_permanent\\'`` key in the dict.\"\"\"', '        return self.get(\"_permanent\", False)', '', '    @permanent.setter', '    def permanent(self, value: bool) -> None:', '        self[\"_permanent\"] = bool(value)', '', '    #: Some implementations can detect whether a session is newly', '    #: created, but that is not guaranteed. Use with caution. The mixin', '    # default is hard-coded ``False``.', '    new = False', '', '    #: Some implementations can detect changes to the session and set', '    #: this when that happens. The mixin default is hard coded to', '    #: ``True``.', '    modified = True', '', '    #: Some implementations can detect when session data is read or', '    #: written and set this when that happens. The mixin default is hard', '    #: coded to ``True``.', '    accessed = True', '', '', 'class SecureCookieSession(CallbackDict, SessionMixin):', '    \"\"\"Base class for sessions based on signed cookies.', '', '    This session backend will set the :attr:`modified` and', '    :attr:`accessed` attributes. It cannot reliably track whether a', '    session is new (vs. empty), so :attr:`new` remains hard coded to', '    ``False``.', '    \"\"\"', '', '    #: When data is changed, this is set to ``True``. Only the session', '    #: dictionary itself is tracked; if the session contains mutable', '    #: data (for example a nested dict) then this must be set to', '    #: ``True`` manually when modifying that data. The session cookie', '    #: will only be written to the response if this is ``True``.', '    modified = False', '', '    #: When data is read or written, this is set to ``True``. Used by', '    # :class:`.SecureCookieSessionInterface` to add a ``Vary: Cookie``', '    #: header, which allows caching proxies to cache different pages for', '    #: different users.', '    accessed = False', '', '    def __init__(self, initial: t.Any = None) -> None:', '        def on_update(self) -> None:', '            self.modified = True', '            self.accessed = True', '', '        super().__init__(initial, on_update)', '', '    def __getitem__(self, key: str) -> t.Any:', '        self.accessed = True', '        return super().__getitem__(key)', '', '    def get(self, key: str, default: t.Any = None) -> t.Any:', '        self.accessed = True', '        return super().get(key, default)', '', '    def setdefault(self, key: str, default: t.Any = None) -> t.Any:', '        self.accessed = True', '        return super().setdefault(key, default)', '', '', 'class NullSession(SecureCookieSession):', '    \"\"\"Class used to generate nicer error messages if sessions are not', '    available.  Will still allow read-only access to the empty session', '    but fail on setting.', '    \"\"\"', '', '    def _fail(self, *args: t.Any, **kwargs: t.Any) -> \"te.NoReturn\":', '        raise RuntimeError(', '            \"The session is unavailable because no secret \"', '            \"key was set.  Set the secret_key on the \"', '            \"application to something unique and secret.\"', '        )', '', '    __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail  # type: ignore # noqa: B950', '    del _fail', '', '', 'class SessionInterface:', '    \"\"\"The basic interface you have to implement in order to replace the', \"    default session interface which uses werkzeug's securecookie\", '    implementation.  The only methods you have to implement are', '    :meth:`open_session` and :meth:`save_session`, the others have', \"    useful defaults which you don't need to change.\", '', '    The session object returned by the :meth:`open_session` method has to', '    provide a dictionary like interface plus the properties and methods', '    from the :class:`SessionMixin`.  We recommend just subclassing a dict', '    and adding that mixin::', '', '        class Session(dict, SessionMixin):', '            pass', '', '    If :meth:`open_session` returns ``None`` Flask will call into', '    :meth:`make_null_session` to create a session that acts as replacement', '    if the session support cannot work because some requirement is not', '    fulfilled.  The default :class:`NullSession` class that is created', '    will complain that the secret key was not set.', '', '    To replace the session interface on an application all you have to do', '    is to assign :attr:`flask.Flask.session_interface`::', '', '        app = Flask(__name__)', '        app.session_interface = MySessionInterface()', '', '    Multiple requests with the same session may be sent and handled', '    concurrently. When implementing a new session interface, consider', '    whether reads or writes to the backing store must be synchronized.', '    There is no guarantee on the order in which the session for each', '    request is opened or saved, it will occur in the order that requests', '    begin and end processing.', '', '    .. versionadded:: 0.8', '    \"\"\"', '', '    #: :meth:`make_null_session` will look here for the class that should', '    #: be created when a null session is requested.  Likewise the', '    #: :meth:`is_null_session` method will perform a typecheck against', '    #: this type.', '    null_session_class = NullSession', '', '    #: A flag that indicates if the session interface is pickle based.', '    #: This can be used by Flask extensions to make a decision in regards', '    #: to how to deal with the session object.', '    #:', '    #: .. versionadded:: 0.10', '    pickle_based = False', '', '    def make_null_session(self, app: \"Flask\") -> NullSession:', '        \"\"\"Creates a null session which acts as a replacement object if the', '        real session support could not be loaded due to a configuration', '        error.  This mainly aids the user experience because the job of the', '        null session is to still support lookup without complaining but', '        modifications are answered with a helpful error message of what', '        failed.', '', '        This creates an instance of :attr:`null_session_class` by default.', '        \"\"\"', '        return self.null_session_class()', '', '    def is_null_session(self, obj: object) -> bool:', '        \"\"\"Checks if a given object is a null session.  Null sessions are', '        not asked to be saved.', '', '        This checks if the object is an instance of :attr:`null_session_class`', '        by default.', '        \"\"\"', '        return isinstance(obj, self.null_session_class)', '', '    def get_cookie_name(self, app: \"Flask\") -> str:', '        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"', '        return app.config[\"SESSION_COOKIE_NAME\"]', '', '    def get_cookie_domain(self, app: \"Flask\") -> t.Optional[str]:', '        \"\"\"Returns the domain that should be set for the session cookie.', '', '        Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise', '        falls back to detecting the domain based on ``SERVER_NAME``.', '', '        Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is', '        updated to avoid re-running the logic.', '        \"\"\"', '', '        rv = app.config[\"SESSION_COOKIE_DOMAIN\"]', '', '        # set explicitly, or cached from SERVER_NAME detection', '        # if False, return None', '        if rv is not None:', '            return rv if rv else None', '', '        rv = app.config[\"SERVER_NAME\"]', '', '        # server name not set, cache False to return none next time', '        if not rv:', '            app.config[\"SESSION_COOKIE_DOMAIN\"] = False', '            return None', '', '        # chop off the port which is usually not supported by browsers', \"        # remove any leading '.' since we'll add that later\", '        rv = rv.rsplit(\":\", 1)[0].lstrip(\".\")', '', '        if \".\" not in rv:', \"            # Chrome doesn't allow names without a '.'. This should only\", '            # come up with localhost. Hack around this by not setting', '            # the name, and show a warning.', '            warnings.warn(', '                f\"{rv!r} is not a valid cookie domain, it must contain\"', '                \" a \\'.\\'. Add an entry to your hosts file, for example\"', '                f\" \\'{rv}.localdomain\\', and use that instead.\"', '            )', '            app.config[\"SESSION_COOKIE_DOMAIN\"] = False', '            return None', '', '        ip = is_ip(rv)', '', '        if ip:', '            warnings.warn(', '                \"The session cookie domain is an IP address. This may not work\"', '                \" as intended in some browsers. Add an entry to your hosts\"', '                \\' file, for example \"localhost.localdomain\", and use that\\'', '                \" instead.\"', '            )', '', '        # if this is not an ip and app is mounted at the root, allow subdomain', \"        # matching by adding a '.' prefix\", '        if self.get_cookie_path(app) == \"/\" and not ip:', '            rv = f\".{rv}\"', '', '        app.config[\"SESSION_COOKIE_DOMAIN\"] = rv', '        return rv', '', '    def get_cookie_path(self, app: \"Flask\") -> str:', '        \"\"\"Returns the path for which the cookie should be valid.  The', '        default implementation uses the value from the ``SESSION_COOKIE_PATH``', \"        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\", \"        uses ``/`` if it's ``None``.\", '        \"\"\"', '        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]', '', '    def get_cookie_httponly(self, app: \"Flask\") -> bool:', '        \"\"\"Returns True if the session cookie should be httponly.  This', '        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``', '        config var.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_HTTPONLY\"]', '', '    def get_cookie_secure(self, app: \"Flask\") -> bool:', '        \"\"\"Returns True if the cookie should be secure.  This currently', '        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_SECURE\"]', '', '    def get_cookie_samesite(self, app: \"Flask\") -> str:', '        \"\"\"Return ``\\'Strict\\'`` or ``\\'Lax\\'`` if the cookie should use the', '        ``SameSite`` attribute. This currently just returns the value of', '        the :data:`SESSION_COOKIE_SAMESITE` setting.', '        \"\"\"', '        return app.config[\"SESSION_COOKIE_SAMESITE\"]', '', '    def get_expiration_time(', '        self, app: \"Flask\", session: SessionMixin', '    ) -> t.Optional[datetime]:', '        \"\"\"A helper method that returns an expiration date for the session', '        or ``None`` if the session is linked to the browser session.  The', '        default implementation returns now + the permanent session', '        lifetime configured on the application.', '        \"\"\"', '        if session.permanent:', '            return datetime.now(timezone.utc) + app.permanent_session_lifetime', '        return None', '', '    def should_set_cookie(self, app: \"Flask\", session: SessionMixin) -> bool:', '        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header', '        should be set for this session cookie for this response. If the session', '        has been modified, the cookie is set. If the session is permanent and', '        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is', '        always set.', '', '        This check is usually skipped if the session was deleted.', '', '        .. versionadded:: 0.11', '        \"\"\"', '', '        return session.modified or (', '            session.permanent and app.config[\"SESSION_REFRESH_EACH_REQUEST\"]', '        )', '', '    def open_session(', '        self, app: \"Flask\", request: \"Request\"', '    ) -> t.Optional[SessionMixin]:', '        \"\"\"This is called at the beginning of each request, after', '        pushing the request context, before matching the URL.', '', '        This must return an object which implements a dictionary-like', '        interface as well as the :class:`SessionMixin` interface.', '', '        This will return ``None`` to indicate that loading failed in', '        some way that is not immediately an error. The request', '        context will fall back to using :meth:`make_null_session`', '        in this case.', '        \"\"\"', '        raise NotImplementedError()', '', '    def save_session(', '        self, app: \"Flask\", session: SessionMixin, response: \"Response\"', '    ) -> None:', '        \"\"\"This is called at the end of each request, after generating', '        a response, before removing the request context. It is skipped', '        if :meth:`is_null_session` returns ``True``.', '        \"\"\"', '        raise NotImplementedError()', '', '', 'session_json_serializer = TaggedJSONSerializer()', '', '', 'class SecureCookieSessionInterface(SessionInterface):', '    \"\"\"The default session interface that stores sessions in signed cookies', '    through the :mod:`itsdangerous` module.', '    \"\"\"', '', '    #: the salt that should be applied on top of the secret key for the', '    #: signing of cookie based sessions.', '    salt = \"cookie-session\"', '    #: the hash function to use for the signature.  The default is sha1', '    digest_method = staticmethod(hashlib.sha1)', '    #: the name of the itsdangerous supported key derivation.  The default', '    #: is hmac.', '    key_derivation = \"hmac\"', '    #: A python serializer for the payload.  The default is a compact', '    #: JSON derived serializer with support for some extra Python types', '    #: such as datetime objects or tuples.', '    serializer = session_json_serializer', '    session_class = SecureCookieSession', '', '    def get_signing_serializer(', '        self, app: \"Flask\"', '    ) -> t.Optional[URLSafeTimedSerializer]:', '        if not app.secret_key:', '            return None', '        signer_kwargs = dict(', '            key_derivation=self.key_derivation, digest_method=self.digest_method', '        )', '        return URLSafeTimedSerializer(', '            app.secret_key,', '            salt=self.salt,', '            serializer=self.serializer,', '            signer_kwargs=signer_kwargs,', '        )', '', '    def open_session(', '        self, app: \"Flask\", request: \"Request\"', '    ) -> t.Optional[SecureCookieSession]:', '        s = self.get_signing_serializer(app)', '        if s is None:', '            return None', '        val = request.cookies.get(self.get_cookie_name(app))', '        if not val:', '            return self.session_class()', '        max_age = int(app.permanent_session_lifetime.total_seconds())', '        try:', '            data = s.loads(val, max_age=max_age)', '            return self.session_class(data)', '        except BadSignature:', '            return self.session_class()', '', '    def save_session(', '        self, app: \"Flask\", session: SessionMixin, response: \"Response\"', '    ) -> None:', '        name = self.get_cookie_name(app)', '        domain = self.get_cookie_domain(app)', '        path = self.get_cookie_path(app)', '        secure = self.get_cookie_secure(app)', '        samesite = self.get_cookie_samesite(app)', '        httponly = self.get_cookie_httponly(app)', '', '        # If the session is modified to be empty, remove the cookie.', '        # If the session is empty, return without setting the cookie.', '        if not session:', '            if session.modified:', '                response.delete_cookie(', '                    name,', '                    domain=domain,', '                    path=path,', '                    secure=secure,', '                    samesite=samesite,', '                    httponly=httponly,', '                )', '', '            return', '', '        # Add a \"Vary: Cookie\" header if the session was accessed at all.', '        if session.accessed:', '            response.vary.add(\"Cookie\")', '', '        if not self.should_set_cookie(app, session):', '            return', '', '        expires = self.get_expiration_time(app, session)', '        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore', '        response.set_cookie(', '            name,', '            val,  # type: ignore', '            expires=expires,', '            httponly=httponly,', '            domain=domain,', '            path=path,', '            secure=secure,', '            samesite=samesite,', '        )']}, 'signals.py': {'classes': [{'name': 'Namespace', 'start_line': 10, 'end_line': 12, 'text': ['    class Namespace:  # type: ignore', '        def signal(self, name: str, doc: t.Optional[str] = None) -> \"_FakeSignal\":', '            return _FakeSignal(name, doc)'], 'methods': [{'name': 'signal', 'start_line': 11, 'end_line': 12, 'text': ['        def signal(self, name: str, doc: t.Optional[str] = None) -> \"_FakeSignal\":', '            return _FakeSignal(name, doc)']}]}, {'name': '_FakeSignal', 'start_line': 14, 'end_line': 37, 'text': ['    class _FakeSignal:', '        \"\"\"If blinker is unavailable, create a fake class with the same', '        interface that allows sending of signals but will fail with an', '        error on anything else.  Instead of doing anything on send, it', '        will just ignore the arguments and do nothing instead.', '        \"\"\"', '', '        def __init__(self, name: str, doc: t.Optional[str] = None) -> None:', '            self.name = name', '            self.__doc__ = doc', '', '        def send(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '            pass', '', '        def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '            raise RuntimeError(', '                \"Signalling support is unavailable because the blinker\"', '                \" library is not installed.\"', '            ) from None', '', '        connect = connect_via = connected_to = temporarily_connected_to = _fail', '        disconnect = _fail', '        has_receivers_for = receivers_for = _fail', '        del _fail'], 'methods': [{'name': '__init__', 'start_line': 21, 'end_line': 23, 'text': ['        def __init__(self, name: str, doc: t.Optional[str] = None) -> None:', '            self.name = name', '            self.__doc__ = doc']}, {'name': 'send', 'start_line': 25, 'end_line': 26, 'text': ['        def send(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '            pass']}, {'name': '_fail', 'start_line': 28, 'end_line': 32, 'text': ['        def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '            raise RuntimeError(', '                \"Signalling support is unavailable because the blinker\"', '                \" library is not installed.\"', '            ) from None']}]}], 'functions': [], 'text': ['import typing as t', '', 'try:', '    from blinker import Namespace', '', '    signals_available = True', 'except ImportError:', '    signals_available = False', '', '    class Namespace:  # type: ignore', '        def signal(self, name: str, doc: t.Optional[str] = None) -> \"_FakeSignal\":', '            return _FakeSignal(name, doc)', '', '    class _FakeSignal:', '        \"\"\"If blinker is unavailable, create a fake class with the same', '        interface that allows sending of signals but will fail with an', '        error on anything else.  Instead of doing anything on send, it', '        will just ignore the arguments and do nothing instead.', '        \"\"\"', '', '        def __init__(self, name: str, doc: t.Optional[str] = None) -> None:', '            self.name = name', '            self.__doc__ = doc', '', '        def send(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '            pass', '', '        def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '            raise RuntimeError(', '                \"Signalling support is unavailable because the blinker\"', '                \" library is not installed.\"', '            ) from None', '', '        connect = connect_via = connected_to = temporarily_connected_to = _fail', '        disconnect = _fail', '        has_receivers_for = receivers_for = _fail', '        del _fail', '', '', '# The namespace for code signals.  If you are not Flask code, do', '# not put signals in here.  Create your own namespace instead.', '_signals = Namespace()', '', '', '# Core signals.  For usage examples grep the source code or consult', '# the API documentation in docs/api.rst as well as docs/signals.rst', 'template_rendered = _signals.signal(\"template-rendered\")', 'before_render_template = _signals.signal(\"before-render-template\")', 'request_started = _signals.signal(\"request-started\")', 'request_finished = _signals.signal(\"request-finished\")', 'request_tearing_down = _signals.signal(\"request-tearing-down\")', 'got_request_exception = _signals.signal(\"got-request-exception\")', 'appcontext_tearing_down = _signals.signal(\"appcontext-tearing-down\")', 'appcontext_pushed = _signals.signal(\"appcontext-pushed\")', 'appcontext_popped = _signals.signal(\"appcontext-popped\")', 'message_flashed = _signals.signal(\"message-flashed\")']}, 'wrappers.py': {'classes': [{'name': 'Request', 'start_line': 15, 'end_line': 133, 'text': ['class Request(RequestBase):', '    \"\"\"The request object used by default in Flask.  Remembers the', '    matched endpoint and view arguments.', '', '    It is what ends up as :class:`~flask.request`.  If you want to replace', '    the request object used you can subclass this and set', '    :attr:`~flask.Flask.request_class` to your subclass.', '', '    The request object is a :class:`~werkzeug.wrappers.Request` subclass and', '    provides all of the attributes Werkzeug defines plus a few Flask', '    specific ones.', '    \"\"\"', '', '    json_module: t.Any = json', '', '    #: The internal URL rule that matched the request.  This can be', '    #: useful to inspect which methods are allowed for the URL from', '    #: a before/after handler (``request.url_rule.methods``) etc.', \"    #: Though if the request's method was invalid for the URL rule,\", '    #: the valid list is available in ``routing_exception.valid_methods``', '    #: instead (an attribute of the Werkzeug exception', '    #: :exc:`~werkzeug.exceptions.MethodNotAllowed`)', '    #: because the request was never internally bound.', '    #:', '    #: .. versionadded:: 0.6', '    url_rule: t.Optional[\"Rule\"] = None', '', '    #: A dict of view arguments that matched the request.  If an exception', '    #: happened when matching, this will be ``None``.', '    view_args: t.Optional[t.Dict[str, t.Any]] = None', '', '    #: If matching the URL failed, this is the exception that will be', '    #: raised / was raised as part of the request handling.  This is', '    #: usually a :exc:`~werkzeug.exceptions.NotFound` exception or', '    #: something similar.', '    routing_exception: t.Optional[Exception] = None', '', '    @property', '    def max_content_length(self) -> t.Optional[int]:  # type: ignore', '        \"\"\"Read-only view of the ``MAX_CONTENT_LENGTH`` config key.\"\"\"', '        if current_app:', '            return current_app.config[\"MAX_CONTENT_LENGTH\"]', '        else:', '            return None', '', '    @property', '    def endpoint(self) -> t.Optional[str]:', '        \"\"\"The endpoint that matched the request URL.', '', '        This will be ``None`` if matching failed or has not been', '        performed yet.', '', '        This in combination with :attr:`view_args` can be used to', '        reconstruct the same URL or a modified URL.', '        \"\"\"', '        if self.url_rule is not None:', '            return self.url_rule.endpoint', '', '        return None', '', '    @property', '    def blueprint(self) -> t.Optional[str]:', '        \"\"\"The registered name of the current blueprint.', '', '        This will be ``None`` if the endpoint is not part of a', '        blueprint, or if URL matching failed or has not been performed', '        yet.', '', '        This does not necessarily match the name the blueprint was', '        created with. It may have been nested, or registered with a', '        different name.', '        \"\"\"', '        endpoint = self.endpoint', '', '        if endpoint is not None and \".\" in endpoint:', '            return endpoint.rpartition(\".\")[0]', '', '        return None', '', '    @property', '    def blueprints(self) -> t.List[str]:', '        \"\"\"The registered names of the current blueprint upwards through', '        parent blueprints.', '', '        This will be an empty list if there is no current blueprint, or', '        if URL matching failed.', '', '        .. versionadded:: 2.0.1', '        \"\"\"', '        name = self.blueprint', '', '        if name is None:', '            return []', '', '        return _split_blueprint_path(name)', '', '    def _load_form_data(self) -> None:', '        super()._load_form_data()', '', \"        # In debug mode we're replacing the files multidict with an ad-hoc\", '        # subclass that raises a different error for key errors.', '        if (', '            current_app', '            and current_app.debug', '            and self.mimetype != \"multipart/form-data\"', '            and not self.files', '        ):', '            from .debughelpers import attach_enctype_error_multidict', '', '            attach_enctype_error_multidict(self)', '', '    def on_json_loading_failed(self, e: t.Optional[ValueError]) -> t.Any:', '        try:', '            return super().on_json_loading_failed(e)', '        except BadRequest as e:', '            if current_app and current_app.debug:', '                raise', '', '            raise BadRequest() from e'], 'methods': [{'name': 'max_content_length', 'start_line': 53, 'end_line': 58, 'text': ['    def max_content_length(self) -> t.Optional[int]:  # type: ignore', '        \"\"\"Read-only view of the ``MAX_CONTENT_LENGTH`` config key.\"\"\"', '        if current_app:', '            return current_app.config[\"MAX_CONTENT_LENGTH\"]', '        else:', '            return None']}, {'name': 'endpoint', 'start_line': 61, 'end_line': 73, 'text': ['    def endpoint(self) -> t.Optional[str]:', '        \"\"\"The endpoint that matched the request URL.', '', '        This will be ``None`` if matching failed or has not been', '        performed yet.', '', '        This in combination with :attr:`view_args` can be used to', '        reconstruct the same URL or a modified URL.', '        \"\"\"', '        if self.url_rule is not None:', '            return self.url_rule.endpoint', '', '        return None']}, {'name': 'blueprint', 'start_line': 76, 'end_line': 92, 'text': ['    def blueprint(self) -> t.Optional[str]:', '        \"\"\"The registered name of the current blueprint.', '', '        This will be ``None`` if the endpoint is not part of a', '        blueprint, or if URL matching failed or has not been performed', '        yet.', '', '        This does not necessarily match the name the blueprint was', '        created with. It may have been nested, or registered with a', '        different name.', '        \"\"\"', '        endpoint = self.endpoint', '', '        if endpoint is not None and \".\" in endpoint:', '            return endpoint.rpartition(\".\")[0]', '', '        return None']}, {'name': 'blueprints', 'start_line': 95, 'end_line': 109, 'text': ['    def blueprints(self) -> t.List[str]:', '        \"\"\"The registered names of the current blueprint upwards through', '        parent blueprints.', '', '        This will be an empty list if there is no current blueprint, or', '        if URL matching failed.', '', '        .. versionadded:: 2.0.1', '        \"\"\"', '        name = self.blueprint', '', '        if name is None:', '            return []', '', '        return _split_blueprint_path(name)']}, {'name': '_load_form_data', 'start_line': 111, 'end_line': 124, 'text': ['    def _load_form_data(self) -> None:', '        super()._load_form_data()', '', \"        # In debug mode we're replacing the files multidict with an ad-hoc\", '        # subclass that raises a different error for key errors.', '        if (', '            current_app', '            and current_app.debug', '            and self.mimetype != \"multipart/form-data\"', '            and not self.files', '        ):', '            from .debughelpers import attach_enctype_error_multidict', '', '            attach_enctype_error_multidict(self)']}, {'name': 'on_json_loading_failed', 'start_line': 126, 'end_line': 133, 'text': ['    def on_json_loading_failed(self, e: t.Optional[ValueError]) -> t.Any:', '        try:', '            return super().on_json_loading_failed(e)', '        except BadRequest as e:', '            if current_app and current_app.debug:', '                raise', '', '            raise BadRequest() from e']}]}, {'name': 'Response', 'start_line': 136, 'end_line': 171, 'text': ['class Response(ResponseBase):', '    \"\"\"The response object that is used by default in Flask.  Works like the', '    response object from Werkzeug but is set to have an HTML mimetype by', \"    default.  Quite often you don't have to create this object yourself because\", '    :meth:`~flask.Flask.make_response` will take care of that for you.', '', '    If you want to replace the response object used you can subclass this and', '    set :attr:`~flask.Flask.response_class` to your subclass.', '', '    .. versionchanged:: 1.0', '        JSON support is added to the response, like the request. This is useful', '        when testing to get the test client response data as JSON.', '', '    .. versionchanged:: 1.0', '', '        Added :attr:`max_cookie_size`.', '    \"\"\"', '', '    default_mimetype = \"text/html\"', '', '    json_module = json', '', '    autocorrect_location_header = False', '', '    @property', '    def max_cookie_size(self) -> int:  # type: ignore', '        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.', '', '        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in', \"        Werkzeug's docs.\", '        \"\"\"', '        if current_app:', '            return current_app.config[\"MAX_COOKIE_SIZE\"]', '', \"        # return Werkzeug's default when not in an app context\", '        return super().max_cookie_size'], 'methods': [{'name': 'max_cookie_size', 'start_line': 161, 'end_line': 171, 'text': ['    def max_cookie_size(self) -> int:  # type: ignore', '        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.', '', '        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in', \"        Werkzeug's docs.\", '        \"\"\"', '        if current_app:', '            return current_app.config[\"MAX_COOKIE_SIZE\"]', '', \"        # return Werkzeug's default when not in an app context\", '        return super().max_cookie_size']}]}], 'functions': [], 'text': ['import typing as t', '', 'from werkzeug.exceptions import BadRequest', 'from werkzeug.wrappers import Request as RequestBase', 'from werkzeug.wrappers import Response as ResponseBase', '', 'from . import json', 'from .globals import current_app', 'from .helpers import _split_blueprint_path', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from werkzeug.routing import Rule', '', '', 'class Request(RequestBase):', '    \"\"\"The request object used by default in Flask.  Remembers the', '    matched endpoint and view arguments.', '', '    It is what ends up as :class:`~flask.request`.  If you want to replace', '    the request object used you can subclass this and set', '    :attr:`~flask.Flask.request_class` to your subclass.', '', '    The request object is a :class:`~werkzeug.wrappers.Request` subclass and', '    provides all of the attributes Werkzeug defines plus a few Flask', '    specific ones.', '    \"\"\"', '', '    json_module: t.Any = json', '', '    #: The internal URL rule that matched the request.  This can be', '    #: useful to inspect which methods are allowed for the URL from', '    #: a before/after handler (``request.url_rule.methods``) etc.', \"    #: Though if the request's method was invalid for the URL rule,\", '    #: the valid list is available in ``routing_exception.valid_methods``', '    #: instead (an attribute of the Werkzeug exception', '    #: :exc:`~werkzeug.exceptions.MethodNotAllowed`)', '    #: because the request was never internally bound.', '    #:', '    #: .. versionadded:: 0.6', '    url_rule: t.Optional[\"Rule\"] = None', '', '    #: A dict of view arguments that matched the request.  If an exception', '    #: happened when matching, this will be ``None``.', '    view_args: t.Optional[t.Dict[str, t.Any]] = None', '', '    #: If matching the URL failed, this is the exception that will be', '    #: raised / was raised as part of the request handling.  This is', '    #: usually a :exc:`~werkzeug.exceptions.NotFound` exception or', '    #: something similar.', '    routing_exception: t.Optional[Exception] = None', '', '    @property', '    def max_content_length(self) -> t.Optional[int]:  # type: ignore', '        \"\"\"Read-only view of the ``MAX_CONTENT_LENGTH`` config key.\"\"\"', '        if current_app:', '            return current_app.config[\"MAX_CONTENT_LENGTH\"]', '        else:', '            return None', '', '    @property', '    def endpoint(self) -> t.Optional[str]:', '        \"\"\"The endpoint that matched the request URL.', '', '        This will be ``None`` if matching failed or has not been', '        performed yet.', '', '        This in combination with :attr:`view_args` can be used to', '        reconstruct the same URL or a modified URL.', '        \"\"\"', '        if self.url_rule is not None:', '            return self.url_rule.endpoint', '', '        return None', '', '    @property', '    def blueprint(self) -> t.Optional[str]:', '        \"\"\"The registered name of the current blueprint.', '', '        This will be ``None`` if the endpoint is not part of a', '        blueprint, or if URL matching failed or has not been performed', '        yet.', '', '        This does not necessarily match the name the blueprint was', '        created with. It may have been nested, or registered with a', '        different name.', '        \"\"\"', '        endpoint = self.endpoint', '', '        if endpoint is not None and \".\" in endpoint:', '            return endpoint.rpartition(\".\")[0]', '', '        return None', '', '    @property', '    def blueprints(self) -> t.List[str]:', '        \"\"\"The registered names of the current blueprint upwards through', '        parent blueprints.', '', '        This will be an empty list if there is no current blueprint, or', '        if URL matching failed.', '', '        .. versionadded:: 2.0.1', '        \"\"\"', '        name = self.blueprint', '', '        if name is None:', '            return []', '', '        return _split_blueprint_path(name)', '', '    def _load_form_data(self) -> None:', '        super()._load_form_data()', '', \"        # In debug mode we're replacing the files multidict with an ad-hoc\", '        # subclass that raises a different error for key errors.', '        if (', '            current_app', '            and current_app.debug', '            and self.mimetype != \"multipart/form-data\"', '            and not self.files', '        ):', '            from .debughelpers import attach_enctype_error_multidict', '', '            attach_enctype_error_multidict(self)', '', '    def on_json_loading_failed(self, e: t.Optional[ValueError]) -> t.Any:', '        try:', '            return super().on_json_loading_failed(e)', '        except BadRequest as e:', '            if current_app and current_app.debug:', '                raise', '', '            raise BadRequest() from e', '', '', 'class Response(ResponseBase):', '    \"\"\"The response object that is used by default in Flask.  Works like the', '    response object from Werkzeug but is set to have an HTML mimetype by', \"    default.  Quite often you don't have to create this object yourself because\", '    :meth:`~flask.Flask.make_response` will take care of that for you.', '', '    If you want to replace the response object used you can subclass this and', '    set :attr:`~flask.Flask.response_class` to your subclass.', '', '    .. versionchanged:: 1.0', '        JSON support is added to the response, like the request. This is useful', '        when testing to get the test client response data as JSON.', '', '    .. versionchanged:: 1.0', '', '        Added :attr:`max_cookie_size`.', '    \"\"\"', '', '    default_mimetype = \"text/html\"', '', '    json_module = json', '', '    autocorrect_location_header = False', '', '    @property', '    def max_cookie_size(self) -> int:  # type: ignore', '        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.', '', '        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in', \"        Werkzeug's docs.\", '        \"\"\"', '        if current_app:', '            return current_app.config[\"MAX_COOKIE_SIZE\"]', '', \"        # return Werkzeug's default when not in an app context\", '        return super().max_cookie_size']}, 'blueprints.py': {'classes': [{'name': 'BlueprintSetupState', 'start_line': 32, 'end_line': 114, 'text': ['class BlueprintSetupState:', '    \"\"\"Temporary holder object for registering a blueprint with the', '    application.  An instance of this class is created by the', '    :meth:`~flask.Blueprint.make_setup_state` method and later passed', '    to all register callback functions.', '    \"\"\"', '', '    def __init__(', '        self,', '        blueprint: \"Blueprint\",', '        app: \"Flask\",', '        options: t.Any,', '        first_registration: bool,', '    ) -> None:', '        #: a reference to the current application', '        self.app = app', '', '        #: a reference to the blueprint that created this setup state.', '        self.blueprint = blueprint', '', '        #: a dictionary with all options that were passed to the', '        #: :meth:`~flask.Flask.register_blueprint` method.', '        self.options = options', '', '        #: as blueprints can be registered multiple times with the', '        #: application and not everything wants to be registered', '        #: multiple times on it, this attribute can be used to figure', '        #: out if the blueprint was registered in the past already.', '        self.first_registration = first_registration', '', '        subdomain = self.options.get(\"subdomain\")', '        if subdomain is None:', '            subdomain = self.blueprint.subdomain', '', '        #: The subdomain that the blueprint should be active for, ``None``', '        #: otherwise.', '        self.subdomain = subdomain', '', '        url_prefix = self.options.get(\"url_prefix\")', '        if url_prefix is None:', '            url_prefix = self.blueprint.url_prefix', '        #: The prefix that should be used for all URLs defined on the', '        #: blueprint.', '        self.url_prefix = url_prefix', '', '        self.name = self.options.get(\"name\", blueprint.name)', '        self.name_prefix = self.options.get(\"name_prefix\", \"\")', '', '        #: A dictionary with URL defaults that is added to each and every', '        #: URL that was defined with the blueprint.', '        self.url_defaults = dict(self.blueprint.url_values_defaults)', '        self.url_defaults.update(self.options.get(\"url_defaults\", ()))', '', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[t.Callable] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"A helper method to register a rule (and optionally a view function)', '        to the application.  The endpoint is automatically prefixed with the', \"        blueprint's name.\", '        \"\"\"', '        if self.url_prefix is not None:', '            if rule:', '                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rule.lstrip(\"/\")))', '            else:', '                rule = self.url_prefix', '        options.setdefault(\"subdomain\", self.subdomain)', '        if endpoint is None:', '            endpoint = _endpoint_from_view_func(view_func)  # type: ignore', '        defaults = self.url_defaults', '        if \"defaults\" in options:', '            defaults = dict(defaults, **options.pop(\"defaults\"))', '', '        self.app.add_url_rule(', '            rule,', '            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),', '            view_func,', '            defaults=defaults,', '            **options,', '        )'], 'methods': [{'name': '__init__', 'start_line': 39, 'end_line': 83, 'text': ['    def __init__(', '        self,', '        blueprint: \"Blueprint\",', '        app: \"Flask\",', '        options: t.Any,', '        first_registration: bool,', '    ) -> None:', '        #: a reference to the current application', '        self.app = app', '', '        #: a reference to the blueprint that created this setup state.', '        self.blueprint = blueprint', '', '        #: a dictionary with all options that were passed to the', '        #: :meth:`~flask.Flask.register_blueprint` method.', '        self.options = options', '', '        #: as blueprints can be registered multiple times with the', '        #: application and not everything wants to be registered', '        #: multiple times on it, this attribute can be used to figure', '        #: out if the blueprint was registered in the past already.', '        self.first_registration = first_registration', '', '        subdomain = self.options.get(\"subdomain\")', '        if subdomain is None:', '            subdomain = self.blueprint.subdomain', '', '        #: The subdomain that the blueprint should be active for, ``None``', '        #: otherwise.', '        self.subdomain = subdomain', '', '        url_prefix = self.options.get(\"url_prefix\")', '        if url_prefix is None:', '            url_prefix = self.blueprint.url_prefix', '        #: The prefix that should be used for all URLs defined on the', '        #: blueprint.', '        self.url_prefix = url_prefix', '', '        self.name = self.options.get(\"name\", blueprint.name)', '        self.name_prefix = self.options.get(\"name_prefix\", \"\")', '', '        #: A dictionary with URL defaults that is added to each and every', '        #: URL that was defined with the blueprint.', '        self.url_defaults = dict(self.blueprint.url_values_defaults)', '        self.url_defaults.update(self.options.get(\"url_defaults\", ()))']}, {'name': 'add_url_rule', 'start_line': 85, 'end_line': 114, 'text': ['    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[t.Callable] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"A helper method to register a rule (and optionally a view function)', '        to the application.  The endpoint is automatically prefixed with the', \"        blueprint's name.\", '        \"\"\"', '        if self.url_prefix is not None:', '            if rule:', '                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rule.lstrip(\"/\")))', '            else:', '                rule = self.url_prefix', '        options.setdefault(\"subdomain\", self.subdomain)', '        if endpoint is None:', '            endpoint = _endpoint_from_view_func(view_func)  # type: ignore', '        defaults = self.url_defaults', '        if \"defaults\" in options:', '            defaults = dict(defaults, **options.pop(\"defaults\"))', '', '        self.app.add_url_rule(', '            rule,', '            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),', '            view_func,', '            defaults=defaults,', '            **options,', '        )']}]}, {'name': 'Blueprint', 'start_line': 117, 'end_line': 621, 'text': ['class Blueprint(Scaffold):', '    \"\"\"Represents a blueprint, a collection of routes and other', '    app-related functions that can be registered on a real application', '    later.', '', '    A blueprint is an object that allows defining application functions', '    without requiring an application object ahead of time. It uses the', '    same decorators as :class:`~flask.Flask`, but defers the need for an', '    application by recording them for later registration.', '', '    Decorating a function with a blueprint creates a deferred function', '    that is called with :class:`~flask.blueprints.BlueprintSetupState`', '    when the blueprint is registered on an application.', '', '    See :doc:`/blueprints` for more information.', '', '    :param name: The name of the blueprint. Will be prepended to each', '        endpoint name.', '    :param import_name: The name of the blueprint package, usually', '        ``__name__``. This helps locate the ``root_path`` for the', '        blueprint.', '    :param static_folder: A folder with static files that should be', \"        served by the blueprint's static route. The path is relative to\", \"        the blueprint's root path. Blueprint static files are disabled\", '        by default.', '    :param static_url_path: The url to serve static files from.', '        Defaults to ``static_folder``. If the blueprint does not have', \"        a ``url_prefix``, the app's static route will take precedence,\", \"        and the blueprint's static files won't be accessible.\", '    :param template_folder: A folder with templates that should be added', \"        to the app's template search path. The path is relative to the\", \"        blueprint's root path. Blueprint templates are disabled by\", '        default. Blueprint templates have a lower precedence than those', \"        in the app's templates folder.\", \"    :param url_prefix: A path to prepend to all of the blueprint's URLs,\", \"        to make them distinct from the rest of the app's routes.\", '    :param subdomain: A subdomain that blueprint routes will match on by', '        default.', '    :param url_defaults: A dict of default values that blueprint routes', '        will receive by default.', '    :param root_path: By default, the blueprint will automatically set', '        this based on ``import_name``. In certain situations this', '        automatic detection can fail, so the path can be specified', '        manually instead.', '', '    .. versionchanged:: 1.1.0', '        Blueprints have a ``cli`` group to register nested CLI commands.', '        The ``cli_group`` parameter controls the name of the group under', '        the ``flask`` command.', '', '    .. versionadded:: 0.7', '    \"\"\"', '', '    _got_registered_once = False', '', '    def __init__(', '        self,', '        name: str,', '        import_name: str,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        static_url_path: t.Optional[str] = None,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        url_prefix: t.Optional[str] = None,', '        subdomain: t.Optional[str] = None,', '        url_defaults: t.Optional[dict] = None,', '        root_path: t.Optional[str] = None,', '        cli_group: t.Optional[str] = _sentinel,  # type: ignore', '    ):', '        super().__init__(', '            import_name=import_name,', '            static_folder=static_folder,', '            static_url_path=static_url_path,', '            template_folder=template_folder,', '            root_path=root_path,', '        )', '', '        if \".\" in name:', '            raise ValueError(\"\\'name\\' may not contain a dot \\'.\\' character.\")', '', '        self.name = name', '        self.url_prefix = url_prefix', '        self.subdomain = subdomain', '        self.deferred_functions: t.List[DeferredSetupFunction] = []', '', '        if url_defaults is None:', '            url_defaults = {}', '', '        self.url_values_defaults = url_defaults', '        self.cli_group = cli_group', '        self._blueprints: t.List[t.Tuple[\"Blueprint\", dict]] = []', '', '    def _check_setup_finished(self, f_name: str) -> None:', '        if self._got_registered_once:', '            raise AssertionError(', '                f\"The setup method \\'{f_name}\\' can no longer be called on the blueprint\"', '                f\" \\'{self.name}\\'. It has already been registered at least once, any\"', '                \" changes will not be applied consistently.\\\\n\"', '                \"Make sure all imports, decorators, functions, etc. needed to set up\"', '                \" the blueprint are done before registering it.\"', '            )', '', '    @setupmethod', '    def record(self, func: t.Callable) -> None:', '        \"\"\"Registers a function that is called when the blueprint is', '        registered on the application.  This function is called with the', '        state as argument as returned by the :meth:`make_setup_state`', '        method.', '        \"\"\"', '        self.deferred_functions.append(func)', '', '    @setupmethod', '    def record_once(self, func: t.Callable) -> None:', '        \"\"\"Works like :meth:`record` but wraps the function in another', '        function that will ensure the function is only called once.  If the', '        blueprint is registered a second time on the application, the', '        function passed is not called.', '        \"\"\"', '', '        def wrapper(state: BlueprintSetupState) -> None:', '            if state.first_registration:', '                func(state)', '', '        self.record(update_wrapper(wrapper, func))', '', '    def make_setup_state(', '        self, app: \"Flask\", options: dict, first_registration: bool = False', '    ) -> BlueprintSetupState:', '        \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`', '        object that is later passed to the register callback functions.', '        Subclasses can override this to return a subclass of the setup state.', '        \"\"\"', '        return BlueprintSetupState(self, app, options, first_registration)', '', '    @setupmethod', '    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:', '        \"\"\"Register a :class:`~flask.Blueprint` on this blueprint. Keyword', '        arguments passed to this method will override the defaults set', '        on the blueprint.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        if blueprint is self:', '            raise ValueError(\"Cannot register a blueprint on itself\")', '        self._blueprints.append((blueprint, options))', '', '    def register(self, app: \"Flask\", options: dict) -> None:', '        \"\"\"Called by :meth:`Flask.register_blueprint` to register all', '        views and callbacks registered on the blueprint with the', '        application. Creates a :class:`.BlueprintSetupState` and calls', '        each :meth:`record` callback with it.', '', '        :param app: The application this blueprint is being registered', '            with.', '        :param options: Keyword arguments forwarded from', '            :meth:`~Flask.register_blueprint`.', '', '        .. versionchanged:: 2.3', '            Nested blueprints now correctly apply subdomains.', '', '        .. versionchanged:: 2.1', '            Registering the same blueprint with the same name multiple', '            times is an error.', '', '        .. versionchanged:: 2.0.1', '            Nested blueprints are registered with their dotted name.', '            This allows different blueprints with the same name to be', '            nested at different locations.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '        \"\"\"', '        name_prefix = options.get(\"name_prefix\", \"\")', '        self_name = options.get(\"name\", self.name)', '        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")', '', '        if name in app.blueprints:', '            bp_desc = \"this\" if app.blueprints[name] is self else \"a different\"', '            existing_at = f\" \\'{name}\\'\" if self_name != name else \"\"', '', '            raise ValueError(', '                f\"The name \\'{self_name}\\' is already registered for\"', '                f\" {bp_desc} blueprint{existing_at}. Use \\'name=\\' to\"', '                f\" provide a unique name.\"', '            )', '', '        first_bp_registration = not any(bp is self for bp in app.blueprints.values())', '        first_name_registration = name not in app.blueprints', '', '        app.blueprints[name] = self', '        self._got_registered_once = True', '        state = self.make_setup_state(app, options, first_bp_registration)', '', '        if self.has_static_folder:', '            state.add_url_rule(', '                f\"{self.static_url_path}/<path:filename>\",', '                view_func=self.send_static_file,', '                endpoint=\"static\",', '            )', '', '        # Merge blueprint data into parent.', '        if first_bp_registration or first_name_registration:', '', '            def extend(bp_dict, parent_dict):', '                for key, values in bp_dict.items():', '                    key = name if key is None else f\"{name}.{key}\"', '                    parent_dict[key].extend(values)', '', '            for key, value in self.error_handler_spec.items():', '                key = name if key is None else f\"{name}.{key}\"', '                value = defaultdict(', '                    dict,', '                    {', '                        code: {', '                            exc_class: func for exc_class, func in code_values.items()', '                        }', '                        for code, code_values in value.items()', '                    },', '                )', '                app.error_handler_spec[key] = value', '', '            for endpoint, func in self.view_functions.items():', '                app.view_functions[endpoint] = func', '', '            extend(self.before_request_funcs, app.before_request_funcs)', '            extend(self.after_request_funcs, app.after_request_funcs)', '            extend(', '                self.teardown_request_funcs,', '                app.teardown_request_funcs,', '            )', '            extend(self.url_default_functions, app.url_default_functions)', '            extend(self.url_value_preprocessors, app.url_value_preprocessors)', '            extend(self.template_context_processors, app.template_context_processors)', '', '        for deferred in self.deferred_functions:', '            deferred(state)', '', '        cli_resolved_group = options.get(\"cli_group\", self.cli_group)', '', '        if self.cli.commands:', '            if cli_resolved_group is None:', '                app.cli.commands.update(self.cli.commands)', '            elif cli_resolved_group is _sentinel:', '                self.cli.name = name', '                app.cli.add_command(self.cli)', '            else:', '                self.cli.name = cli_resolved_group', '                app.cli.add_command(self.cli)', '', '        for blueprint, bp_options in self._blueprints:', '            bp_options = bp_options.copy()', '            bp_url_prefix = bp_options.get(\"url_prefix\")', '            bp_subdomain = bp_options.get(\"subdomain\")', '', '            if bp_subdomain is None:', '                bp_subdomain = blueprint.subdomain', '', '            if state.subdomain is not None and bp_subdomain is not None:', '                bp_options[\"subdomain\"] = bp_subdomain + \".\" + state.subdomain', '            elif bp_subdomain is not None:', '                bp_options[\"subdomain\"] = bp_subdomain', '            elif state.subdomain is not None:', '                bp_options[\"subdomain\"] = state.subdomain', '', '            if bp_url_prefix is None:', '                bp_url_prefix = blueprint.url_prefix', '', '            if state.url_prefix is not None and bp_url_prefix is not None:', '                bp_options[\"url_prefix\"] = (', '                    state.url_prefix.rstrip(\"/\") + \"/\" + bp_url_prefix.lstrip(\"/\")', '                )', '            elif bp_url_prefix is not None:', '                bp_options[\"url_prefix\"] = bp_url_prefix', '            elif state.url_prefix is not None:', '                bp_options[\"url_prefix\"] = state.url_prefix', '', '            bp_options[\"name_prefix\"] = name', '            blueprint.register(app, bp_options)', '', '    @setupmethod', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for', '        full documentation.', '', \"        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\", \"        used with :func:`url_for`, is prefixed with the blueprint's name.\", '        \"\"\"', '        if endpoint and \".\" in endpoint:', '            raise ValueError(\"\\'endpoint\\' may not contain a dot \\'.\\' character.\")', '', '        if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:', '            raise ValueError(\"\\'view_func\\' name may not contain a dot \\'.\\' character.\")', '', '        self.record(', '            lambda s: s.add_url_rule(', '                rule,', '                endpoint,', '                view_func,', '                provide_automatic_options=provide_automatic_options,', '                **options,', '            )', '        )', '', '    @setupmethod', '    def app_template_filter(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_filter], T_template_filter]:', '        \"\"\"Register a template filter, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_filter`.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_app_template_filter(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_app_template_filter(', '        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template filter, available in any template rendered by the', '        application. Works like the :meth:`app_template_filter` decorator. Equivalent to', '        :meth:`.Flask.add_template_filter`.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.filters[name or f.__name__] = f', '', '        self.record_once(register_template)', '', '    @setupmethod', '    def app_template_test(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_test], T_template_test]:', '        \"\"\"Register a template test, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_test`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_test) -> T_template_test:', '            self.add_app_template_test(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_app_template_test(', '        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template test, available in any template rendered by the', '        application. Works like the :meth:`app_template_test` decorator. Equivalent to', '        :meth:`.Flask.add_template_test`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.tests[name or f.__name__] = f', '', '        self.record_once(register_template)', '', '    @setupmethod', '    def app_template_global(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_global], T_template_global]:', '        \"\"\"Register a template global, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_global`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_global) -> T_template_global:', '            self.add_app_template_global(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_app_template_global(', '        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template global, available in any template rendered by the', '        application. Works like the :meth:`app_template_global` decorator. Equivalent to', '        :meth:`.Flask.add_template_global`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.globals[name or f.__name__] = f', '', '        self.record_once(register_template)', '', '    @setupmethod', '    def before_app_request(self, f: T_before_request) -> T_before_request:', '        \"\"\"Like :meth:`before_request`, but before every request, not only those handled', '        by the blueprint. Equivalent to :meth:`.Flask.before_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def after_app_request(self, f: T_after_request) -> T_after_request:', '        \"\"\"Like :meth:`after_request`, but after every request, not only those handled', '        by the blueprint. Equivalent to :meth:`.Flask.after_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def teardown_app_request(self, f: T_teardown) -> T_teardown:', '        \"\"\"Like :meth:`teardown_request`, but after every request, not only those', '        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def app_context_processor(', '        self, f: T_template_context_processor', '    ) -> T_template_context_processor:', '        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not', '        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def app_errorhandler(', '        self, code: t.Union[t.Type[Exception], int]', '    ) -> t.Callable[[T_error_handler], T_error_handler]:', '        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by', '        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.', '        \"\"\"', '', '        def decorator(f: T_error_handler) -> T_error_handler:', '            self.record_once(lambda s: s.app.errorhandler(code)(f))', '            return f', '', '        return decorator', '', '    @setupmethod', '    def app_url_value_preprocessor(', '        self, f: T_url_value_preprocessor', '    ) -> T_url_value_preprocessor:', '        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those', '        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:', '        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by', '        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)', '        )', '        return f'], 'methods': [{'name': '__init__', 'start_line': 172, 'end_line': 206, 'text': ['    def __init__(', '        self,', '        name: str,', '        import_name: str,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        static_url_path: t.Optional[str] = None,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        url_prefix: t.Optional[str] = None,', '        subdomain: t.Optional[str] = None,', '        url_defaults: t.Optional[dict] = None,', '        root_path: t.Optional[str] = None,', '        cli_group: t.Optional[str] = _sentinel,  # type: ignore', '    ):', '        super().__init__(', '            import_name=import_name,', '            static_folder=static_folder,', '            static_url_path=static_url_path,', '            template_folder=template_folder,', '            root_path=root_path,', '        )', '', '        if \".\" in name:', '            raise ValueError(\"\\'name\\' may not contain a dot \\'.\\' character.\")', '', '        self.name = name', '        self.url_prefix = url_prefix', '        self.subdomain = subdomain', '        self.deferred_functions: t.List[DeferredSetupFunction] = []', '', '        if url_defaults is None:', '            url_defaults = {}', '', '        self.url_values_defaults = url_defaults', '        self.cli_group = cli_group', '        self._blueprints: t.List[t.Tuple[\"Blueprint\", dict]] = []']}, {'name': '_check_setup_finished', 'start_line': 208, 'end_line': 216, 'text': ['    def _check_setup_finished(self, f_name: str) -> None:', '        if self._got_registered_once:', '            raise AssertionError(', '                f\"The setup method \\'{f_name}\\' can no longer be called on the blueprint\"', '                f\" \\'{self.name}\\'. It has already been registered at least once, any\"', '                \" changes will not be applied consistently.\\\\n\"', '                \"Make sure all imports, decorators, functions, etc. needed to set up\"', '                \" the blueprint are done before registering it.\"', '            )']}, {'name': 'record', 'start_line': 219, 'end_line': 225, 'text': ['    def record(self, func: t.Callable) -> None:', '        \"\"\"Registers a function that is called when the blueprint is', '        registered on the application.  This function is called with the', '        state as argument as returned by the :meth:`make_setup_state`', '        method.', '        \"\"\"', '        self.deferred_functions.append(func)']}, {'name': 'record_once', 'start_line': 228, 'end_line': 239, 'text': ['    def record_once(self, func: t.Callable) -> None:', '        \"\"\"Works like :meth:`record` but wraps the function in another', '        function that will ensure the function is only called once.  If the', '        blueprint is registered a second time on the application, the', '        function passed is not called.', '        \"\"\"', '', '        def wrapper(state: BlueprintSetupState) -> None:', '            if state.first_registration:', '                func(state)', '', '        self.record(update_wrapper(wrapper, func))']}, {'name': 'make_setup_state', 'start_line': 241, 'end_line': 248, 'text': ['    def make_setup_state(', '        self, app: \"Flask\", options: dict, first_registration: bool = False', '    ) -> BlueprintSetupState:', '        \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`', '        object that is later passed to the register callback functions.', '        Subclasses can override this to return a subclass of the setup state.', '        \"\"\"', '        return BlueprintSetupState(self, app, options, first_registration)']}, {'name': 'register_blueprint', 'start_line': 251, 'end_line': 266, 'text': ['    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:', '        \"\"\"Register a :class:`~flask.Blueprint` on this blueprint. Keyword', '        arguments passed to this method will override the defaults set', '        on the blueprint.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        if blueprint is self:', '            raise ValueError(\"Cannot register a blueprint on itself\")', '        self._blueprints.append((blueprint, options))']}, {'name': 'register', 'start_line': 268, 'end_line': 402, 'text': ['    def register(self, app: \"Flask\", options: dict) -> None:', '        \"\"\"Called by :meth:`Flask.register_blueprint` to register all', '        views and callbacks registered on the blueprint with the', '        application. Creates a :class:`.BlueprintSetupState` and calls', '        each :meth:`record` callback with it.', '', '        :param app: The application this blueprint is being registered', '            with.', '        :param options: Keyword arguments forwarded from', '            :meth:`~Flask.register_blueprint`.', '', '        .. versionchanged:: 2.3', '            Nested blueprints now correctly apply subdomains.', '', '        .. versionchanged:: 2.1', '            Registering the same blueprint with the same name multiple', '            times is an error.', '', '        .. versionchanged:: 2.0.1', '            Nested blueprints are registered with their dotted name.', '            This allows different blueprints with the same name to be', '            nested at different locations.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '        \"\"\"', '        name_prefix = options.get(\"name_prefix\", \"\")', '        self_name = options.get(\"name\", self.name)', '        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")', '', '        if name in app.blueprints:', '            bp_desc = \"this\" if app.blueprints[name] is self else \"a different\"', '            existing_at = f\" \\'{name}\\'\" if self_name != name else \"\"', '', '            raise ValueError(', '                f\"The name \\'{self_name}\\' is already registered for\"', '                f\" {bp_desc} blueprint{existing_at}. Use \\'name=\\' to\"', '                f\" provide a unique name.\"', '            )', '', '        first_bp_registration = not any(bp is self for bp in app.blueprints.values())', '        first_name_registration = name not in app.blueprints', '', '        app.blueprints[name] = self', '        self._got_registered_once = True', '        state = self.make_setup_state(app, options, first_bp_registration)', '', '        if self.has_static_folder:', '            state.add_url_rule(', '                f\"{self.static_url_path}/<path:filename>\",', '                view_func=self.send_static_file,', '                endpoint=\"static\",', '            )', '', '        # Merge blueprint data into parent.', '        if first_bp_registration or first_name_registration:', '', '            def extend(bp_dict, parent_dict):', '                for key, values in bp_dict.items():', '                    key = name if key is None else f\"{name}.{key}\"', '                    parent_dict[key].extend(values)', '', '            for key, value in self.error_handler_spec.items():', '                key = name if key is None else f\"{name}.{key}\"', '                value = defaultdict(', '                    dict,', '                    {', '                        code: {', '                            exc_class: func for exc_class, func in code_values.items()', '                        }', '                        for code, code_values in value.items()', '                    },', '                )', '                app.error_handler_spec[key] = value', '', '            for endpoint, func in self.view_functions.items():', '                app.view_functions[endpoint] = func', '', '            extend(self.before_request_funcs, app.before_request_funcs)', '            extend(self.after_request_funcs, app.after_request_funcs)', '            extend(', '                self.teardown_request_funcs,', '                app.teardown_request_funcs,', '            )', '            extend(self.url_default_functions, app.url_default_functions)', '            extend(self.url_value_preprocessors, app.url_value_preprocessors)', '            extend(self.template_context_processors, app.template_context_processors)', '', '        for deferred in self.deferred_functions:', '            deferred(state)', '', '        cli_resolved_group = options.get(\"cli_group\", self.cli_group)', '', '        if self.cli.commands:', '            if cli_resolved_group is None:', '                app.cli.commands.update(self.cli.commands)', '            elif cli_resolved_group is _sentinel:', '                self.cli.name = name', '                app.cli.add_command(self.cli)', '            else:', '                self.cli.name = cli_resolved_group', '                app.cli.add_command(self.cli)', '', '        for blueprint, bp_options in self._blueprints:', '            bp_options = bp_options.copy()', '            bp_url_prefix = bp_options.get(\"url_prefix\")', '            bp_subdomain = bp_options.get(\"subdomain\")', '', '            if bp_subdomain is None:', '                bp_subdomain = blueprint.subdomain', '', '            if state.subdomain is not None and bp_subdomain is not None:', '                bp_options[\"subdomain\"] = bp_subdomain + \".\" + state.subdomain', '            elif bp_subdomain is not None:', '                bp_options[\"subdomain\"] = bp_subdomain', '            elif state.subdomain is not None:', '                bp_options[\"subdomain\"] = state.subdomain', '', '            if bp_url_prefix is None:', '                bp_url_prefix = blueprint.url_prefix', '', '            if state.url_prefix is not None and bp_url_prefix is not None:', '                bp_options[\"url_prefix\"] = (', '                    state.url_prefix.rstrip(\"/\") + \"/\" + bp_url_prefix.lstrip(\"/\")', '                )', '            elif bp_url_prefix is not None:', '                bp_options[\"url_prefix\"] = bp_url_prefix', '            elif state.url_prefix is not None:', '                bp_options[\"url_prefix\"] = state.url_prefix', '', '            bp_options[\"name_prefix\"] = name', '            blueprint.register(app, bp_options)']}, {'name': 'add_url_rule', 'start_line': 405, 'end_line': 433, 'text': ['    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for', '        full documentation.', '', \"        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\", \"        used with :func:`url_for`, is prefixed with the blueprint's name.\", '        \"\"\"', '        if endpoint and \".\" in endpoint:', '            raise ValueError(\"\\'endpoint\\' may not contain a dot \\'.\\' character.\")', '', '        if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:', '            raise ValueError(\"\\'view_func\\' name may not contain a dot \\'.\\' character.\")', '', '        self.record(', '            lambda s: s.add_url_rule(', '                rule,', '                endpoint,', '                view_func,', '                provide_automatic_options=provide_automatic_options,', '                **options,', '            )', '        )']}, {'name': 'app_template_filter', 'start_line': 436, 'end_line': 450, 'text': ['    def app_template_filter(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_filter], T_template_filter]:', '        \"\"\"Register a template filter, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_filter`.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_app_template_filter(f, name=name)', '            return f', '', '        return decorator']}, {'name': 'add_app_template_filter', 'start_line': 453, 'end_line': 467, 'text': ['    def add_app_template_filter(', '        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template filter, available in any template rendered by the', '        application. Works like the :meth:`app_template_filter` decorator. Equivalent to', '        :meth:`.Flask.add_template_filter`.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.filters[name or f.__name__] = f', '', '        self.record_once(register_template)']}, {'name': 'app_template_test', 'start_line': 470, 'end_line': 486, 'text': ['    def app_template_test(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_test], T_template_test]:', '        \"\"\"Register a template test, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_test`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_test) -> T_template_test:', '            self.add_app_template_test(f, name=name)', '            return f', '', '        return decorator']}, {'name': 'add_app_template_test', 'start_line': 489, 'end_line': 505, 'text': ['    def add_app_template_test(', '        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template test, available in any template rendered by the', '        application. Works like the :meth:`app_template_test` decorator. Equivalent to', '        :meth:`.Flask.add_template_test`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.tests[name or f.__name__] = f', '', '        self.record_once(register_template)']}, {'name': 'app_template_global', 'start_line': 508, 'end_line': 524, 'text': ['    def app_template_global(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_global], T_template_global]:', '        \"\"\"Register a template global, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_global`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_global) -> T_template_global:', '            self.add_app_template_global(f, name=name)', '            return f', '', '        return decorator']}, {'name': 'add_app_template_global', 'start_line': 527, 'end_line': 543, 'text': ['    def add_app_template_global(', '        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template global, available in any template rendered by the', '        application. Works like the :meth:`app_template_global` decorator. Equivalent to', '        :meth:`.Flask.add_template_global`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.globals[name or f.__name__] = f', '', '        self.record_once(register_template)']}, {'name': 'before_app_request', 'start_line': 546, 'end_line': 553, 'text': ['    def before_app_request(self, f: T_before_request) -> T_before_request:', '        \"\"\"Like :meth:`before_request`, but before every request, not only those handled', '        by the blueprint. Equivalent to :meth:`.Flask.before_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)', '        )', '        return f']}, {'name': 'after_app_request', 'start_line': 556, 'end_line': 563, 'text': ['    def after_app_request(self, f: T_after_request) -> T_after_request:', '        \"\"\"Like :meth:`after_request`, but after every request, not only those handled', '        by the blueprint. Equivalent to :meth:`.Flask.after_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)', '        )', '        return f']}, {'name': 'teardown_app_request', 'start_line': 566, 'end_line': 573, 'text': ['    def teardown_app_request(self, f: T_teardown) -> T_teardown:', '        \"\"\"Like :meth:`teardown_request`, but after every request, not only those', '        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)', '        )', '        return f']}, {'name': 'app_context_processor', 'start_line': 576, 'end_line': 585, 'text': ['    def app_context_processor(', '        self, f: T_template_context_processor', '    ) -> T_template_context_processor:', '        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not', '        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)', '        )', '        return f']}, {'name': 'app_errorhandler', 'start_line': 588, 'end_line': 599, 'text': ['    def app_errorhandler(', '        self, code: t.Union[t.Type[Exception], int]', '    ) -> t.Callable[[T_error_handler], T_error_handler]:', '        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by', '        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.', '        \"\"\"', '', '        def decorator(f: T_error_handler) -> T_error_handler:', '            self.record_once(lambda s: s.app.errorhandler(code)(f))', '            return f', '', '        return decorator']}, {'name': 'app_url_value_preprocessor', 'start_line': 602, 'end_line': 611, 'text': ['    def app_url_value_preprocessor(', '        self, f: T_url_value_preprocessor', '    ) -> T_url_value_preprocessor:', '        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those', '        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)', '        )', '        return f']}, {'name': 'app_url_defaults', 'start_line': 614, 'end_line': 621, 'text': ['    def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:', '        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by', '        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)', '        )', '        return f']}]}], 'functions': [{'name': 'wrapper', 'start_line': 235, 'end_line': 237, 'text': ['        def wrapper(state: BlueprintSetupState) -> None:', '            if state.first_registration:', '                func(state)']}, {'name': 'decorator', 'start_line': 446, 'end_line': 448, 'text': ['        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_app_template_filter(f, name=name)', '            return f']}, {'name': 'register_template', 'start_line': 464, 'end_line': 465, 'text': ['        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.filters[name or f.__name__] = f']}, {'name': 'decorator', 'start_line': 482, 'end_line': 484, 'text': ['        def decorator(f: T_template_test) -> T_template_test:', '            self.add_app_template_test(f, name=name)', '            return f']}, {'name': 'register_template', 'start_line': 502, 'end_line': 503, 'text': ['        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.tests[name or f.__name__] = f']}, {'name': 'decorator', 'start_line': 520, 'end_line': 522, 'text': ['        def decorator(f: T_template_global) -> T_template_global:', '            self.add_app_template_global(f, name=name)', '            return f']}, {'name': 'register_template', 'start_line': 540, 'end_line': 541, 'text': ['        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.globals[name or f.__name__] = f']}, {'name': 'decorator', 'start_line': 595, 'end_line': 597, 'text': ['        def decorator(f: T_error_handler) -> T_error_handler:', '            self.record_once(lambda s: s.app.errorhandler(code)(f))', '            return f']}, {'name': 'extend', 'start_line': 328, 'end_line': 331, 'text': ['            def extend(bp_dict, parent_dict):', '                for key, values in bp_dict.items():', '                    key = name if key is None else f\"{name}.{key}\"', '                    parent_dict[key].extend(values)']}], 'text': ['import os', 'import typing as t', 'from collections import defaultdict', 'from functools import update_wrapper', '', 'from . import typing as ft', 'from .scaffold import _endpoint_from_view_func', 'from .scaffold import _sentinel', 'from .scaffold import Scaffold', 'from .scaffold import setupmethod', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from .app import Flask', '', 'DeferredSetupFunction = t.Callable[[\"BlueprintSetupState\"], t.Callable]', 'T_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable)', 'T_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)', 'T_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)', 'T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)', 'T_template_context_processor = t.TypeVar(', '    \"T_template_context_processor\", bound=ft.TemplateContextProcessorCallable', ')', 'T_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)', 'T_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)', 'T_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)', 'T_url_defaults = t.TypeVar(\"T_url_defaults\", bound=ft.URLDefaultCallable)', 'T_url_value_preprocessor = t.TypeVar(', '    \"T_url_value_preprocessor\", bound=ft.URLValuePreprocessorCallable', ')', '', '', 'class BlueprintSetupState:', '    \"\"\"Temporary holder object for registering a blueprint with the', '    application.  An instance of this class is created by the', '    :meth:`~flask.Blueprint.make_setup_state` method and later passed', '    to all register callback functions.', '    \"\"\"', '', '    def __init__(', '        self,', '        blueprint: \"Blueprint\",', '        app: \"Flask\",', '        options: t.Any,', '        first_registration: bool,', '    ) -> None:', '        #: a reference to the current application', '        self.app = app', '', '        #: a reference to the blueprint that created this setup state.', '        self.blueprint = blueprint', '', '        #: a dictionary with all options that were passed to the', '        #: :meth:`~flask.Flask.register_blueprint` method.', '        self.options = options', '', '        #: as blueprints can be registered multiple times with the', '        #: application and not everything wants to be registered', '        #: multiple times on it, this attribute can be used to figure', '        #: out if the blueprint was registered in the past already.', '        self.first_registration = first_registration', '', '        subdomain = self.options.get(\"subdomain\")', '        if subdomain is None:', '            subdomain = self.blueprint.subdomain', '', '        #: The subdomain that the blueprint should be active for, ``None``', '        #: otherwise.', '        self.subdomain = subdomain', '', '        url_prefix = self.options.get(\"url_prefix\")', '        if url_prefix is None:', '            url_prefix = self.blueprint.url_prefix', '        #: The prefix that should be used for all URLs defined on the', '        #: blueprint.', '        self.url_prefix = url_prefix', '', '        self.name = self.options.get(\"name\", blueprint.name)', '        self.name_prefix = self.options.get(\"name_prefix\", \"\")', '', '        #: A dictionary with URL defaults that is added to each and every', '        #: URL that was defined with the blueprint.', '        self.url_defaults = dict(self.blueprint.url_values_defaults)', '        self.url_defaults.update(self.options.get(\"url_defaults\", ()))', '', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[t.Callable] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"A helper method to register a rule (and optionally a view function)', '        to the application.  The endpoint is automatically prefixed with the', \"        blueprint's name.\", '        \"\"\"', '        if self.url_prefix is not None:', '            if rule:', '                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rule.lstrip(\"/\")))', '            else:', '                rule = self.url_prefix', '        options.setdefault(\"subdomain\", self.subdomain)', '        if endpoint is None:', '            endpoint = _endpoint_from_view_func(view_func)  # type: ignore', '        defaults = self.url_defaults', '        if \"defaults\" in options:', '            defaults = dict(defaults, **options.pop(\"defaults\"))', '', '        self.app.add_url_rule(', '            rule,', '            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),', '            view_func,', '            defaults=defaults,', '            **options,', '        )', '', '', 'class Blueprint(Scaffold):', '    \"\"\"Represents a blueprint, a collection of routes and other', '    app-related functions that can be registered on a real application', '    later.', '', '    A blueprint is an object that allows defining application functions', '    without requiring an application object ahead of time. It uses the', '    same decorators as :class:`~flask.Flask`, but defers the need for an', '    application by recording them for later registration.', '', '    Decorating a function with a blueprint creates a deferred function', '    that is called with :class:`~flask.blueprints.BlueprintSetupState`', '    when the blueprint is registered on an application.', '', '    See :doc:`/blueprints` for more information.', '', '    :param name: The name of the blueprint. Will be prepended to each', '        endpoint name.', '    :param import_name: The name of the blueprint package, usually', '        ``__name__``. This helps locate the ``root_path`` for the', '        blueprint.', '    :param static_folder: A folder with static files that should be', \"        served by the blueprint's static route. The path is relative to\", \"        the blueprint's root path. Blueprint static files are disabled\", '        by default.', '    :param static_url_path: The url to serve static files from.', '        Defaults to ``static_folder``. If the blueprint does not have', \"        a ``url_prefix``, the app's static route will take precedence,\", \"        and the blueprint's static files won't be accessible.\", '    :param template_folder: A folder with templates that should be added', \"        to the app's template search path. The path is relative to the\", \"        blueprint's root path. Blueprint templates are disabled by\", '        default. Blueprint templates have a lower precedence than those', \"        in the app's templates folder.\", \"    :param url_prefix: A path to prepend to all of the blueprint's URLs,\", \"        to make them distinct from the rest of the app's routes.\", '    :param subdomain: A subdomain that blueprint routes will match on by', '        default.', '    :param url_defaults: A dict of default values that blueprint routes', '        will receive by default.', '    :param root_path: By default, the blueprint will automatically set', '        this based on ``import_name``. In certain situations this', '        automatic detection can fail, so the path can be specified', '        manually instead.', '', '    .. versionchanged:: 1.1.0', '        Blueprints have a ``cli`` group to register nested CLI commands.', '        The ``cli_group`` parameter controls the name of the group under', '        the ``flask`` command.', '', '    .. versionadded:: 0.7', '    \"\"\"', '', '    _got_registered_once = False', '', '    def __init__(', '        self,', '        name: str,', '        import_name: str,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        static_url_path: t.Optional[str] = None,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        url_prefix: t.Optional[str] = None,', '        subdomain: t.Optional[str] = None,', '        url_defaults: t.Optional[dict] = None,', '        root_path: t.Optional[str] = None,', '        cli_group: t.Optional[str] = _sentinel,  # type: ignore', '    ):', '        super().__init__(', '            import_name=import_name,', '            static_folder=static_folder,', '            static_url_path=static_url_path,', '            template_folder=template_folder,', '            root_path=root_path,', '        )', '', '        if \".\" in name:', '            raise ValueError(\"\\'name\\' may not contain a dot \\'.\\' character.\")', '', '        self.name = name', '        self.url_prefix = url_prefix', '        self.subdomain = subdomain', '        self.deferred_functions: t.List[DeferredSetupFunction] = []', '', '        if url_defaults is None:', '            url_defaults = {}', '', '        self.url_values_defaults = url_defaults', '        self.cli_group = cli_group', '        self._blueprints: t.List[t.Tuple[\"Blueprint\", dict]] = []', '', '    def _check_setup_finished(self, f_name: str) -> None:', '        if self._got_registered_once:', '            raise AssertionError(', '                f\"The setup method \\'{f_name}\\' can no longer be called on the blueprint\"', '                f\" \\'{self.name}\\'. It has already been registered at least once, any\"', '                \" changes will not be applied consistently.\\\\n\"', '                \"Make sure all imports, decorators, functions, etc. needed to set up\"', '                \" the blueprint are done before registering it.\"', '            )', '', '    @setupmethod', '    def record(self, func: t.Callable) -> None:', '        \"\"\"Registers a function that is called when the blueprint is', '        registered on the application.  This function is called with the', '        state as argument as returned by the :meth:`make_setup_state`', '        method.', '        \"\"\"', '        self.deferred_functions.append(func)', '', '    @setupmethod', '    def record_once(self, func: t.Callable) -> None:', '        \"\"\"Works like :meth:`record` but wraps the function in another', '        function that will ensure the function is only called once.  If the', '        blueprint is registered a second time on the application, the', '        function passed is not called.', '        \"\"\"', '', '        def wrapper(state: BlueprintSetupState) -> None:', '            if state.first_registration:', '                func(state)', '', '        self.record(update_wrapper(wrapper, func))', '', '    def make_setup_state(', '        self, app: \"Flask\", options: dict, first_registration: bool = False', '    ) -> BlueprintSetupState:', '        \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`', '        object that is later passed to the register callback functions.', '        Subclasses can override this to return a subclass of the setup state.', '        \"\"\"', '        return BlueprintSetupState(self, app, options, first_registration)', '', '    @setupmethod', '    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:', '        \"\"\"Register a :class:`~flask.Blueprint` on this blueprint. Keyword', '        arguments passed to this method will override the defaults set', '        on the blueprint.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        if blueprint is self:', '            raise ValueError(\"Cannot register a blueprint on itself\")', '        self._blueprints.append((blueprint, options))', '', '    def register(self, app: \"Flask\", options: dict) -> None:', '        \"\"\"Called by :meth:`Flask.register_blueprint` to register all', '        views and callbacks registered on the blueprint with the', '        application. Creates a :class:`.BlueprintSetupState` and calls', '        each :meth:`record` callback with it.', '', '        :param app: The application this blueprint is being registered', '            with.', '        :param options: Keyword arguments forwarded from', '            :meth:`~Flask.register_blueprint`.', '', '        .. versionchanged:: 2.3', '            Nested blueprints now correctly apply subdomains.', '', '        .. versionchanged:: 2.1', '            Registering the same blueprint with the same name multiple', '            times is an error.', '', '        .. versionchanged:: 2.0.1', '            Nested blueprints are registered with their dotted name.', '            This allows different blueprints with the same name to be', '            nested at different locations.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '        \"\"\"', '        name_prefix = options.get(\"name_prefix\", \"\")', '        self_name = options.get(\"name\", self.name)', '        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")', '', '        if name in app.blueprints:', '            bp_desc = \"this\" if app.blueprints[name] is self else \"a different\"', '            existing_at = f\" \\'{name}\\'\" if self_name != name else \"\"', '', '            raise ValueError(', '                f\"The name \\'{self_name}\\' is already registered for\"', '                f\" {bp_desc} blueprint{existing_at}. Use \\'name=\\' to\"', '                f\" provide a unique name.\"', '            )', '', '        first_bp_registration = not any(bp is self for bp in app.blueprints.values())', '        first_name_registration = name not in app.blueprints', '', '        app.blueprints[name] = self', '        self._got_registered_once = True', '        state = self.make_setup_state(app, options, first_bp_registration)', '', '        if self.has_static_folder:', '            state.add_url_rule(', '                f\"{self.static_url_path}/<path:filename>\",', '                view_func=self.send_static_file,', '                endpoint=\"static\",', '            )', '', '        # Merge blueprint data into parent.', '        if first_bp_registration or first_name_registration:', '', '            def extend(bp_dict, parent_dict):', '                for key, values in bp_dict.items():', '                    key = name if key is None else f\"{name}.{key}\"', '                    parent_dict[key].extend(values)', '', '            for key, value in self.error_handler_spec.items():', '                key = name if key is None else f\"{name}.{key}\"', '                value = defaultdict(', '                    dict,', '                    {', '                        code: {', '                            exc_class: func for exc_class, func in code_values.items()', '                        }', '                        for code, code_values in value.items()', '                    },', '                )', '                app.error_handler_spec[key] = value', '', '            for endpoint, func in self.view_functions.items():', '                app.view_functions[endpoint] = func', '', '            extend(self.before_request_funcs, app.before_request_funcs)', '            extend(self.after_request_funcs, app.after_request_funcs)', '            extend(', '                self.teardown_request_funcs,', '                app.teardown_request_funcs,', '            )', '            extend(self.url_default_functions, app.url_default_functions)', '            extend(self.url_value_preprocessors, app.url_value_preprocessors)', '            extend(self.template_context_processors, app.template_context_processors)', '', '        for deferred in self.deferred_functions:', '            deferred(state)', '', '        cli_resolved_group = options.get(\"cli_group\", self.cli_group)', '', '        if self.cli.commands:', '            if cli_resolved_group is None:', '                app.cli.commands.update(self.cli.commands)', '            elif cli_resolved_group is _sentinel:', '                self.cli.name = name', '                app.cli.add_command(self.cli)', '            else:', '                self.cli.name = cli_resolved_group', '                app.cli.add_command(self.cli)', '', '        for blueprint, bp_options in self._blueprints:', '            bp_options = bp_options.copy()', '            bp_url_prefix = bp_options.get(\"url_prefix\")', '            bp_subdomain = bp_options.get(\"subdomain\")', '', '            if bp_subdomain is None:', '                bp_subdomain = blueprint.subdomain', '', '            if state.subdomain is not None and bp_subdomain is not None:', '                bp_options[\"subdomain\"] = bp_subdomain + \".\" + state.subdomain', '            elif bp_subdomain is not None:', '                bp_options[\"subdomain\"] = bp_subdomain', '            elif state.subdomain is not None:', '                bp_options[\"subdomain\"] = state.subdomain', '', '            if bp_url_prefix is None:', '                bp_url_prefix = blueprint.url_prefix', '', '            if state.url_prefix is not None and bp_url_prefix is not None:', '                bp_options[\"url_prefix\"] = (', '                    state.url_prefix.rstrip(\"/\") + \"/\" + bp_url_prefix.lstrip(\"/\")', '                )', '            elif bp_url_prefix is not None:', '                bp_options[\"url_prefix\"] = bp_url_prefix', '            elif state.url_prefix is not None:', '                bp_options[\"url_prefix\"] = state.url_prefix', '', '            bp_options[\"name_prefix\"] = name', '            blueprint.register(app, bp_options)', '', '    @setupmethod', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for', '        full documentation.', '', \"        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\", \"        used with :func:`url_for`, is prefixed with the blueprint's name.\", '        \"\"\"', '        if endpoint and \".\" in endpoint:', '            raise ValueError(\"\\'endpoint\\' may not contain a dot \\'.\\' character.\")', '', '        if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:', '            raise ValueError(\"\\'view_func\\' name may not contain a dot \\'.\\' character.\")', '', '        self.record(', '            lambda s: s.add_url_rule(', '                rule,', '                endpoint,', '                view_func,', '                provide_automatic_options=provide_automatic_options,', '                **options,', '            )', '        )', '', '    @setupmethod', '    def app_template_filter(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_filter], T_template_filter]:', '        \"\"\"Register a template filter, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_filter`.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_app_template_filter(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_app_template_filter(', '        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template filter, available in any template rendered by the', '        application. Works like the :meth:`app_template_filter` decorator. Equivalent to', '        :meth:`.Flask.add_template_filter`.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.filters[name or f.__name__] = f', '', '        self.record_once(register_template)', '', '    @setupmethod', '    def app_template_test(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_test], T_template_test]:', '        \"\"\"Register a template test, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_test`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_test) -> T_template_test:', '            self.add_app_template_test(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_app_template_test(', '        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template test, available in any template rendered by the', '        application. Works like the :meth:`app_template_test` decorator. Equivalent to', '        :meth:`.Flask.add_template_test`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.tests[name or f.__name__] = f', '', '        self.record_once(register_template)', '', '    @setupmethod', '    def app_template_global(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_global], T_template_global]:', '        \"\"\"Register a template global, available in any template rendered by the', '        application. Equivalent to :meth:`.Flask.template_global`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_global) -> T_template_global:', '            self.add_app_template_global(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_app_template_global(', '        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a template global, available in any template rendered by the', '        application. Works like the :meth:`app_template_global` decorator. Equivalent to', '        :meth:`.Flask.add_template_global`.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def register_template(state: BlueprintSetupState) -> None:', '            state.app.jinja_env.globals[name or f.__name__] = f', '', '        self.record_once(register_template)', '', '    @setupmethod', '    def before_app_request(self, f: T_before_request) -> T_before_request:', '        \"\"\"Like :meth:`before_request`, but before every request, not only those handled', '        by the blueprint. Equivalent to :meth:`.Flask.before_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def after_app_request(self, f: T_after_request) -> T_after_request:', '        \"\"\"Like :meth:`after_request`, but after every request, not only those handled', '        by the blueprint. Equivalent to :meth:`.Flask.after_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def teardown_app_request(self, f: T_teardown) -> T_teardown:', '        \"\"\"Like :meth:`teardown_request`, but after every request, not only those', '        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def app_context_processor(', '        self, f: T_template_context_processor', '    ) -> T_template_context_processor:', '        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not', '        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def app_errorhandler(', '        self, code: t.Union[t.Type[Exception], int]', '    ) -> t.Callable[[T_error_handler], T_error_handler]:', '        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by', '        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.', '        \"\"\"', '', '        def decorator(f: T_error_handler) -> T_error_handler:', '            self.record_once(lambda s: s.app.errorhandler(code)(f))', '            return f', '', '        return decorator', '', '    @setupmethod', '    def app_url_value_preprocessor(', '        self, f: T_url_value_preprocessor', '    ) -> T_url_value_preprocessor:', '        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those', '        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)', '        )', '        return f', '', '    @setupmethod', '    def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:', '        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by', '        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.', '        \"\"\"', '        self.record_once(', '            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)', '        )', '        return f']}, 'templating.py': {'classes': [{'name': 'Environment', 'start_line': 36, 'end_line': 46, 'text': ['class Environment(BaseEnvironment):', '    \"\"\"Works like a regular Jinja2 environment but has some additional', \"    knowledge of how Flask's blueprint works so that it can prepend the\", '    name of the blueprint to referenced templates if necessary.', '    \"\"\"', '', '    def __init__(self, app: \"Flask\", **options: t.Any) -> None:', '        if \"loader\" not in options:', '            options[\"loader\"] = app.create_global_jinja_loader()', '        BaseEnvironment.__init__(self, **options)', '        self.app = app'], 'methods': [{'name': '__init__', 'start_line': 42, 'end_line': 46, 'text': ['    def __init__(self, app: \"Flask\", **options: t.Any) -> None:', '        if \"loader\" not in options:', '            options[\"loader\"] = app.create_global_jinja_loader()', '        BaseEnvironment.__init__(self, **options)', '        self.app = app']}]}, {'name': 'DispatchingJinjaLoader', 'start_line': 49, 'end_line': 124, 'text': ['class DispatchingJinjaLoader(BaseLoader):', '    \"\"\"A loader that looks for templates in the application and all', '    the blueprint folders.', '    \"\"\"', '', '    def __init__(self, app: \"Flask\") -> None:', '        self.app = app', '', '    def get_source(  # type: ignore', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:', '            return self._get_source_explained(environment, template)', '        return self._get_source_fast(environment, template)', '', '    def _get_source_explained(', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        attempts = []', '        rv: t.Optional[t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]]', '        trv: t.Optional[', '            t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]', '        ] = None', '', '        for srcobj, loader in self._iter_loaders(template):', '            try:', '                rv = loader.get_source(environment, template)', '                if trv is None:', '                    trv = rv', '            except TemplateNotFound:', '                rv = None', '            attempts.append((loader, srcobj, rv))', '', '        from .debughelpers import explain_template_loading_attempts', '', '        explain_template_loading_attempts(self.app, template, attempts)', '', '        if trv is not None:', '            return trv', '        raise TemplateNotFound(template)', '', '    def _get_source_fast(', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        for _srcobj, loader in self._iter_loaders(template):', '            try:', '                return loader.get_source(environment, template)', '            except TemplateNotFound:', '                continue', '        raise TemplateNotFound(template)', '', '    def _iter_loaders(', '        self, template: str', '    ) -> t.Generator[t.Tuple[\"Scaffold\", BaseLoader], None, None]:', '        loader = self.app.jinja_loader', '        if loader is not None:', '            yield self.app, loader', '', '        for blueprint in self.app.iter_blueprints():', '            loader = blueprint.jinja_loader', '            if loader is not None:', '                yield blueprint, loader', '', '    def list_templates(self) -> t.List[str]:', '        result = set()', '        loader = self.app.jinja_loader', '        if loader is not None:', '            result.update(loader.list_templates())', '', '        for blueprint in self.app.iter_blueprints():', '            loader = blueprint.jinja_loader', '            if loader is not None:', '                for template in loader.list_templates():', '                    result.add(template)', '', '        return list(result)'], 'methods': [{'name': '__init__', 'start_line': 54, 'end_line': 55, 'text': ['    def __init__(self, app: \"Flask\") -> None:', '        self.app = app']}, {'name': 'get_source', 'start_line': 57, 'end_line': 62, 'text': ['    def get_source(  # type: ignore', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:', '            return self._get_source_explained(environment, template)', '        return self._get_source_fast(environment, template)']}, {'name': '_get_source_explained', 'start_line': 64, 'end_line': 88, 'text': ['    def _get_source_explained(', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        attempts = []', '        rv: t.Optional[t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]]', '        trv: t.Optional[', '            t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]', '        ] = None', '', '        for srcobj, loader in self._iter_loaders(template):', '            try:', '                rv = loader.get_source(environment, template)', '                if trv is None:', '                    trv = rv', '            except TemplateNotFound:', '                rv = None', '            attempts.append((loader, srcobj, rv))', '', '        from .debughelpers import explain_template_loading_attempts', '', '        explain_template_loading_attempts(self.app, template, attempts)', '', '        if trv is not None:', '            return trv', '        raise TemplateNotFound(template)']}, {'name': '_get_source_fast', 'start_line': 90, 'end_line': 98, 'text': ['    def _get_source_fast(', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        for _srcobj, loader in self._iter_loaders(template):', '            try:', '                return loader.get_source(environment, template)', '            except TemplateNotFound:', '                continue', '        raise TemplateNotFound(template)']}, {'name': '_iter_loaders', 'start_line': 100, 'end_line': 110, 'text': ['    def _iter_loaders(', '        self, template: str', '    ) -> t.Generator[t.Tuple[\"Scaffold\", BaseLoader], None, None]:', '        loader = self.app.jinja_loader', '        if loader is not None:', '            yield self.app, loader', '', '        for blueprint in self.app.iter_blueprints():', '            loader = blueprint.jinja_loader', '            if loader is not None:', '                yield blueprint, loader']}, {'name': 'list_templates', 'start_line': 112, 'end_line': 124, 'text': ['    def list_templates(self) -> t.List[str]:', '        result = set()', '        loader = self.app.jinja_loader', '        if loader is not None:', '            result.update(loader.list_templates())', '', '        for blueprint in self.app.iter_blueprints():', '            loader = blueprint.jinja_loader', '            if loader is not None:', '                for template in loader.list_templates():', '                    result.add(template)', '', '        return list(result)']}]}], 'functions': [{'name': '_default_template_ctx_processor', 'start_line': 21, 'end_line': 33, 'text': ['def _default_template_ctx_processor() -> t.Dict[str, t.Any]:', '    \"\"\"Default template context processor.  Injects `request`,', '    `session` and `g`.', '    \"\"\"', '    appctx = _cv_app.get(None)', '    reqctx = _cv_request.get(None)', '    rv: t.Dict[str, t.Any] = {}', '    if appctx is not None:', '        rv[\"g\"] = appctx.g', '    if reqctx is not None:', '        rv[\"request\"] = reqctx.request', '        rv[\"session\"] = reqctx.session', '    return rv']}, {'name': '_render', 'start_line': 127, 'end_line': 132, 'text': ['def _render(app: \"Flask\", template: Template, context: t.Dict[str, t.Any]) -> str:', '    app.update_template_context(context)', '    before_render_template.send(app, template=template, context=context)', '    rv = template.render(context)', '    template_rendered.send(app, template=template, context=context)', '    return rv']}, {'name': 'render_template', 'start_line': 135, 'end_line': 147, 'text': ['def render_template(', '    template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],', '    **context: t.Any,', ') -> str:', '    \"\"\"Render a template by name with the given context.', '', '    :param template_name_or_list: The name of the template to render. If', '        a list is given, the first name to exist will be rendered.', '    :param context: The variables to make available in the template.', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.get_or_select_template(template_name_or_list)', '    return _render(app, template, context)']}, {'name': 'render_template_string', 'start_line': 150, 'end_line': 159, 'text': ['def render_template_string(source: str, **context: t.Any) -> str:', '    \"\"\"Render a template from the given source string with the given', '    context.', '', '    :param source: The source code of the template to render.', '    :param context: The variables to make available in the template.', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.from_string(source)', '    return _render(app, template, context)']}, {'name': '_stream', 'start_line': 162, 'end_line': 178, 'text': ['def _stream(', '    app: \"Flask\", template: Template, context: t.Dict[str, t.Any]', ') -> t.Iterator[str]:', '    app.update_template_context(context)', '    before_render_template.send(app, template=template, context=context)', '', '    def generate() -> t.Iterator[str]:', '        yield from template.generate(context)', '        template_rendered.send(app, template=template, context=context)', '', '    rv = generate()', '', '    # If a request context is active, keep it while generating.', '    if request:', '        rv = stream_with_context(rv)', '', '    return rv']}, {'name': 'stream_template', 'start_line': 181, 'end_line': 197, 'text': ['def stream_template(', '    template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],', '    **context: t.Any,', ') -> t.Iterator[str]:', '    \"\"\"Render a template by name with the given context as a stream.', '    This returns an iterator of strings, which can be used as a', '    streaming response from a view.', '', '    :param template_name_or_list: The name of the template to render. If', '        a list is given, the first name to exist will be rendered.', '    :param context: The variables to make available in the template.', '', '    .. versionadded:: 2.2', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.get_or_select_template(template_name_or_list)', '    return _stream(app, template, context)']}, {'name': 'stream_template_string', 'start_line': 200, 'end_line': 212, 'text': ['def stream_template_string(source: str, **context: t.Any) -> t.Iterator[str]:', '    \"\"\"Render a template from the given source string with the given', '    context as a stream. This returns an iterator of strings, which can', '    be used as a streaming response from a view.', '', '    :param source: The source code of the template to render.', '    :param context: The variables to make available in the template.', '', '    .. versionadded:: 2.2', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.from_string(source)', '    return _stream(app, template, context)']}, {'name': 'generate', 'start_line': 168, 'end_line': 170, 'text': ['    def generate() -> t.Iterator[str]:', '        yield from template.generate(context)', '        template_rendered.send(app, template=template, context=context)']}], 'text': ['import typing as t', '', 'from jinja2 import BaseLoader', 'from jinja2 import Environment as BaseEnvironment', 'from jinja2 import Template', 'from jinja2 import TemplateNotFound', '', 'from .globals import _cv_app', 'from .globals import _cv_request', 'from .globals import current_app', 'from .globals import request', 'from .helpers import stream_with_context', 'from .signals import before_render_template', 'from .signals import template_rendered', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from .app import Flask', '    from .scaffold import Scaffold', '', '', 'def _default_template_ctx_processor() -> t.Dict[str, t.Any]:', '    \"\"\"Default template context processor.  Injects `request`,', '    `session` and `g`.', '    \"\"\"', '    appctx = _cv_app.get(None)', '    reqctx = _cv_request.get(None)', '    rv: t.Dict[str, t.Any] = {}', '    if appctx is not None:', '        rv[\"g\"] = appctx.g', '    if reqctx is not None:', '        rv[\"request\"] = reqctx.request', '        rv[\"session\"] = reqctx.session', '    return rv', '', '', 'class Environment(BaseEnvironment):', '    \"\"\"Works like a regular Jinja2 environment but has some additional', \"    knowledge of how Flask's blueprint works so that it can prepend the\", '    name of the blueprint to referenced templates if necessary.', '    \"\"\"', '', '    def __init__(self, app: \"Flask\", **options: t.Any) -> None:', '        if \"loader\" not in options:', '            options[\"loader\"] = app.create_global_jinja_loader()', '        BaseEnvironment.__init__(self, **options)', '        self.app = app', '', '', 'class DispatchingJinjaLoader(BaseLoader):', '    \"\"\"A loader that looks for templates in the application and all', '    the blueprint folders.', '    \"\"\"', '', '    def __init__(self, app: \"Flask\") -> None:', '        self.app = app', '', '    def get_source(  # type: ignore', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:', '            return self._get_source_explained(environment, template)', '        return self._get_source_fast(environment, template)', '', '    def _get_source_explained(', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        attempts = []', '        rv: t.Optional[t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]]', '        trv: t.Optional[', '            t.Tuple[str, t.Optional[str], t.Optional[t.Callable[[], bool]]]', '        ] = None', '', '        for srcobj, loader in self._iter_loaders(template):', '            try:', '                rv = loader.get_source(environment, template)', '                if trv is None:', '                    trv = rv', '            except TemplateNotFound:', '                rv = None', '            attempts.append((loader, srcobj, rv))', '', '        from .debughelpers import explain_template_loading_attempts', '', '        explain_template_loading_attempts(self.app, template, attempts)', '', '        if trv is not None:', '            return trv', '        raise TemplateNotFound(template)', '', '    def _get_source_fast(', '        self, environment: Environment, template: str', '    ) -> t.Tuple[str, t.Optional[str], t.Optional[t.Callable]]:', '        for _srcobj, loader in self._iter_loaders(template):', '            try:', '                return loader.get_source(environment, template)', '            except TemplateNotFound:', '                continue', '        raise TemplateNotFound(template)', '', '    def _iter_loaders(', '        self, template: str', '    ) -> t.Generator[t.Tuple[\"Scaffold\", BaseLoader], None, None]:', '        loader = self.app.jinja_loader', '        if loader is not None:', '            yield self.app, loader', '', '        for blueprint in self.app.iter_blueprints():', '            loader = blueprint.jinja_loader', '            if loader is not None:', '                yield blueprint, loader', '', '    def list_templates(self) -> t.List[str]:', '        result = set()', '        loader = self.app.jinja_loader', '        if loader is not None:', '            result.update(loader.list_templates())', '', '        for blueprint in self.app.iter_blueprints():', '            loader = blueprint.jinja_loader', '            if loader is not None:', '                for template in loader.list_templates():', '                    result.add(template)', '', '        return list(result)', '', '', 'def _render(app: \"Flask\", template: Template, context: t.Dict[str, t.Any]) -> str:', '    app.update_template_context(context)', '    before_render_template.send(app, template=template, context=context)', '    rv = template.render(context)', '    template_rendered.send(app, template=template, context=context)', '    return rv', '', '', 'def render_template(', '    template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],', '    **context: t.Any,', ') -> str:', '    \"\"\"Render a template by name with the given context.', '', '    :param template_name_or_list: The name of the template to render. If', '        a list is given, the first name to exist will be rendered.', '    :param context: The variables to make available in the template.', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.get_or_select_template(template_name_or_list)', '    return _render(app, template, context)', '', '', 'def render_template_string(source: str, **context: t.Any) -> str:', '    \"\"\"Render a template from the given source string with the given', '    context.', '', '    :param source: The source code of the template to render.', '    :param context: The variables to make available in the template.', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.from_string(source)', '    return _render(app, template, context)', '', '', 'def _stream(', '    app: \"Flask\", template: Template, context: t.Dict[str, t.Any]', ') -> t.Iterator[str]:', '    app.update_template_context(context)', '    before_render_template.send(app, template=template, context=context)', '', '    def generate() -> t.Iterator[str]:', '        yield from template.generate(context)', '        template_rendered.send(app, template=template, context=context)', '', '    rv = generate()', '', '    # If a request context is active, keep it while generating.', '    if request:', '        rv = stream_with_context(rv)', '', '    return rv', '', '', 'def stream_template(', '    template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],', '    **context: t.Any,', ') -> t.Iterator[str]:', '    \"\"\"Render a template by name with the given context as a stream.', '    This returns an iterator of strings, which can be used as a', '    streaming response from a view.', '', '    :param template_name_or_list: The name of the template to render. If', '        a list is given, the first name to exist will be rendered.', '    :param context: The variables to make available in the template.', '', '    .. versionadded:: 2.2', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.get_or_select_template(template_name_or_list)', '    return _stream(app, template, context)', '', '', 'def stream_template_string(source: str, **context: t.Any) -> t.Iterator[str]:', '    \"\"\"Render a template from the given source string with the given', '    context as a stream. This returns an iterator of strings, which can', '    be used as a streaming response from a view.', '', '    :param source: The source code of the template to render.', '    :param context: The variables to make available in the template.', '', '    .. versionadded:: 2.2', '    \"\"\"', '    app = current_app._get_current_object()  # type: ignore[attr-defined]', '    template = app.jinja_env.from_string(source)', '    return _stream(app, template, context)']}, 'cli.py': {'classes': [{'name': 'NoAppException', 'start_line': 28, 'end_line': 29, 'text': ['class NoAppException(click.UsageError):', '    \"\"\"Raised if an application cannot be found or loaded.\"\"\"'], 'methods': []}, {'name': 'ScriptInfo', 'start_line': 266, 'end_line': 331, 'text': ['class ScriptInfo:', '    \"\"\"Helper object to deal with Flask applications.  This is usually not', \"    necessary to interface with as it's used internally in the dispatching\", '    to click.  In future versions of Flask this object will most likely play', \"    a bigger role.  Typically it's created automatically by the\", '    :class:`FlaskGroup` but you can also manually create it and pass it', '    onwards as click object.', '    \"\"\"', '', '    def __init__(', '        self,', '        app_import_path: str | None = None,', '        create_app: t.Callable[..., Flask] | None = None,', '        set_debug_flag: bool = True,', '    ) -> None:', '        #: Optionally the import path for the Flask application.', '        self.app_import_path = app_import_path', '        #: Optionally a function that is passed the script info to create', '        #: the instance of the application.', '        self.create_app = create_app', '        #: A dictionary with arbitrary data that can be associated with', '        #: this script info.', '        self.data: t.Dict[t.Any, t.Any] = {}', '        self.set_debug_flag = set_debug_flag', '        self._loaded_app: Flask | None = None', '', '    def load_app(self) -> Flask:', '        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling', '        this multiple times will just result in the already loaded app to', '        be returned.', '        \"\"\"', '        if self._loaded_app is not None:', '            return self._loaded_app', '', '        if self.create_app is not None:', '            app = self.create_app()', '        else:', '            if self.app_import_path:', '                path, name = (', '                    re.split(r\":(?![\\\\\\\\/])\", self.app_import_path, 1) + [None]', '                )[:2]', '                import_name = prepare_import(path)', '                app = locate_app(import_name, name)', '            else:', '                for path in (\"wsgi.py\", \"app.py\"):', '                    import_name = prepare_import(path)', '                    app = locate_app(import_name, None, raise_if_not_found=False)', '', '                    if app:', '                        break', '', '        if not app:', '            raise NoAppException(', '                \"Could not locate a Flask application. Use the\"', '                \" \\'flask --app\\' option, \\'FLASK_APP\\' environment\"', '                \" variable, or a \\'wsgi.py\\' or \\'app.py\\' file in the\"', '                \" current directory.\"', '            )', '', '        if self.set_debug_flag:', \"            # Update the app's debug flag through the descriptor so that\", '            # other values repopulate as well.', '            app.debug = get_debug_flag()', '', '        self._loaded_app = app', '        return app'], 'methods': [{'name': '__init__', 'start_line': 275, 'end_line': 290, 'text': ['    def __init__(', '        self,', '        app_import_path: str | None = None,', '        create_app: t.Callable[..., Flask] | None = None,', '        set_debug_flag: bool = True,', '    ) -> None:', '        #: Optionally the import path for the Flask application.', '        self.app_import_path = app_import_path', '        #: Optionally a function that is passed the script info to create', '        #: the instance of the application.', '        self.create_app = create_app', '        #: A dictionary with arbitrary data that can be associated with', '        #: this script info.', '        self.data: t.Dict[t.Any, t.Any] = {}', '        self.set_debug_flag = set_debug_flag', '        self._loaded_app: Flask | None = None']}, {'name': 'load_app', 'start_line': 292, 'end_line': 331, 'text': ['    def load_app(self) -> Flask:', '        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling', '        this multiple times will just result in the already loaded app to', '        be returned.', '        \"\"\"', '        if self._loaded_app is not None:', '            return self._loaded_app', '', '        if self.create_app is not None:', '            app = self.create_app()', '        else:', '            if self.app_import_path:', '                path, name = (', '                    re.split(r\":(?![\\\\\\\\/])\", self.app_import_path, 1) + [None]', '                )[:2]', '                import_name = prepare_import(path)', '                app = locate_app(import_name, name)', '            else:', '                for path in (\"wsgi.py\", \"app.py\"):', '                    import_name = prepare_import(path)', '                    app = locate_app(import_name, None, raise_if_not_found=False)', '', '                    if app:', '                        break', '', '        if not app:', '            raise NoAppException(', '                \"Could not locate a Flask application. Use the\"', '                \" \\'flask --app\\' option, \\'FLASK_APP\\' environment\"', '                \" variable, or a \\'wsgi.py\\' or \\'app.py\\' file in the\"', '                \" current directory.\"', '            )', '', '        if self.set_debug_flag:', \"            # Update the app's debug flag through the descriptor so that\", '            # other values repopulate as well.', '            app.debug = get_debug_flag()', '', '        self._loaded_app = app', '        return app']}]}, {'name': 'AppGroup', 'start_line': 362, 'end_line': 390, 'text': ['class AppGroup(click.Group):', '    \"\"\"This works similar to a regular click :class:`~click.Group` but it', '    changes the behavior of the :meth:`command` decorator so that it', '    automatically wraps the functions in :func:`with_appcontext`.', '', '    Not to be confused with :class:`FlaskGroup`.', '    \"\"\"', '', '    def command(self, *args, **kwargs):', '        \"\"\"This works exactly like the method of the same name on a regular', '        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`', \"        unless it's disabled by passing ``with_appcontext=False``.\", '        \"\"\"', '        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)', '', '        def decorator(f):', '            if wrap_for_ctx:', '                f = with_appcontext(f)', '            return click.Group.command(self, *args, **kwargs)(f)', '', '        return decorator', '', '    def group(self, *args, **kwargs):', '        \"\"\"This works exactly like the method of the same name on a regular', '        :class:`click.Group` but it defaults the group class to', '        :class:`AppGroup`.', '        \"\"\"', '        kwargs.setdefault(\"cls\", AppGroup)', '        return click.Group.group(self, *args, **kwargs)'], 'methods': [{'name': 'command', 'start_line': 370, 'end_line': 382, 'text': ['    def command(self, *args, **kwargs):', '        \"\"\"This works exactly like the method of the same name on a regular', '        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`', \"        unless it's disabled by passing ``with_appcontext=False``.\", '        \"\"\"', '        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)', '', '        def decorator(f):', '            if wrap_for_ctx:', '                f = with_appcontext(f)', '            return click.Group.command(self, *args, **kwargs)(f)', '', '        return decorator']}, {'name': 'group', 'start_line': 384, 'end_line': 390, 'text': ['    def group(self, *args, **kwargs):', '        \"\"\"This works exactly like the method of the same name on a regular', '        :class:`click.Group` but it defaults the group class to', '        :class:`AppGroup`.', '        \"\"\"', '        kwargs.setdefault(\"cls\", AppGroup)', '        return click.Group.group(self, *args, **kwargs)']}]}, {'name': 'FlaskGroup', 'start_line': 481, 'end_line': 644, 'text': ['class FlaskGroup(AppGroup):', '    \"\"\"Special subclass of the :class:`AppGroup` group that supports', '    loading more commands from the configured Flask app.  Normally a', '    developer does not have to interface with this class but there are', '    some very advanced use cases for which it makes sense to create an', '    instance of this. see :ref:`custom-scripts`.', '', '    :param add_default_commands: if this is True then the default run and', '        shell commands will be added.', '    :param add_version_option: adds the ``--version`` option.', '    :param create_app: an optional callback that is passed the script info and', '        returns the loaded app.', '    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`', '        files to set environment variables. Will also change the working', '        directory to the directory containing the first file found.', \"    :param set_debug_flag: Set the app's debug flag.\", '', '    .. versionchanged:: 2.2', '        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.', '', '    .. versionchanged:: 2.2', '        An app context is pushed when running ``app.cli`` commands, so', '        ``@with_appcontext`` is no longer required for those commands.', '', '    .. versionchanged:: 1.0', '        If installed, python-dotenv will be used to load environment variables', '        from :file:`.env` and :file:`.flaskenv` files.', '    \"\"\"', '', '    def __init__(', '        self,', '        add_default_commands: bool = True,', '        create_app: t.Callable[..., Flask] | None = None,', '        add_version_option: bool = True,', '        load_dotenv: bool = True,', '        set_debug_flag: bool = True,', '        **extra: t.Any,', '    ) -> None:', '        params = list(extra.pop(\"params\", None) or ())', '        # Processing is done with option callbacks instead of a group', '        # callback. This allows users to make a custom group callback', '        # without losing the behavior. --env-file must come first so', '        # that it is eagerly evaluated before --app.', '        params.extend((_env_file_option, _app_option, _debug_option))', '', '        if add_version_option:', '            params.append(version_option)', '', '        if \"context_settings\" not in extra:', '            extra[\"context_settings\"] = {}', '', '        extra[\"context_settings\"].setdefault(\"auto_envvar_prefix\", \"FLASK\")', '', '        super().__init__(params=params, **extra)', '', '        self.create_app = create_app', '        self.load_dotenv = load_dotenv', '        self.set_debug_flag = set_debug_flag', '', '        if add_default_commands:', '            self.add_command(run_command)', '            self.add_command(shell_command)', '            self.add_command(routes_command)', '', '        self._loaded_plugin_commands = False', '', '    def _load_plugin_commands(self):', '        if self._loaded_plugin_commands:', '            return', '', '        if sys.version_info >= (3, 10):', '            from importlib import metadata', '        else:', '            # Use a backport on Python < 3.10. We technically have', '            # importlib.metadata on 3.8+, but the API changed in 3.10,', '            # so use the backport for consistency.', '            import importlib_metadata as metadata', '', '        for ep in metadata.entry_points(group=\"flask.commands\"):', '            self.add_command(ep.load(), ep.name)', '', '        self._loaded_plugin_commands = True', '', '    def get_command(self, ctx, name):', '        self._load_plugin_commands()', '        # Look up built-in and plugin commands, which should be', '        # available even if the app fails to load.', '        rv = super().get_command(ctx, name)', '', '        if rv is not None:', '            return rv', '', '        info = ctx.ensure_object(ScriptInfo)', '', '        # Look up commands provided by the app, showing an error and', \"        # continuing if the app couldn't be loaded.\", '        try:', '            app = info.load_app()', '        except NoAppException as e:', '            click.secho(f\"Error: {e.format_message()}\\\\n\", err=True, fg=\"red\")', '            return None', '', '        # Push an app context for the loaded app unless it is already', '        # active somehow. This makes the context available to parameter', '        # and command callbacks without needing @with_appcontext.', '        if not current_app or current_app._get_current_object() is not app:', '            ctx.with_resource(app.app_context())', '', '        return app.cli.get_command(ctx, name)', '', '    def list_commands(self, ctx):', '        self._load_plugin_commands()', '        # Start with the built-in and plugin commands.', '        rv = set(super().list_commands(ctx))', '        info = ctx.ensure_object(ScriptInfo)', '', '        # Add commands provided by the app, showing an error and', \"        # continuing if the app couldn't be loaded.\", '        try:', '            rv.update(info.load_app().cli.list_commands(ctx))', '        except NoAppException as e:', \"            # When an app couldn't be loaded, show the error message\", '            # without the traceback.', '            click.secho(f\"Error: {e.format_message()}\\\\n\", err=True, fg=\"red\")', '        except Exception:', '            # When any other errors occurred during loading, show the', '            # full traceback.', '            click.secho(f\"{traceback.format_exc()}\\\\n\", err=True, fg=\"red\")', '', '        return sorted(rv)', '', '    def make_context(', '        self,', '        info_name: str | None,', '        args: list[str],', '        parent: click.Context | None = None,', '        **extra: t.Any,', '    ) -> click.Context:', '        # Set a flag to tell app.run to become a no-op. If app.run was', '        # not in a __name__ == __main__ guard, it would start the server', '        # when importing, blocking whatever command is being called.', '        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"', '', '        # Attempt to load .env and .flask env files. The --env-file', '        # option can cause another file to be loaded.', '        if get_load_dotenv(self.load_dotenv):', '            load_dotenv()', '', '        if \"obj\" not in extra and \"obj\" not in self.context_settings:', '            extra[\"obj\"] = ScriptInfo(', '                create_app=self.create_app, set_debug_flag=self.set_debug_flag', '            )', '', '        return super().make_context(info_name, args, parent=parent, **extra)', '', '    def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:', '        if not args and self.no_args_is_help:', '            # Attempt to load --env-file and --app early in case they', '            # were given as env vars. Otherwise no_args_is_help will not', '            # see commands from app.cli.', '            _env_file_option.handle_parse_result(ctx, {}, [])', '            _app_option.handle_parse_result(ctx, {}, [])', '', '        return super().parse_args(ctx, args)'], 'methods': [{'name': '__init__', 'start_line': 510, 'end_line': 545, 'text': ['    def __init__(', '        self,', '        add_default_commands: bool = True,', '        create_app: t.Callable[..., Flask] | None = None,', '        add_version_option: bool = True,', '        load_dotenv: bool = True,', '        set_debug_flag: bool = True,', '        **extra: t.Any,', '    ) -> None:', '        params = list(extra.pop(\"params\", None) or ())', '        # Processing is done with option callbacks instead of a group', '        # callback. This allows users to make a custom group callback', '        # without losing the behavior. --env-file must come first so', '        # that it is eagerly evaluated before --app.', '        params.extend((_env_file_option, _app_option, _debug_option))', '', '        if add_version_option:', '            params.append(version_option)', '', '        if \"context_settings\" not in extra:', '            extra[\"context_settings\"] = {}', '', '        extra[\"context_settings\"].setdefault(\"auto_envvar_prefix\", \"FLASK\")', '', '        super().__init__(params=params, **extra)', '', '        self.create_app = create_app', '        self.load_dotenv = load_dotenv', '        self.set_debug_flag = set_debug_flag', '', '        if add_default_commands:', '            self.add_command(run_command)', '            self.add_command(shell_command)', '            self.add_command(routes_command)', '', '        self._loaded_plugin_commands = False']}, {'name': '_load_plugin_commands', 'start_line': 547, 'end_line': 562, 'text': ['    def _load_plugin_commands(self):', '        if self._loaded_plugin_commands:', '            return', '', '        if sys.version_info >= (3, 10):', '            from importlib import metadata', '        else:', '            # Use a backport on Python < 3.10. We technically have', '            # importlib.metadata on 3.8+, but the API changed in 3.10,', '            # so use the backport for consistency.', '            import importlib_metadata as metadata', '', '        for ep in metadata.entry_points(group=\"flask.commands\"):', '            self.add_command(ep.load(), ep.name)', '', '        self._loaded_plugin_commands = True']}, {'name': 'get_command', 'start_line': 564, 'end_line': 589, 'text': ['    def get_command(self, ctx, name):', '        self._load_plugin_commands()', '        # Look up built-in and plugin commands, which should be', '        # available even if the app fails to load.', '        rv = super().get_command(ctx, name)', '', '        if rv is not None:', '            return rv', '', '        info = ctx.ensure_object(ScriptInfo)', '', '        # Look up commands provided by the app, showing an error and', \"        # continuing if the app couldn't be loaded.\", '        try:', '            app = info.load_app()', '        except NoAppException as e:', '            click.secho(f\"Error: {e.format_message()}\\\\n\", err=True, fg=\"red\")', '            return None', '', '        # Push an app context for the loaded app unless it is already', '        # active somehow. This makes the context available to parameter', '        # and command callbacks without needing @with_appcontext.', '        if not current_app or current_app._get_current_object() is not app:', '            ctx.with_resource(app.app_context())', '', '        return app.cli.get_command(ctx, name)']}, {'name': 'list_commands', 'start_line': 591, 'end_line': 610, 'text': ['    def list_commands(self, ctx):', '        self._load_plugin_commands()', '        # Start with the built-in and plugin commands.', '        rv = set(super().list_commands(ctx))', '        info = ctx.ensure_object(ScriptInfo)', '', '        # Add commands provided by the app, showing an error and', \"        # continuing if the app couldn't be loaded.\", '        try:', '            rv.update(info.load_app().cli.list_commands(ctx))', '        except NoAppException as e:', \"            # When an app couldn't be loaded, show the error message\", '            # without the traceback.', '            click.secho(f\"Error: {e.format_message()}\\\\n\", err=True, fg=\"red\")', '        except Exception:', '            # When any other errors occurred during loading, show the', '            # full traceback.', '            click.secho(f\"{traceback.format_exc()}\\\\n\", err=True, fg=\"red\")', '', '        return sorted(rv)']}, {'name': 'make_context', 'start_line': 612, 'end_line': 634, 'text': ['    def make_context(', '        self,', '        info_name: str | None,', '        args: list[str],', '        parent: click.Context | None = None,', '        **extra: t.Any,', '    ) -> click.Context:', '        # Set a flag to tell app.run to become a no-op. If app.run was', '        # not in a __name__ == __main__ guard, it would start the server', '        # when importing, blocking whatever command is being called.', '        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"', '', '        # Attempt to load .env and .flask env files. The --env-file', '        # option can cause another file to be loaded.', '        if get_load_dotenv(self.load_dotenv):', '            load_dotenv()', '', '        if \"obj\" not in extra and \"obj\" not in self.context_settings:', '            extra[\"obj\"] = ScriptInfo(', '                create_app=self.create_app, set_debug_flag=self.set_debug_flag', '            )', '', '        return super().make_context(info_name, args, parent=parent, **extra)']}, {'name': 'parse_args', 'start_line': 636, 'end_line': 644, 'text': ['    def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:', '        if not args and self.no_args_is_help:', '            # Attempt to load --env-file and --app early in case they', '            # were given as env vars. Otherwise no_args_is_help will not', '            # see commands from app.cli.', '            _env_file_option.handle_parse_result(ctx, {}, [])', '            _app_option.handle_parse_result(ctx, {}, [])', '', '        return super().parse_args(ctx, args)']}]}, {'name': 'CertParamType', 'start_line': 729, 'end_line': 772, 'text': ['class CertParamType(click.ParamType):', '    \"\"\"Click option type for the ``--cert`` option. Allows either an', \"    existing file, the string ``'adhoc'``, or an import for a\", '    :class:`~ssl.SSLContext` object.', '    \"\"\"', '', '    name = \"path\"', '', '    def __init__(self):', '        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)', '', '    def convert(self, value, param, ctx):', '        try:', '            import ssl', '        except ImportError:', '            raise click.BadParameter(', '                \\'Using \"--cert\" requires Python to be compiled with SSL support.\\',', '                ctx,', '                param,', '            ) from None', '', '        try:', '            return self.path_type(value, param, ctx)', '        except click.BadParameter:', '            value = click.STRING(value, param, ctx).lower()', '', '            if value == \"adhoc\":', '                try:', '                    import cryptography  # noqa: F401', '                except ImportError:', '                    raise click.BadParameter(', '                        \"Using ad-hoc certificates requires the cryptography library.\",', '                        ctx,', '                        param,', '                    ) from None', '', '                return value', '', '            obj = import_string(value, silent=True)', '', '            if isinstance(obj, ssl.SSLContext):', '                return obj', '', '            raise'], 'methods': [{'name': '__init__', 'start_line': 737, 'end_line': 738, 'text': ['    def __init__(self):', '        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)']}, {'name': 'convert', 'start_line': 740, 'end_line': 772, 'text': ['    def convert(self, value, param, ctx):', '        try:', '            import ssl', '        except ImportError:', '            raise click.BadParameter(', '                \\'Using \"--cert\" requires Python to be compiled with SSL support.\\',', '                ctx,', '                param,', '            ) from None', '', '        try:', '            return self.path_type(value, param, ctx)', '        except click.BadParameter:', '            value = click.STRING(value, param, ctx).lower()', '', '            if value == \"adhoc\":', '                try:', '                    import cryptography  # noqa: F401', '                except ImportError:', '                    raise click.BadParameter(', '                        \"Using ad-hoc certificates requires the cryptography library.\",', '                        ctx,', '                        param,', '                    ) from None', '', '                return value', '', '            obj = import_string(value, silent=True)', '', '            if isinstance(obj, ssl.SSLContext):', '                return obj', '', '            raise']}]}, {'name': 'SeparatedPathType', 'start_line': 812, 'end_line': 821, 'text': ['class SeparatedPathType(click.Path):', '    \"\"\"Click option type that accepts a list of values separated by the', \"    OS's path separator (``:``, ``;`` on Windows). Each value is\", '    validated as a :class:`click.Path` type.', '    \"\"\"', '', '    def convert(self, value, param, ctx):', '        items = self.split_envvar_value(value)', '        super_convert = super().convert', '        return [super_convert(item, param, ctx) for item in items]'], 'methods': [{'name': 'convert', 'start_line': 818, 'end_line': 821, 'text': ['    def convert(self, value, param, ctx):', '        items = self.split_envvar_value(value)', '        super_convert = super().convert', '        return [super_convert(item, param, ctx) for item in items]']}]}], 'functions': [{'name': 'find_best_app', 'start_line': 32, 'end_line': 82, 'text': ['def find_best_app(module):', '    \"\"\"Given a module instance this tries to find the best possible', '    application in the module or raises an exception.', '    \"\"\"', '    from . import Flask', '', '    # Search for the most common names first.', '    for attr_name in (\"app\", \"application\"):', '        app = getattr(module, attr_name, None)', '', '        if isinstance(app, Flask):', '            return app', '', '    # Otherwise find the only object that is a Flask instance.', '    matches = [v for v in module.__dict__.values() if isinstance(v, Flask)]', '', '    if len(matches) == 1:', '        return matches[0]', '    elif len(matches) > 1:', '        raise NoAppException(', '            \"Detected multiple Flask applications in module\"', '            f\" \\'{module.__name__}\\'. Use \\'{module.__name__}:name\\'\"', '            \" to specify the correct one.\"', '        )', '', '    # Search for app factory functions.', '    for attr_name in (\"create_app\", \"make_app\"):', '        app_factory = getattr(module, attr_name, None)', '', '        if inspect.isfunction(app_factory):', '            try:', '                app = app_factory()', '', '                if isinstance(app, Flask):', '                    return app', '            except TypeError as e:', '                if not _called_with_wrong_args(app_factory):', '                    raise', '', '                raise NoAppException(', '                    f\"Detected factory \\'{attr_name}\\' in module \\'{module.__name__}\\',\"', '                    \" but could not call it without arguments. Use\"', '                    f\" \\'{module.__name__}:{attr_name}(args)\\'\"', '                    \" to specify arguments.\"', '                ) from e', '', '    raise NoAppException(', '        \"Failed to find Flask application or factory in module\"', '        f\" \\'{module.__name__}\\'. Use \\'{module.__name__}:name\\'\"', '        \" to specify one.\"', '    )']}, {'name': '_called_with_wrong_args', 'start_line': 85, 'end_line': 108, 'text': ['def _called_with_wrong_args(f):', '    \"\"\"Check whether calling a function raised a ``TypeError`` because', '    the call failed or because something in the factory raised the', '    error.', '', '    :param f: The function that was called.', '    :return: ``True`` if the call failed.', '    \"\"\"', '    tb = sys.exc_info()[2]', '', '    try:', '        while tb is not None:', '            if tb.tb_frame.f_code is f.__code__:', '                # In the function, it was called successfully.', '                return False', '', '            tb = tb.tb_next', '', \"        # Didn't reach the function.\", '        return True', '    finally:', '        # Delete tb to break a circular reference.', '        # https://docs.python.org/2/library/sys.html#sys.exc_info', '        del tb']}, {'name': 'find_app_by_string', 'start_line': 111, 'end_line': 184, 'text': ['def find_app_by_string(module, app_name):', '    \"\"\"Check if the given string is a variable name or a function. Call', '    a function to get the app instance, or return the variable directly.', '    \"\"\"', '    from . import Flask', '', \"    # Parse app_name as a single expression to determine if it's a valid\", '    # attribute name or function call.', '    try:', '        expr = ast.parse(app_name.strip(), mode=\"eval\").body', '    except SyntaxError:', '        raise NoAppException(', '            f\"Failed to parse {app_name!r} as an attribute name or function call.\"', '        ) from None', '', '    if isinstance(expr, ast.Name):', '        name = expr.id', '        args = []', '        kwargs = {}', '    elif isinstance(expr, ast.Call):', '        # Ensure the function name is an attribute name only.', '        if not isinstance(expr.func, ast.Name):', '            raise NoAppException(', '                f\"Function reference must be a simple name: {app_name!r}.\"', '            )', '', '        name = expr.func.id', '', '        # Parse the positional and keyword arguments as literals.', '        try:', '            args = [ast.literal_eval(arg) for arg in expr.args]', '            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expr.keywords}', '        except ValueError:', '            # literal_eval gives cryptic error messages, show a generic', '            # message with the full expression instead.', '            raise NoAppException(', '                f\"Failed to parse arguments as literal values: {app_name!r}.\"', '            ) from None', '    else:', '        raise NoAppException(', '            f\"Failed to parse {app_name!r} as an attribute name or function call.\"', '        )', '', '    try:', '        attr = getattr(module, name)', '    except AttributeError as e:', '        raise NoAppException(', '            f\"Failed to find attribute {name!r} in {module.__name__!r}.\"', '        ) from e', '', '    # If the attribute is a function, call it with any args and kwargs', '    # to get the real application.', '    if inspect.isfunction(attr):', '        try:', '            app = attr(*args, **kwargs)', '        except TypeError as e:', '            if not _called_with_wrong_args(attr):', '                raise', '', '            raise NoAppException(', '                f\"The factory {app_name!r} in module\"', '                f\" {module.__name__!r} could not be called with the\"', '                \" specified arguments.\"', '            ) from e', '    else:', '        app = attr', '', '    if isinstance(app, Flask):', '        return app', '', '    raise NoAppException(', '        \"A valid Flask application was not obtained from\"', '        f\" \\'{module.__name__}:{app_name}\\'.\"', '    )']}, {'name': 'prepare_import', 'start_line': 187, 'end_line': 213, 'text': ['def prepare_import(path):', '    \"\"\"Given a filename this will try to calculate the python path, add it', '    to the search path and return the actual module name that is expected.', '    \"\"\"', '    path = os.path.realpath(path)', '', '    fname, ext = os.path.splitext(path)', '    if ext == \".py\":', '        path = fname', '', '    if os.path.basename(path) == \"__init__\":', '        path = os.path.dirname(path)', '', '    module_name = []', '', '    # move up until outside package structure (no __init__.py)', '    while True:', '        path, name = os.path.split(path)', '        module_name.append(name)', '', '        if not os.path.exists(os.path.join(path, \"__init__.py\")):', '            break', '', '    if sys.path[0] != path:', '        sys.path.insert(0, path)', '', '    return \".\".join(module_name[::-1])']}, {'name': 'locate_app', 'start_line': 216, 'end_line': 237, 'text': ['def locate_app(module_name, app_name, raise_if_not_found=True):', '    try:', '        __import__(module_name)', '    except ImportError:', '        # Reraise the ImportError if it occurred within the imported module.', '        # Determine this by checking whether the trace has a depth > 1.', '        if sys.exc_info()[2].tb_next:', '            raise NoAppException(', '                f\"While importing {module_name!r}, an ImportError was\"', '                f\" raised:\\\\n\\\\n{traceback.format_exc()}\"', '            ) from None', '        elif raise_if_not_found:', '            raise NoAppException(f\"Could not import {module_name!r}.\") from None', '        else:', '            return', '', '    module = sys.modules[module_name]', '', '    if app_name is None:', '        return find_best_app(module)', '    else:', '        return find_app_by_string(module, app_name)']}, {'name': 'get_version', 'start_line': 240, 'end_line': 253, 'text': ['def get_version(ctx, param, value):', '    if not value or ctx.resilient_parsing:', '        return', '', '    import werkzeug', '    from . import __version__', '', '    click.echo(', '        f\"Python {platform.python_version()}\\\\n\"', '        f\"Flask {__version__}\\\\n\"', '        f\"Werkzeug {werkzeug.__version__}\",', '        color=ctx.color,', '    )', '    ctx.exit()']}, {'name': 'with_appcontext', 'start_line': 337, 'end_line': 359, 'text': ['def with_appcontext(f):', '    \"\"\"Wraps a callback so that it\\'s guaranteed to be executed with the', \"    script's application context.\", '', '    Custom commands (and their options) registered under ``app.cli`` or', '    ``blueprint.cli`` will always have an app context available, this', '    decorator is not required in that case.', '', '    .. versionchanged:: 2.2', '        The app context is active for subcommands as well as the', '        decorated callback. The app context is always available to', '        ``app.cli`` command and parameter callbacks.', '    \"\"\"', '', '    @click.pass_context', '    def decorator(__ctx, *args, **kwargs):', '        if not current_app:', '            app = __ctx.ensure_object(ScriptInfo).load_app()', '            __ctx.with_resource(app.app_context())', '', '        return __ctx.invoke(f, *args, **kwargs)', '', '    return update_wrapper(decorator, f)']}, {'name': '_set_app', 'start_line': 393, 'end_line': 399, 'text': ['def _set_app(ctx: click.Context, param: click.Option, value: str | None) -> str | None:', '    if value is None:', '        return None', '', '    info = ctx.ensure_object(ScriptInfo)', '    info.app_import_path = value', '    return value']}, {'name': '_set_debug', 'start_line': 421, 'end_line': 435, 'text': ['def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:', \"    # If the flag isn't provided, it will default to False. Don't use\", '    # that, let debug be set by env in that case.', '    source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]', '', '    if source is not None and source in (', '        ParameterSource.DEFAULT,', '        ParameterSource.DEFAULT_MAP,', '    ):', '        return None', '', '    # Set with env var instead of ScriptInfo.load so that it can be', '    # accessed early during a factory function.', '    os.environ[\"FLASK_DEBUG\"] = \"1\" if value else \"0\"', '    return value']}, {'name': '_env_file_callback', 'start_line': 446, 'end_line': 466, 'text': ['def _env_file_callback(', '    ctx: click.Context, param: click.Option, value: str | None', ') -> str | None:', '    if value is None:', '        return None', '', '    import importlib', '', '    try:', '        importlib.import_module(\"dotenv\")', '    except ImportError:', '        raise click.BadParameter(', '            \"python-dotenv must be installed to load an env file.\",', '            ctx=ctx,', '            param=param,', '        ) from None', '', \"    # Don't check FLASK_SKIP_DOTENV, that only disables automatically\", '    # loading .env and .flaskenv files.', '    load_dotenv(value)', '    return value']}, {'name': '_path_is_ancestor', 'start_line': 647, 'end_line': 651, 'text': ['def _path_is_ancestor(path, other):', '    \"\"\"Take ``other`` and remove the length of ``path`` from it. Then join it', '    to ``path``. If it is the original value, ``path`` is an ancestor of', '    ``other``.\"\"\"', '    return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other']}, {'name': 'load_dotenv', 'start_line': 654, 'end_line': 712, 'text': ['def load_dotenv(path: str | os.PathLike | None = None) -> bool:', '    \"\"\"Load \"dotenv\" files in order of precedence to set environment variables.', '', '    If an env var is already set it is not overwritten, so earlier files in the', '    list are preferred over later files.', '', '    This is a no-op if `python-dotenv`_ is not installed.', '', '    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme', '', '    :param path: Load the file at this location instead of searching.', '    :return: ``True`` if a file was loaded.', '', '    .. versionchanged:: 2.0', '        The current directory is not changed to the location of the', '        loaded file.', '', '    .. versionchanged:: 2.0', '        When loading the env files, set the default encoding to UTF-8.', '', '    .. versionchanged:: 1.1.0', '        Returns ``False`` when python-dotenv is not installed, or when', \"        the given path isn't a file.\", '', '    .. versionadded:: 1.0', '    \"\"\"', '    try:', '        import dotenv', '    except ImportError:', '        if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):', '            click.secho(', '                \" * Tip: There are .env or .flaskenv files present.\"', '                \\' Do \"pip install python-dotenv\" to use them.\\',', '                fg=\"yellow\",', '                err=True,', '            )', '', '        return False', '', \"    # Always return after attempting to load a given path, don't load\", '    # the default files.', '    if path is not None:', '        if os.path.isfile(path):', '            return dotenv.load_dotenv(path, encoding=\"utf-8\")', '', '        return False', '', '    loaded = False', '', '    for name in (\".env\", \".flaskenv\"):', '        path = dotenv.find_dotenv(name, usecwd=True)', '', '        if not path:', '            continue', '', '        dotenv.load_dotenv(path, encoding=\"utf-8\")', '        loaded = True', '', '    return loaded  # True if at least one file was located and loaded.']}, {'name': 'show_server_banner', 'start_line': 715, 'end_line': 726, 'text': ['def show_server_banner(debug, app_import_path):', '    \"\"\"Show extra startup messages the first time the server is run,', '    ignoring the reloader.', '    \"\"\"', '    if is_running_from_reloader():', '        return', '', '    if app_import_path is not None:', '        click.echo(f\" * Serving Flask app \\'{app_import_path}\\'\")', '', '    if debug is not None:', '        click.echo(f\" * Debug mode: {\\'on\\' if debug else \\'off\\'}\")']}, {'name': '_validate_key', 'start_line': 775, 'end_line': 809, 'text': ['def _validate_key(ctx, param, value):', '    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.', '    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.', '    \"\"\"', '    cert = ctx.params.get(\"cert\")', '    is_adhoc = cert == \"adhoc\"', '', '    try:', '        import ssl', '    except ImportError:', '        is_context = False', '    else:', '        is_context = isinstance(cert, ssl.SSLContext)', '', '    if value is not None:', '        if is_adhoc:', '            raise click.BadParameter(', '                \\'When \"--cert\" is \"adhoc\", \"--key\" is not used.\\', ctx, param', '            )', '', '        if is_context:', '            raise click.BadParameter(', '                \\'When \"--cert\" is an SSLContext object, \"--key is not used.\\', ctx, param', '            )', '', '        if not cert:', '            raise click.BadParameter(\\'\"--cert\" must also be specified.\\', ctx, param)', '', '        ctx.params[\"cert\"] = cert, value', '', '    else:', '        if cert and not (is_adhoc or is_context):', '            raise click.BadParameter(\\'Required when using \"--cert\".\\', ctx, param)', '', '    return value']}, {'name': 'run_command', 'start_line': 877, 'end_line': 933, 'text': ['def run_command(', '    info,', '    host,', '    port,', '    reload,', '    debugger,', '    with_threads,', '    cert,', '    extra_files,', '    exclude_patterns,', '):', '    \"\"\"Run a local development server.', '', '    This server is for development purposes only. It does not provide', '    the stability, security, or performance of production WSGI servers.', '', \"    The reloader and debugger are enabled by default with the '--debug'\", '    option.', '    \"\"\"', '    try:', '        app = info.load_app()', '    except Exception as e:', '        if is_running_from_reloader():', '            # When reloading, print out the error immediately, but raise', '            # it later so the debugger or server can handle it.', '            traceback.print_exc()', '            err = e', '', '            def app(environ, start_response):', '                raise err from None', '', '        else:', '            # When not reloading, raise the error immediately so the', '            # command fails.', '            raise e from None', '', '    debug = get_debug_flag()', '', '    if reload is None:', '        reload = debug', '', '    if debugger is None:', '        debugger = debug', '', '    show_server_banner(debug, info.app_import_path)', '', '    run_simple(', '        host,', '        port,', '        app,', '        use_reloader=reload,', '        use_debugger=debugger,', '        threaded=with_threads,', '        ssl_context=cert,', '        extra_files=extra_files,', '        exclude_patterns=exclude_patterns,', '    )']}, {'name': 'shell_command', 'start_line': 941, 'end_line': 985, 'text': ['def shell_command() -> None:', '    \"\"\"Run an interactive Python shell in the context of a given', '    Flask application.  The application will populate the default', '    namespace of this shell according to its configuration.', '', '    This is useful for executing small snippets of management code', '    without having to manually configure the application.', '    \"\"\"', '    import code', '', '    banner = (', '        f\"Python {sys.version} on {sys.platform}\\\\n\"', '        f\"App: {current_app.import_name}\\\\n\"', '        f\"Instance: {current_app.instance_path}\"', '    )', '    ctx: dict = {}', '', '    # Support the regular Python interpreter startup script if someone', '    # is using it.', '    startup = os.environ.get(\"PYTHONSTARTUP\")', '    if startup and os.path.isfile(startup):', '        with open(startup) as f:', '            eval(compile(f.read(), startup, \"exec\"), ctx)', '', '    ctx.update(current_app.make_shell_context())', '', '    # Site, customize, or startup script can set a hook to call when', '    # entering interactive mode. The default one sets up readline with', '    # tab and history completion.', '    interactive_hook = getattr(sys, \"__interactivehook__\", None)', '', '    if interactive_hook is not None:', '        try:', '            import readline', '            from rlcompleter import Completer', '        except ImportError:', '            pass', '        else:', '            # rlcompleter uses __main__.__dict__ by default, which is', '            # flask.__main__. Use the shell context instead.', '            readline.set_completer(Completer(ctx).complete)', '', '        interactive_hook()', '', '    code.interact(banner=banner, local=ctx)']}, {'name': 'routes_command', 'start_line': 1001, 'end_line': 1034, 'text': ['def routes_command(sort: str, all_methods: bool) -> None:', '    \"\"\"Show all registered routes with endpoints and methods.\"\"\"', '', '    rules = list(current_app.url_map.iter_rules())', '    if not rules:', '        click.echo(\"No routes were registered.\")', '        return', '', '    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))', '', '    if sort in (\"endpoint\", \"rule\"):', '        rules = sorted(rules, key=attrgetter(sort))', '    elif sort == \"methods\":', '        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore', '', '    rule_methods = [', '        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore', '        for rule in rules', '    ]', '', '    headers = (\"Endpoint\", \"Methods\", \"Rule\")', '    widths = (', '        max(len(rule.endpoint) for rule in rules),', '        max(len(methods) for methods in rule_methods),', '        max(len(rule.rule) for rule in rules),', '    )', '    widths = [max(len(h), w) for h, w in zip(headers, widths)]', '    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)', '', '    click.echo(row.format(*headers).strip())', '    click.echo(row.format(*(\"-\" * width for width in widths)))', '', '    for rule, methods in zip(rules, rule_methods):', '        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())']}, {'name': 'main', 'start_line': 1049, 'end_line': 1050, 'text': ['def main() -> None:', '    cli.main()']}, {'name': 'decorator', 'start_line': 352, 'end_line': 357, 'text': ['    def decorator(__ctx, *args, **kwargs):', '        if not current_app:', '            app = __ctx.ensure_object(ScriptInfo).load_app()', '            __ctx.with_resource(app.app_context())', '', '        return __ctx.invoke(f, *args, **kwargs)']}, {'name': 'decorator', 'start_line': 377, 'end_line': 380, 'text': ['        def decorator(f):', '            if wrap_for_ctx:', '                f = with_appcontext(f)', '            return click.Group.command(self, *args, **kwargs)(f)']}, {'name': 'app', 'start_line': 905, 'end_line': 906, 'text': ['            def app(environ, start_response):', '                raise err from None']}], 'text': ['from __future__ import annotations', '', 'import ast', 'import inspect', 'import os', 'import platform', 'import re', 'import sys', 'import traceback', 'import typing as t', 'from functools import update_wrapper', 'from operator import attrgetter', '', 'import click', 'from click.core import ParameterSource', 'from werkzeug import run_simple', 'from werkzeug.serving import is_running_from_reloader', 'from werkzeug.utils import import_string', '', 'from .globals import current_app', 'from .helpers import get_debug_flag', 'from .helpers import get_load_dotenv', '', 'if t.TYPE_CHECKING:', '    from .app import Flask', '', '', 'class NoAppException(click.UsageError):', '    \"\"\"Raised if an application cannot be found or loaded.\"\"\"', '', '', 'def find_best_app(module):', '    \"\"\"Given a module instance this tries to find the best possible', '    application in the module or raises an exception.', '    \"\"\"', '    from . import Flask', '', '    # Search for the most common names first.', '    for attr_name in (\"app\", \"application\"):', '        app = getattr(module, attr_name, None)', '', '        if isinstance(app, Flask):', '            return app', '', '    # Otherwise find the only object that is a Flask instance.', '    matches = [v for v in module.__dict__.values() if isinstance(v, Flask)]', '', '    if len(matches) == 1:', '        return matches[0]', '    elif len(matches) > 1:', '        raise NoAppException(', '            \"Detected multiple Flask applications in module\"', '            f\" \\'{module.__name__}\\'. Use \\'{module.__name__}:name\\'\"', '            \" to specify the correct one.\"', '        )', '', '    # Search for app factory functions.', '    for attr_name in (\"create_app\", \"make_app\"):', '        app_factory = getattr(module, attr_name, None)', '', '        if inspect.isfunction(app_factory):', '            try:', '                app = app_factory()', '', '                if isinstance(app, Flask):', '                    return app', '            except TypeError as e:', '                if not _called_with_wrong_args(app_factory):', '                    raise', '', '                raise NoAppException(', '                    f\"Detected factory \\'{attr_name}\\' in module \\'{module.__name__}\\',\"', '                    \" but could not call it without arguments. Use\"', '                    f\" \\'{module.__name__}:{attr_name}(args)\\'\"', '                    \" to specify arguments.\"', '                ) from e', '', '    raise NoAppException(', '        \"Failed to find Flask application or factory in module\"', '        f\" \\'{module.__name__}\\'. Use \\'{module.__name__}:name\\'\"', '        \" to specify one.\"', '    )', '', '', 'def _called_with_wrong_args(f):', '    \"\"\"Check whether calling a function raised a ``TypeError`` because', '    the call failed or because something in the factory raised the', '    error.', '', '    :param f: The function that was called.', '    :return: ``True`` if the call failed.', '    \"\"\"', '    tb = sys.exc_info()[2]', '', '    try:', '        while tb is not None:', '            if tb.tb_frame.f_code is f.__code__:', '                # In the function, it was called successfully.', '                return False', '', '            tb = tb.tb_next', '', \"        # Didn't reach the function.\", '        return True', '    finally:', '        # Delete tb to break a circular reference.', '        # https://docs.python.org/2/library/sys.html#sys.exc_info', '        del tb', '', '', 'def find_app_by_string(module, app_name):', '    \"\"\"Check if the given string is a variable name or a function. Call', '    a function to get the app instance, or return the variable directly.', '    \"\"\"', '    from . import Flask', '', \"    # Parse app_name as a single expression to determine if it's a valid\", '    # attribute name or function call.', '    try:', '        expr = ast.parse(app_name.strip(), mode=\"eval\").body', '    except SyntaxError:', '        raise NoAppException(', '            f\"Failed to parse {app_name!r} as an attribute name or function call.\"', '        ) from None', '', '    if isinstance(expr, ast.Name):', '        name = expr.id', '        args = []', '        kwargs = {}', '    elif isinstance(expr, ast.Call):', '        # Ensure the function name is an attribute name only.', '        if not isinstance(expr.func, ast.Name):', '            raise NoAppException(', '                f\"Function reference must be a simple name: {app_name!r}.\"', '            )', '', '        name = expr.func.id', '', '        # Parse the positional and keyword arguments as literals.', '        try:', '            args = [ast.literal_eval(arg) for arg in expr.args]', '            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expr.keywords}', '        except ValueError:', '            # literal_eval gives cryptic error messages, show a generic', '            # message with the full expression instead.', '            raise NoAppException(', '                f\"Failed to parse arguments as literal values: {app_name!r}.\"', '            ) from None', '    else:', '        raise NoAppException(', '            f\"Failed to parse {app_name!r} as an attribute name or function call.\"', '        )', '', '    try:', '        attr = getattr(module, name)', '    except AttributeError as e:', '        raise NoAppException(', '            f\"Failed to find attribute {name!r} in {module.__name__!r}.\"', '        ) from e', '', '    # If the attribute is a function, call it with any args and kwargs', '    # to get the real application.', '    if inspect.isfunction(attr):', '        try:', '            app = attr(*args, **kwargs)', '        except TypeError as e:', '            if not _called_with_wrong_args(attr):', '                raise', '', '            raise NoAppException(', '                f\"The factory {app_name!r} in module\"', '                f\" {module.__name__!r} could not be called with the\"', '                \" specified arguments.\"', '            ) from e', '    else:', '        app = attr', '', '    if isinstance(app, Flask):', '        return app', '', '    raise NoAppException(', '        \"A valid Flask application was not obtained from\"', '        f\" \\'{module.__name__}:{app_name}\\'.\"', '    )', '', '', 'def prepare_import(path):', '    \"\"\"Given a filename this will try to calculate the python path, add it', '    to the search path and return the actual module name that is expected.', '    \"\"\"', '    path = os.path.realpath(path)', '', '    fname, ext = os.path.splitext(path)', '    if ext == \".py\":', '        path = fname', '', '    if os.path.basename(path) == \"__init__\":', '        path = os.path.dirname(path)', '', '    module_name = []', '', '    # move up until outside package structure (no __init__.py)', '    while True:', '        path, name = os.path.split(path)', '        module_name.append(name)', '', '        if not os.path.exists(os.path.join(path, \"__init__.py\")):', '            break', '', '    if sys.path[0] != path:', '        sys.path.insert(0, path)', '', '    return \".\".join(module_name[::-1])', '', '', 'def locate_app(module_name, app_name, raise_if_not_found=True):', '    try:', '        __import__(module_name)', '    except ImportError:', '        # Reraise the ImportError if it occurred within the imported module.', '        # Determine this by checking whether the trace has a depth > 1.', '        if sys.exc_info()[2].tb_next:', '            raise NoAppException(', '                f\"While importing {module_name!r}, an ImportError was\"', '                f\" raised:\\\\n\\\\n{traceback.format_exc()}\"', '            ) from None', '        elif raise_if_not_found:', '            raise NoAppException(f\"Could not import {module_name!r}.\") from None', '        else:', '            return', '', '    module = sys.modules[module_name]', '', '    if app_name is None:', '        return find_best_app(module)', '    else:', '        return find_app_by_string(module, app_name)', '', '', 'def get_version(ctx, param, value):', '    if not value or ctx.resilient_parsing:', '        return', '', '    import werkzeug', '    from . import __version__', '', '    click.echo(', '        f\"Python {platform.python_version()}\\\\n\"', '        f\"Flask {__version__}\\\\n\"', '        f\"Werkzeug {werkzeug.__version__}\",', '        color=ctx.color,', '    )', '    ctx.exit()', '', '', 'version_option = click.Option(', '    [\"--version\"],', '    help=\"Show the Flask version.\",', '    expose_value=False,', '    callback=get_version,', '    is_flag=True,', '    is_eager=True,', ')', '', '', 'class ScriptInfo:', '    \"\"\"Helper object to deal with Flask applications.  This is usually not', \"    necessary to interface with as it's used internally in the dispatching\", '    to click.  In future versions of Flask this object will most likely play', \"    a bigger role.  Typically it's created automatically by the\", '    :class:`FlaskGroup` but you can also manually create it and pass it', '    onwards as click object.', '    \"\"\"', '', '    def __init__(', '        self,', '        app_import_path: str | None = None,', '        create_app: t.Callable[..., Flask] | None = None,', '        set_debug_flag: bool = True,', '    ) -> None:', '        #: Optionally the import path for the Flask application.', '        self.app_import_path = app_import_path', '        #: Optionally a function that is passed the script info to create', '        #: the instance of the application.', '        self.create_app = create_app', '        #: A dictionary with arbitrary data that can be associated with', '        #: this script info.', '        self.data: t.Dict[t.Any, t.Any] = {}', '        self.set_debug_flag = set_debug_flag', '        self._loaded_app: Flask | None = None', '', '    def load_app(self) -> Flask:', '        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling', '        this multiple times will just result in the already loaded app to', '        be returned.', '        \"\"\"', '        if self._loaded_app is not None:', '            return self._loaded_app', '', '        if self.create_app is not None:', '            app = self.create_app()', '        else:', '            if self.app_import_path:', '                path, name = (', '                    re.split(r\":(?![\\\\\\\\/])\", self.app_import_path, 1) + [None]', '                )[:2]', '                import_name = prepare_import(path)', '                app = locate_app(import_name, name)', '            else:', '                for path in (\"wsgi.py\", \"app.py\"):', '                    import_name = prepare_import(path)', '                    app = locate_app(import_name, None, raise_if_not_found=False)', '', '                    if app:', '                        break', '', '        if not app:', '            raise NoAppException(', '                \"Could not locate a Flask application. Use the\"', '                \" \\'flask --app\\' option, \\'FLASK_APP\\' environment\"', '                \" variable, or a \\'wsgi.py\\' or \\'app.py\\' file in the\"', '                \" current directory.\"', '            )', '', '        if self.set_debug_flag:', \"            # Update the app's debug flag through the descriptor so that\", '            # other values repopulate as well.', '            app.debug = get_debug_flag()', '', '        self._loaded_app = app', '        return app', '', '', 'pass_script_info = click.make_pass_decorator(ScriptInfo, ensure=True)', '', '', 'def with_appcontext(f):', '    \"\"\"Wraps a callback so that it\\'s guaranteed to be executed with the', \"    script's application context.\", '', '    Custom commands (and their options) registered under ``app.cli`` or', '    ``blueprint.cli`` will always have an app context available, this', '    decorator is not required in that case.', '', '    .. versionchanged:: 2.2', '        The app context is active for subcommands as well as the', '        decorated callback. The app context is always available to', '        ``app.cli`` command and parameter callbacks.', '    \"\"\"', '', '    @click.pass_context', '    def decorator(__ctx, *args, **kwargs):', '        if not current_app:', '            app = __ctx.ensure_object(ScriptInfo).load_app()', '            __ctx.with_resource(app.app_context())', '', '        return __ctx.invoke(f, *args, **kwargs)', '', '    return update_wrapper(decorator, f)', '', '', 'class AppGroup(click.Group):', '    \"\"\"This works similar to a regular click :class:`~click.Group` but it', '    changes the behavior of the :meth:`command` decorator so that it', '    automatically wraps the functions in :func:`with_appcontext`.', '', '    Not to be confused with :class:`FlaskGroup`.', '    \"\"\"', '', '    def command(self, *args, **kwargs):', '        \"\"\"This works exactly like the method of the same name on a regular', '        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`', \"        unless it's disabled by passing ``with_appcontext=False``.\", '        \"\"\"', '        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)', '', '        def decorator(f):', '            if wrap_for_ctx:', '                f = with_appcontext(f)', '            return click.Group.command(self, *args, **kwargs)(f)', '', '        return decorator', '', '    def group(self, *args, **kwargs):', '        \"\"\"This works exactly like the method of the same name on a regular', '        :class:`click.Group` but it defaults the group class to', '        :class:`AppGroup`.', '        \"\"\"', '        kwargs.setdefault(\"cls\", AppGroup)', '        return click.Group.group(self, *args, **kwargs)', '', '', 'def _set_app(ctx: click.Context, param: click.Option, value: str | None) -> str | None:', '    if value is None:', '        return None', '', '    info = ctx.ensure_object(ScriptInfo)', '    info.app_import_path = value', '    return value', '', '', '# This option is eager so the app will be available if --help is given.', '# --help is also eager, so --app must be before it in the param list.', '# no_args_is_help bypasses eager processing, so this option must be', '# processed manually in that case to ensure FLASK_APP gets picked up.', '_app_option = click.Option(', '    [\"-A\", \"--app\"],', '    metavar=\"IMPORT\",', '    help=(', '        \"The Flask application or factory function to load, in the form \\'module:name\\'.\"', '        \" Module can be a dotted import or file path. Name is not required if it is\"', '        \" \\'app\\', \\'application\\', \\'create_app\\', or \\'make_app\\', and can be \\'name(args)\\' to\"', '        \" pass arguments.\"', '    ),', '    is_eager=True,', '    expose_value=False,', '    callback=_set_app,', ')', '', '', 'def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:', \"    # If the flag isn't provided, it will default to False. Don't use\", '    # that, let debug be set by env in that case.', '    source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]', '', '    if source is not None and source in (', '        ParameterSource.DEFAULT,', '        ParameterSource.DEFAULT_MAP,', '    ):', '        return None', '', '    # Set with env var instead of ScriptInfo.load so that it can be', '    # accessed early during a factory function.', '    os.environ[\"FLASK_DEBUG\"] = \"1\" if value else \"0\"', '    return value', '', '', '_debug_option = click.Option(', '    [\"--debug/--no-debug\"],', '    help=\"Set debug mode.\",', '    expose_value=False,', '    callback=_set_debug,', ')', '', '', 'def _env_file_callback(', '    ctx: click.Context, param: click.Option, value: str | None', ') -> str | None:', '    if value is None:', '        return None', '', '    import importlib', '', '    try:', '        importlib.import_module(\"dotenv\")', '    except ImportError:', '        raise click.BadParameter(', '            \"python-dotenv must be installed to load an env file.\",', '            ctx=ctx,', '            param=param,', '        ) from None', '', \"    # Don't check FLASK_SKIP_DOTENV, that only disables automatically\", '    # loading .env and .flaskenv files.', '    load_dotenv(value)', '    return value', '', '', '# This option is eager so env vars are loaded as early as possible to be', '# used by other options.', '_env_file_option = click.Option(', '    [\"-e\", \"--env-file\"],', '    type=click.Path(exists=True, dir_okay=False),', '    help=\"Load environment variables from this file. python-dotenv must be installed.\",', '    is_eager=True,', '    expose_value=False,', '    callback=_env_file_callback,', ')', '', '', 'class FlaskGroup(AppGroup):', '    \"\"\"Special subclass of the :class:`AppGroup` group that supports', '    loading more commands from the configured Flask app.  Normally a', '    developer does not have to interface with this class but there are', '    some very advanced use cases for which it makes sense to create an', '    instance of this. see :ref:`custom-scripts`.', '', '    :param add_default_commands: if this is True then the default run and', '        shell commands will be added.', '    :param add_version_option: adds the ``--version`` option.', '    :param create_app: an optional callback that is passed the script info and', '        returns the loaded app.', '    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`', '        files to set environment variables. Will also change the working', '        directory to the directory containing the first file found.', \"    :param set_debug_flag: Set the app's debug flag.\", '', '    .. versionchanged:: 2.2', '        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.', '', '    .. versionchanged:: 2.2', '        An app context is pushed when running ``app.cli`` commands, so', '        ``@with_appcontext`` is no longer required for those commands.', '', '    .. versionchanged:: 1.0', '        If installed, python-dotenv will be used to load environment variables', '        from :file:`.env` and :file:`.flaskenv` files.', '    \"\"\"', '', '    def __init__(', '        self,', '        add_default_commands: bool = True,', '        create_app: t.Callable[..., Flask] | None = None,', '        add_version_option: bool = True,', '        load_dotenv: bool = True,', '        set_debug_flag: bool = True,', '        **extra: t.Any,', '    ) -> None:', '        params = list(extra.pop(\"params\", None) or ())', '        # Processing is done with option callbacks instead of a group', '        # callback. This allows users to make a custom group callback', '        # without losing the behavior. --env-file must come first so', '        # that it is eagerly evaluated before --app.', '        params.extend((_env_file_option, _app_option, _debug_option))', '', '        if add_version_option:', '            params.append(version_option)', '', '        if \"context_settings\" not in extra:', '            extra[\"context_settings\"] = {}', '', '        extra[\"context_settings\"].setdefault(\"auto_envvar_prefix\", \"FLASK\")', '', '        super().__init__(params=params, **extra)', '', '        self.create_app = create_app', '        self.load_dotenv = load_dotenv', '        self.set_debug_flag = set_debug_flag', '', '        if add_default_commands:', '            self.add_command(run_command)', '            self.add_command(shell_command)', '            self.add_command(routes_command)', '', '        self._loaded_plugin_commands = False', '', '    def _load_plugin_commands(self):', '        if self._loaded_plugin_commands:', '            return', '', '        if sys.version_info >= (3, 10):', '            from importlib import metadata', '        else:', '            # Use a backport on Python < 3.10. We technically have', '            # importlib.metadata on 3.8+, but the API changed in 3.10,', '            # so use the backport for consistency.', '            import importlib_metadata as metadata', '', '        for ep in metadata.entry_points(group=\"flask.commands\"):', '            self.add_command(ep.load(), ep.name)', '', '        self._loaded_plugin_commands = True', '', '    def get_command(self, ctx, name):', '        self._load_plugin_commands()', '        # Look up built-in and plugin commands, which should be', '        # available even if the app fails to load.', '        rv = super().get_command(ctx, name)', '', '        if rv is not None:', '            return rv', '', '        info = ctx.ensure_object(ScriptInfo)', '', '        # Look up commands provided by the app, showing an error and', \"        # continuing if the app couldn't be loaded.\", '        try:', '            app = info.load_app()', '        except NoAppException as e:', '            click.secho(f\"Error: {e.format_message()}\\\\n\", err=True, fg=\"red\")', '            return None', '', '        # Push an app context for the loaded app unless it is already', '        # active somehow. This makes the context available to parameter', '        # and command callbacks without needing @with_appcontext.', '        if not current_app or current_app._get_current_object() is not app:', '            ctx.with_resource(app.app_context())', '', '        return app.cli.get_command(ctx, name)', '', '    def list_commands(self, ctx):', '        self._load_plugin_commands()', '        # Start with the built-in and plugin commands.', '        rv = set(super().list_commands(ctx))', '        info = ctx.ensure_object(ScriptInfo)', '', '        # Add commands provided by the app, showing an error and', \"        # continuing if the app couldn't be loaded.\", '        try:', '            rv.update(info.load_app().cli.list_commands(ctx))', '        except NoAppException as e:', \"            # When an app couldn't be loaded, show the error message\", '            # without the traceback.', '            click.secho(f\"Error: {e.format_message()}\\\\n\", err=True, fg=\"red\")', '        except Exception:', '            # When any other errors occurred during loading, show the', '            # full traceback.', '            click.secho(f\"{traceback.format_exc()}\\\\n\", err=True, fg=\"red\")', '', '        return sorted(rv)', '', '    def make_context(', '        self,', '        info_name: str | None,', '        args: list[str],', '        parent: click.Context | None = None,', '        **extra: t.Any,', '    ) -> click.Context:', '        # Set a flag to tell app.run to become a no-op. If app.run was', '        # not in a __name__ == __main__ guard, it would start the server', '        # when importing, blocking whatever command is being called.', '        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"', '', '        # Attempt to load .env and .flask env files. The --env-file', '        # option can cause another file to be loaded.', '        if get_load_dotenv(self.load_dotenv):', '            load_dotenv()', '', '        if \"obj\" not in extra and \"obj\" not in self.context_settings:', '            extra[\"obj\"] = ScriptInfo(', '                create_app=self.create_app, set_debug_flag=self.set_debug_flag', '            )', '', '        return super().make_context(info_name, args, parent=parent, **extra)', '', '    def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:', '        if not args and self.no_args_is_help:', '            # Attempt to load --env-file and --app early in case they', '            # were given as env vars. Otherwise no_args_is_help will not', '            # see commands from app.cli.', '            _env_file_option.handle_parse_result(ctx, {}, [])', '            _app_option.handle_parse_result(ctx, {}, [])', '', '        return super().parse_args(ctx, args)', '', '', 'def _path_is_ancestor(path, other):', '    \"\"\"Take ``other`` and remove the length of ``path`` from it. Then join it', '    to ``path``. If it is the original value, ``path`` is an ancestor of', '    ``other``.\"\"\"', '    return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other', '', '', 'def load_dotenv(path: str | os.PathLike | None = None) -> bool:', '    \"\"\"Load \"dotenv\" files in order of precedence to set environment variables.', '', '    If an env var is already set it is not overwritten, so earlier files in the', '    list are preferred over later files.', '', '    This is a no-op if `python-dotenv`_ is not installed.', '', '    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme', '', '    :param path: Load the file at this location instead of searching.', '    :return: ``True`` if a file was loaded.', '', '    .. versionchanged:: 2.0', '        The current directory is not changed to the location of the', '        loaded file.', '', '    .. versionchanged:: 2.0', '        When loading the env files, set the default encoding to UTF-8.', '', '    .. versionchanged:: 1.1.0', '        Returns ``False`` when python-dotenv is not installed, or when', \"        the given path isn't a file.\", '', '    .. versionadded:: 1.0', '    \"\"\"', '    try:', '        import dotenv', '    except ImportError:', '        if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):', '            click.secho(', '                \" * Tip: There are .env or .flaskenv files present.\"', '                \\' Do \"pip install python-dotenv\" to use them.\\',', '                fg=\"yellow\",', '                err=True,', '            )', '', '        return False', '', \"    # Always return after attempting to load a given path, don't load\", '    # the default files.', '    if path is not None:', '        if os.path.isfile(path):', '            return dotenv.load_dotenv(path, encoding=\"utf-8\")', '', '        return False', '', '    loaded = False', '', '    for name in (\".env\", \".flaskenv\"):', '        path = dotenv.find_dotenv(name, usecwd=True)', '', '        if not path:', '            continue', '', '        dotenv.load_dotenv(path, encoding=\"utf-8\")', '        loaded = True', '', '    return loaded  # True if at least one file was located and loaded.', '', '', 'def show_server_banner(debug, app_import_path):', '    \"\"\"Show extra startup messages the first time the server is run,', '    ignoring the reloader.', '    \"\"\"', '    if is_running_from_reloader():', '        return', '', '    if app_import_path is not None:', '        click.echo(f\" * Serving Flask app \\'{app_import_path}\\'\")', '', '    if debug is not None:', '        click.echo(f\" * Debug mode: {\\'on\\' if debug else \\'off\\'}\")', '', '', 'class CertParamType(click.ParamType):', '    \"\"\"Click option type for the ``--cert`` option. Allows either an', \"    existing file, the string ``'adhoc'``, or an import for a\", '    :class:`~ssl.SSLContext` object.', '    \"\"\"', '', '    name = \"path\"', '', '    def __init__(self):', '        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)', '', '    def convert(self, value, param, ctx):', '        try:', '            import ssl', '        except ImportError:', '            raise click.BadParameter(', '                \\'Using \"--cert\" requires Python to be compiled with SSL support.\\',', '                ctx,', '                param,', '            ) from None', '', '        try:', '            return self.path_type(value, param, ctx)', '        except click.BadParameter:', '            value = click.STRING(value, param, ctx).lower()', '', '            if value == \"adhoc\":', '                try:', '                    import cryptography  # noqa: F401', '                except ImportError:', '                    raise click.BadParameter(', '                        \"Using ad-hoc certificates requires the cryptography library.\",', '                        ctx,', '                        param,', '                    ) from None', '', '                return value', '', '            obj = import_string(value, silent=True)', '', '            if isinstance(obj, ssl.SSLContext):', '                return obj', '', '            raise', '', '', 'def _validate_key(ctx, param, value):', '    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.', '    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.', '    \"\"\"', '    cert = ctx.params.get(\"cert\")', '    is_adhoc = cert == \"adhoc\"', '', '    try:', '        import ssl', '    except ImportError:', '        is_context = False', '    else:', '        is_context = isinstance(cert, ssl.SSLContext)', '', '    if value is not None:', '        if is_adhoc:', '            raise click.BadParameter(', '                \\'When \"--cert\" is \"adhoc\", \"--key\" is not used.\\', ctx, param', '            )', '', '        if is_context:', '            raise click.BadParameter(', '                \\'When \"--cert\" is an SSLContext object, \"--key is not used.\\', ctx, param', '            )', '', '        if not cert:', '            raise click.BadParameter(\\'\"--cert\" must also be specified.\\', ctx, param)', '', '        ctx.params[\"cert\"] = cert, value', '', '    else:', '        if cert and not (is_adhoc or is_context):', '            raise click.BadParameter(\\'Required when using \"--cert\".\\', ctx, param)', '', '    return value', '', '', 'class SeparatedPathType(click.Path):', '    \"\"\"Click option type that accepts a list of values separated by the', \"    OS's path separator (``:``, ``;`` on Windows). Each value is\", '    validated as a :class:`click.Path` type.', '    \"\"\"', '', '    def convert(self, value, param, ctx):', '        items = self.split_envvar_value(value)', '        super_convert = super().convert', '        return [super_convert(item, param, ctx) for item in items]', '', '', '@click.command(\"run\", short_help=\"Run a development server.\")', '@click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")', '@click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")', '@click.option(', '    \"--cert\",', '    type=CertParamType(),', '    help=\"Specify a certificate file to use HTTPS.\",', '    is_eager=True,', ')', '@click.option(', '    \"--key\",', '    type=click.Path(exists=True, dir_okay=False, resolve_path=True),', '    callback=_validate_key,', '    expose_value=False,', '    help=\"The key file to use when specifying a certificate.\",', ')', '@click.option(', '    \"--reload/--no-reload\",', '    default=None,', '    help=\"Enable or disable the reloader. By default the reloader \"', '    \"is active if debug is enabled.\",', ')', '@click.option(', '    \"--debugger/--no-debugger\",', '    default=None,', '    help=\"Enable or disable the debugger. By default the debugger \"', '    \"is active if debug is enabled.\",', ')', '@click.option(', '    \"--with-threads/--without-threads\",', '    default=True,', '    help=\"Enable or disable multithreading.\",', ')', '@click.option(', '    \"--extra-files\",', '    default=None,', '    type=SeparatedPathType(),', '    help=(', '        \"Extra files that trigger a reload on change. Multiple paths\"', '        f\" are separated by {os.path.pathsep!r}.\"', '    ),', ')', '@click.option(', '    \"--exclude-patterns\",', '    default=None,', '    type=SeparatedPathType(),', '    help=(', '        \"Files matching these fnmatch patterns will not trigger a reload\"', '        \" on change. Multiple patterns are separated by\"', '        f\" {os.path.pathsep!r}.\"', '    ),', ')', '@pass_script_info', 'def run_command(', '    info,', '    host,', '    port,', '    reload,', '    debugger,', '    with_threads,', '    cert,', '    extra_files,', '    exclude_patterns,', '):', '    \"\"\"Run a local development server.', '', '    This server is for development purposes only. It does not provide', '    the stability, security, or performance of production WSGI servers.', '', \"    The reloader and debugger are enabled by default with the '--debug'\", '    option.', '    \"\"\"', '    try:', '        app = info.load_app()', '    except Exception as e:', '        if is_running_from_reloader():', '            # When reloading, print out the error immediately, but raise', '            # it later so the debugger or server can handle it.', '            traceback.print_exc()', '            err = e', '', '            def app(environ, start_response):', '                raise err from None', '', '        else:', '            # When not reloading, raise the error immediately so the', '            # command fails.', '            raise e from None', '', '    debug = get_debug_flag()', '', '    if reload is None:', '        reload = debug', '', '    if debugger is None:', '        debugger = debug', '', '    show_server_banner(debug, info.app_import_path)', '', '    run_simple(', '        host,', '        port,', '        app,', '        use_reloader=reload,', '        use_debugger=debugger,', '        threaded=with_threads,', '        ssl_context=cert,', '        extra_files=extra_files,', '        exclude_patterns=exclude_patterns,', '    )', '', '', 'run_command.params.insert(0, _debug_option)', '', '', '@click.command(\"shell\", short_help=\"Run a shell in the app context.\")', '@with_appcontext', 'def shell_command() -> None:', '    \"\"\"Run an interactive Python shell in the context of a given', '    Flask application.  The application will populate the default', '    namespace of this shell according to its configuration.', '', '    This is useful for executing small snippets of management code', '    without having to manually configure the application.', '    \"\"\"', '    import code', '', '    banner = (', '        f\"Python {sys.version} on {sys.platform}\\\\n\"', '        f\"App: {current_app.import_name}\\\\n\"', '        f\"Instance: {current_app.instance_path}\"', '    )', '    ctx: dict = {}', '', '    # Support the regular Python interpreter startup script if someone', '    # is using it.', '    startup = os.environ.get(\"PYTHONSTARTUP\")', '    if startup and os.path.isfile(startup):', '        with open(startup) as f:', '            eval(compile(f.read(), startup, \"exec\"), ctx)', '', '    ctx.update(current_app.make_shell_context())', '', '    # Site, customize, or startup script can set a hook to call when', '    # entering interactive mode. The default one sets up readline with', '    # tab and history completion.', '    interactive_hook = getattr(sys, \"__interactivehook__\", None)', '', '    if interactive_hook is not None:', '        try:', '            import readline', '            from rlcompleter import Completer', '        except ImportError:', '            pass', '        else:', '            # rlcompleter uses __main__.__dict__ by default, which is', '            # flask.__main__. Use the shell context instead.', '            readline.set_completer(Completer(ctx).complete)', '', '        interactive_hook()', '', '    code.interact(banner=banner, local=ctx)', '', '', '@click.command(\"routes\", short_help=\"Show the routes for the app.\")', '@click.option(', '    \"--sort\",', '    \"-s\",', '    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),', '    default=\"endpoint\",', '    help=(', '        \\'Method to sort routes by. \"match\" is the order that Flask will match \\'', '        \"routes when dispatching a request.\"', '    ),', ')', '@click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")', '@with_appcontext', 'def routes_command(sort: str, all_methods: bool) -> None:', '    \"\"\"Show all registered routes with endpoints and methods.\"\"\"', '', '    rules = list(current_app.url_map.iter_rules())', '    if not rules:', '        click.echo(\"No routes were registered.\")', '        return', '', '    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))', '', '    if sort in (\"endpoint\", \"rule\"):', '        rules = sorted(rules, key=attrgetter(sort))', '    elif sort == \"methods\":', '        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore', '', '    rule_methods = [', '        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore', '        for rule in rules', '    ]', '', '    headers = (\"Endpoint\", \"Methods\", \"Rule\")', '    widths = (', '        max(len(rule.endpoint) for rule in rules),', '        max(len(methods) for methods in rule_methods),', '        max(len(rule.rule) for rule in rules),', '    )', '    widths = [max(len(h), w) for h, w in zip(headers, widths)]', '    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)', '', '    click.echo(row.format(*headers).strip())', '    click.echo(row.format(*(\"-\" * width for width in widths)))', '', '    for rule, methods in zip(rules, rule_methods):', '        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())', '', '', 'cli = FlaskGroup(', '    name=\"flask\",', '    help=\"\"\"\\\\', 'A general utility script for Flask applications.', '', \"An application to load must be given with the '--app' option,\", \"'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file\", 'in the current directory.', '\"\"\",', ')', '', '', 'def main() -> None:', '    cli.main()', '', '', 'if __name__ == \"__main__\":', '    main()']}, 'logging.py': {'classes': [], 'functions': [{'name': 'wsgi_errors_stream', 'start_line': 14, 'end_line': 23, 'text': ['def wsgi_errors_stream() -> t.TextIO:', '    \"\"\"Find the most appropriate error stream for the application. If a request', '    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.', '', '    If you configure your own :class:`logging.StreamHandler`, you may want to', '    use this for the stream. If you are using file or dict configuration and', \"    can't import this directly, you can refer to it as\", '    ``ext://flask.logging.wsgi_errors_stream``.', '    \"\"\"', '    return request.environ[\"wsgi.errors\"] if request else sys.stderr']}, {'name': 'has_level_handler', 'start_line': 26, 'end_line': 42, 'text': ['def has_level_handler(logger: logging.Logger) -> bool:', '    \"\"\"Check if there is a handler in the logging chain that will handle the', \"    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\", '    \"\"\"', '    level = logger.getEffectiveLevel()', '    current = logger', '', '    while current:', '        if any(handler.level <= level for handler in current.handlers):', '            return True', '', '        if not current.propagate:', '            break', '', '        current = current.parent  # type: ignore', '', '    return False']}, {'name': 'create_logger', 'start_line': 53, 'end_line': 74, 'text': ['def create_logger(app: \"Flask\") -> logging.Logger:', '    \"\"\"Get the Flask app\\'s logger and configure it if needed.', '', '    The logger name will be the same as', '    :attr:`app.import_name <flask.Flask.name>`.', '', '    When :attr:`~flask.Flask.debug` is enabled, set the logger level to', '    :data:`logging.DEBUG` if it is not set.', '', \"    If there is no handler for the logger's effective level, add a\", '    :class:`~logging.StreamHandler` for', '    :func:`~flask.logging.wsgi_errors_stream` with a basic format.', '    \"\"\"', '    logger = logging.getLogger(app.name)', '', '    if app.debug and not logger.level:', '        logger.setLevel(logging.DEBUG)', '', '    if not has_level_handler(logger):', '        logger.addHandler(default_handler)', '', '    return logger']}], 'text': ['import logging', 'import sys', 'import typing as t', '', 'from werkzeug.local import LocalProxy', '', 'from .globals import request', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from .app import Flask', '', '', '@LocalProxy', 'def wsgi_errors_stream() -> t.TextIO:', '    \"\"\"Find the most appropriate error stream for the application. If a request', '    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.', '', '    If you configure your own :class:`logging.StreamHandler`, you may want to', '    use this for the stream. If you are using file or dict configuration and', \"    can't import this directly, you can refer to it as\", '    ``ext://flask.logging.wsgi_errors_stream``.', '    \"\"\"', '    return request.environ[\"wsgi.errors\"] if request else sys.stderr', '', '', 'def has_level_handler(logger: logging.Logger) -> bool:', '    \"\"\"Check if there is a handler in the logging chain that will handle the', \"    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\", '    \"\"\"', '    level = logger.getEffectiveLevel()', '    current = logger', '', '    while current:', '        if any(handler.level <= level for handler in current.handlers):', '            return True', '', '        if not current.propagate:', '            break', '', '        current = current.parent  # type: ignore', '', '    return False', '', '', '#: Log messages to :func:`~flask.logging.wsgi_errors_stream` with the format', '#: ``[%(asctime)s] %(levelname)s in %(module)s: %(message)s``.', 'default_handler = logging.StreamHandler(wsgi_errors_stream)  # type: ignore', 'default_handler.setFormatter(', '    logging.Formatter(\"[%(asctime)s] %(levelname)s in %(module)s: %(message)s\")', ')', '', '', 'def create_logger(app: \"Flask\") -> logging.Logger:', '    \"\"\"Get the Flask app\\'s logger and configure it if needed.', '', '    The logger name will be the same as', '    :attr:`app.import_name <flask.Flask.name>`.', '', '    When :attr:`~flask.Flask.debug` is enabled, set the logger level to', '    :data:`logging.DEBUG` if it is not set.', '', \"    If there is no handler for the logger's effective level, add a\", '    :class:`~logging.StreamHandler` for', '    :func:`~flask.logging.wsgi_errors_stream` with a basic format.', '    \"\"\"', '    logger = logging.getLogger(app.name)', '', '    if app.debug and not logger.level:', '        logger.setLevel(logging.DEBUG)', '', '    if not has_level_handler(logger):', '        logger.addHandler(default_handler)', '', '    return logger']}, '__init__.py': {'classes': [], 'functions': [{'name': '__getattr__', 'start_line': 45, 'end_line': 92, 'text': ['def __getattr__(name):', '    if name == \"_app_ctx_stack\":', '        import warnings', '        from .globals import __app_ctx_stack', '', '        warnings.warn(', '            \"\\'_app_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __app_ctx_stack', '', '    if name == \"_request_ctx_stack\":', '        import warnings', '        from .globals import __request_ctx_stack', '', '        warnings.warn(', '            \"\\'_request_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __request_ctx_stack', '', '    if name == \"escape\":', '        import warnings', '        from markupsafe import escape', '', '        warnings.warn(', '            \"\\'flask.escape\\' is deprecated and will be removed in Flask 2.4. Import\"', '            \" \\'markupsafe.escape\\' instead.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return escape', '', '    if name == \"escape\":', '        import warnings', '        from markupsafe import Markup', '', '        warnings.warn(', '            \"\\'flask.Markup\\' is deprecated and will be removed in Flask 2.4. Import\"', '            \" \\'markupsafe.Markup\\' instead.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return Markup', '', '    raise AttributeError(name)']}], 'text': ['from . import json as json', 'from .app import Flask as Flask', 'from .app import Request as Request', 'from .app import Response as Response', 'from .blueprints import Blueprint as Blueprint', 'from .config import Config as Config', 'from .ctx import after_this_request as after_this_request', 'from .ctx import copy_current_request_context as copy_current_request_context', 'from .ctx import has_app_context as has_app_context', 'from .ctx import has_request_context as has_request_context', 'from .globals import current_app as current_app', 'from .globals import g as g', 'from .globals import request as request', 'from .globals import session as session', 'from .helpers import abort as abort', 'from .helpers import flash as flash', 'from .helpers import get_flashed_messages as get_flashed_messages', 'from .helpers import get_template_attribute as get_template_attribute', 'from .helpers import make_response as make_response', 'from .helpers import redirect as redirect', 'from .helpers import send_file as send_file', 'from .helpers import send_from_directory as send_from_directory', 'from .helpers import stream_with_context as stream_with_context', 'from .helpers import url_for as url_for', 'from .json import jsonify as jsonify', 'from .signals import appcontext_popped as appcontext_popped', 'from .signals import appcontext_pushed as appcontext_pushed', 'from .signals import appcontext_tearing_down as appcontext_tearing_down', 'from .signals import before_render_template as before_render_template', 'from .signals import got_request_exception as got_request_exception', 'from .signals import message_flashed as message_flashed', 'from .signals import request_finished as request_finished', 'from .signals import request_started as request_started', 'from .signals import request_tearing_down as request_tearing_down', 'from .signals import signals_available as signals_available', 'from .signals import template_rendered as template_rendered', 'from .templating import render_template as render_template', 'from .templating import render_template_string as render_template_string', 'from .templating import stream_template as stream_template', 'from .templating import stream_template_string as stream_template_string', '', '__version__ = \"2.3.0.dev\"', '', '', 'def __getattr__(name):', '    if name == \"_app_ctx_stack\":', '        import warnings', '        from .globals import __app_ctx_stack', '', '        warnings.warn(', '            \"\\'_app_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __app_ctx_stack', '', '    if name == \"_request_ctx_stack\":', '        import warnings', '        from .globals import __request_ctx_stack', '', '        warnings.warn(', '            \"\\'_request_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __request_ctx_stack', '', '    if name == \"escape\":', '        import warnings', '        from markupsafe import escape', '', '        warnings.warn(', '            \"\\'flask.escape\\' is deprecated and will be removed in Flask 2.4. Import\"', '            \" \\'markupsafe.escape\\' instead.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return escape', '', '    if name == \"escape\":', '        import warnings', '        from markupsafe import Markup', '', '        warnings.warn(', '            \"\\'flask.Markup\\' is deprecated and will be removed in Flask 2.4. Import\"', '            \" \\'markupsafe.Markup\\' instead.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return Markup', '', '    raise AttributeError(name)']}, 'globals.py': {'classes': [{'name': '_FakeStack', 'start_line': 15, 'end_line': 31, 'text': ['class _FakeStack:', '    def __init__(self, name: str, cv: ContextVar[t.Any]) -> None:', '        self.name = name', '        self.cv = cv', '', '    @property', '    def top(self) -> t.Optional[t.Any]:', '        import warnings', '', '        warnings.warn(', '            f\"\\'_{self.name}_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\"', '            f\" Use \\'g\\' to store data, or \\'{self.name}_ctx\\' to access the current\"', '            \" context.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return self.cv.get(None)'], 'methods': [{'name': '__init__', 'start_line': 16, 'end_line': 18, 'text': ['    def __init__(self, name: str, cv: ContextVar[t.Any]) -> None:', '        self.name = name', '        self.cv = cv']}, {'name': 'top', 'start_line': 21, 'end_line': 31, 'text': ['    def top(self) -> t.Optional[t.Any]:', '        import warnings', '', '        warnings.warn(', '            f\"\\'_{self.name}_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\"', '            f\" Use \\'g\\' to store data, or \\'{self.name}_ctx\\' to access the current\"', '            \" context.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return self.cv.get(None)']}]}], 'functions': [{'name': '__getattr__', 'start_line': 73, 'end_line': 94, 'text': ['def __getattr__(name: str) -> t.Any:', '    if name == \"_app_ctx_stack\":', '        import warnings', '', '        warnings.warn(', '            \"\\'_app_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __app_ctx_stack', '', '    if name == \"_request_ctx_stack\":', '        import warnings', '', '        warnings.warn(', '            \"\\'_request_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __request_ctx_stack', '', '    raise AttributeError(name)']}], 'text': ['import typing as t', 'from contextvars import ContextVar', '', 'from werkzeug.local import LocalProxy', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from .app import Flask', '    from .ctx import _AppCtxGlobals', '    from .ctx import AppContext', '    from .ctx import RequestContext', '    from .sessions import SessionMixin', '    from .wrappers import Request', '', '', 'class _FakeStack:', '    def __init__(self, name: str, cv: ContextVar[t.Any]) -> None:', '        self.name = name', '        self.cv = cv', '', '    @property', '    def top(self) -> t.Optional[t.Any]:', '        import warnings', '', '        warnings.warn(', '            f\"\\'_{self.name}_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\"', '            f\" Use \\'g\\' to store data, or \\'{self.name}_ctx\\' to access the current\"', '            \" context.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return self.cv.get(None)', '', '', '_no_app_msg = \"\"\"\\\\', 'Working outside of application context.', '', 'This typically means that you attempted to use functionality that needed', 'the current application. To solve this, set up an application context', 'with app.app_context(). See the documentation for more information.\\\\', '\"\"\"', '_cv_app: ContextVar[\"AppContext\"] = ContextVar(\"flask.app_ctx\")', '__app_ctx_stack = _FakeStack(\"app\", _cv_app)', 'app_ctx: \"AppContext\" = LocalProxy(  # type: ignore[assignment]', '    _cv_app, unbound_message=_no_app_msg', ')', 'current_app: \"Flask\" = LocalProxy(  # type: ignore[assignment]', '    _cv_app, \"app\", unbound_message=_no_app_msg', ')', 'g: \"_AppCtxGlobals\" = LocalProxy(  # type: ignore[assignment]', '    _cv_app, \"g\", unbound_message=_no_app_msg', ')', '', '_no_req_msg = \"\"\"\\\\', 'Working outside of request context.', '', 'This typically means that you attempted to use functionality that needed', 'an active HTTP request. Consult the documentation on testing for', 'information about how to avoid this problem.\\\\', '\"\"\"', '_cv_request: ContextVar[\"RequestContext\"] = ContextVar(\"flask.request_ctx\")', '__request_ctx_stack = _FakeStack(\"request\", _cv_request)', 'request_ctx: \"RequestContext\" = LocalProxy(  # type: ignore[assignment]', '    _cv_request, unbound_message=_no_req_msg', ')', 'request: \"Request\" = LocalProxy(  # type: ignore[assignment]', '    _cv_request, \"request\", unbound_message=_no_req_msg', ')', 'session: \"SessionMixin\" = LocalProxy(  # type: ignore[assignment]', '    _cv_request, \"session\", unbound_message=_no_req_msg', ')', '', '', 'def __getattr__(name: str) -> t.Any:', '    if name == \"_app_ctx_stack\":', '        import warnings', '', '        warnings.warn(', '            \"\\'_app_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __app_ctx_stack', '', '    if name == \"_request_ctx_stack\":', '        import warnings', '', '        warnings.warn(', '            \"\\'_request_ctx_stack\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return __request_ctx_stack', '', '    raise AttributeError(name)']}, 'app.py': {'classes': [{'name': 'Flask', 'start_line': 105, 'end_line': 2228, 'text': ['class Flask(Scaffold):', '    \"\"\"The flask object implements a WSGI application and acts as the central', '    object.  It is passed the name of the module or package of the', '    application.  Once it is created it will act as a central registry for', '    the view functions, the URL rules, template configuration and much more.', '', '    The name of the package is used to resolve resources from inside the', '    package or the folder the module is contained in depending on if the', '    package parameter resolves to an actual python package (a folder with', '    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).', '', '    For more information about resource loading, see :func:`open_resource`.', '', '    Usually you create a :class:`Flask` instance in your main module or', '    in the :file:`__init__.py` file of your package like this::', '', '        from flask import Flask', '        app = Flask(__name__)', '', '    .. admonition:: About the First Parameter', '', '        The idea of the first parameter is to give Flask an idea of what', '        belongs to your application.  This name is used to find resources', '        on the filesystem, can be used by extensions to improve debugging', '        information and a lot more.', '', \"        So it's important what you provide there.  If you are using a single\", '        module, `__name__` is always the correct value.  If you however are', \"        using a package, it's usually recommended to hardcode the name of\", '        your package there.', '', '        For example if your application is defined in :file:`yourapplication/app.py`', '        you should create it with one of the two versions below::', '', \"            app = Flask('yourapplication')\", \"            app = Flask(__name__.split('.')[0])\", '', '        Why is that?  The application will work even with `__name__`, thanks', '        to how resources are looked up.  However it will make debugging more', '        painful.  Certain extensions can make assumptions based on the', '        import name of your application.  For example the Flask-SQLAlchemy', '        extension will look for the code in your application that triggered', '        an SQL query in debug mode.  If the import name is not properly set', '        up, that debugging information is lost.  (For example it would only', '        pick up SQL queries in `yourapplication.app` and not', '        `yourapplication.views.frontend`)', '', '    .. versionadded:: 0.7', '       The `static_url_path`, `static_folder`, and `template_folder`', '       parameters were added.', '', '    .. versionadded:: 0.8', '       The `instance_path` and `instance_relative_config` parameters were', '       added.', '', '    .. versionadded:: 0.11', '       The `root_path` parameter was added.', '', '    .. versionadded:: 1.0', '       The ``host_matching`` and ``static_host`` parameters were added.', '', '    .. versionadded:: 1.0', '       The ``subdomain_matching`` parameter was added. Subdomain', '       matching needs to be enabled manually now. Setting', '       :data:`SERVER_NAME` does not implicitly enable it.', '', '    :param import_name: the name of the application package', '    :param static_url_path: can be used to specify a different path for the', '                            static files on the web.  Defaults to the name', '                            of the `static_folder` folder.', '    :param static_folder: The folder with static files that is served at', '        ``static_url_path``. Relative to the application ``root_path``', \"        or an absolute path. Defaults to ``'static'``.\", '    :param static_host: the host to use when adding the static route.', '        Defaults to None. Required when using ``host_matching=True``', '        with a ``static_folder`` configured.', '    :param host_matching: set ``url_map.host_matching`` attribute.', '        Defaults to False.', '    :param subdomain_matching: consider the subdomain relative to', '        :data:`SERVER_NAME` when matching routes. Defaults to False.', '    :param template_folder: the folder that contains the templates that should', '                            be used by the application.  Defaults to', \"                            ``'templates'`` folder in the root path of the\", '                            application.', '    :param instance_path: An alternative instance path for the application.', \"                          By default the folder ``'instance'`` next to the\", '                          package or module is assumed to be the instance', '                          path.', '    :param instance_relative_config: if set to ``True`` relative filenames', '                                     for loading the config are assumed to', '                                     be relative to the instance path instead', '                                     of the application root.', '    :param root_path: The path to the root of the application files.', \"        This should only be set manually when it can't be detected\", '        automatically, such as for namespace packages.', '    \"\"\"', '', '    #: The class that is used for request objects.  See :class:`~flask.Request`', '    #: for more information.', '    request_class = Request', '', '    #: The class that is used for response objects.  See', '    #: :class:`~flask.Response` for more information.', '    response_class = Response', '', '    #: The class of the object assigned to :attr:`aborter`, created by', '    #: :meth:`create_aborter`. That object is called by', '    #: :func:`flask.abort` to raise HTTP errors, and can be', '    #: called directly as well.', '    #:', '    #: Defaults to :class:`werkzeug.exceptions.Aborter`.', '    #:', '    #: .. versionadded:: 2.2', '    aborter_class = Aborter', '', '    #: The class that is used for the Jinja environment.', '    #:', '    #: .. versionadded:: 0.11', '    jinja_environment = Environment', '', '    #: The class that is used for the :data:`~flask.g` instance.', '    #:', '    #: Example use cases for a custom class:', '    #:', '    #: 1. Store arbitrary attributes on flask.g.', '    #: 2. Add a property for lazy per-request database connectors.', '    #: 3. Return None instead of AttributeError on unexpected attributes.', '    #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.', '    #:', '    #: In Flask 0.9 this property was called `request_globals_class` but it', '    #: was changed in 0.10 to :attr:`app_ctx_globals_class` because the', '    #: flask.g object is now application context scoped.', '    #:', '    #: .. versionadded:: 0.10', '    app_ctx_globals_class = _AppCtxGlobals', '', '    #: The class that is used for the ``config`` attribute of this app.', '    #: Defaults to :class:`~flask.Config`.', '    #:', '    #: Example use cases for a custom class:', '    #:', '    #: 1. Default values for certain config options.', '    #: 2. Access to config values through attributes in addition to keys.', '    #:', '    #: .. versionadded:: 0.11', '    config_class = Config', '', '    #: The testing flag.  Set this to ``True`` to enable the test mode of', '    #: Flask extensions (and in the future probably also Flask itself).', '    #: For example this might activate test helpers that have an', '    #: additional runtime cost which should not be enabled by default.', '    #:', '    #: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the', \"    #: default it's implicitly enabled.\", '    #:', '    #: This attribute can also be configured from the config with the', '    #: ``TESTING`` configuration key.  Defaults to ``False``.', '    testing = ConfigAttribute(\"TESTING\")', '', '    #: If a secret key is set, cryptographic components can use this to', '    #: sign cookies and other things. Set this to a complex random value', '    #: when you want to use the secure cookie for instance.', '    #:', '    #: This attribute can also be configured from the config with the', '    #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.', '    secret_key = ConfigAttribute(\"SECRET_KEY\")', '', '    #: A :class:`~datetime.timedelta` which is used to set the expiration', '    #: date of a permanent session.  The default is 31 days which makes a', '    #: permanent session survive for roughly one month.', '    #:', '    #: This attribute can also be configured from the config with the', '    #: ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to', '    #: ``timedelta(days=31)``', '    permanent_session_lifetime = ConfigAttribute(', '        \"PERMANENT_SESSION_LIFETIME\", get_converter=_make_timedelta', '    )', '', '    json_provider_class: t.Type[JSONProvider] = DefaultJSONProvider', '    \"\"\"A subclass of :class:`~flask.json.provider.JSONProvider`. An', '    instance is created and assigned to :attr:`app.json` when creating', '    the app.', '', '    The default, :class:`~flask.json.provider.DefaultJSONProvider`, uses', \"    Python's built-in :mod:`json` library. A different provider can use\", '    a different JSON library.', '', '    .. versionadded:: 2.2', '    \"\"\"', '', '    #: Options that are passed to the Jinja environment in', '    #: :meth:`create_jinja_environment`. Changing these options after', '    #: the environment is created (accessing :attr:`jinja_env`) will', '    #: have no effect.', '    #:', '    #: .. versionchanged:: 1.1.0', '    #:     This is a ``dict`` instead of an ``ImmutableDict`` to allow', '    #:     easier configuration.', '    #:', '    jinja_options: dict = {}', '', '    #: Default configuration parameters.', '    default_config = ImmutableDict(', '        {', '            \"DEBUG\": None,', '            \"TESTING\": False,', '            \"PROPAGATE_EXCEPTIONS\": None,', '            \"SECRET_KEY\": None,', '            \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),', '            \"USE_X_SENDFILE\": False,', '            \"SERVER_NAME\": None,', '            \"APPLICATION_ROOT\": \"/\",', '            \"SESSION_COOKIE_NAME\": \"session\",', '            \"SESSION_COOKIE_DOMAIN\": None,', '            \"SESSION_COOKIE_PATH\": None,', '            \"SESSION_COOKIE_HTTPONLY\": True,', '            \"SESSION_COOKIE_SECURE\": False,', '            \"SESSION_COOKIE_SAMESITE\": None,', '            \"SESSION_REFRESH_EACH_REQUEST\": True,', '            \"MAX_CONTENT_LENGTH\": None,', '            \"SEND_FILE_MAX_AGE_DEFAULT\": None,', '            \"TRAP_BAD_REQUEST_ERRORS\": None,', '            \"TRAP_HTTP_EXCEPTIONS\": False,', '            \"EXPLAIN_TEMPLATE_LOADING\": False,', '            \"PREFERRED_URL_SCHEME\": \"http\",', '            \"TEMPLATES_AUTO_RELOAD\": None,', '            \"MAX_COOKIE_SIZE\": 4093,', '        }', '    )', '', '    #: The rule object to use for URL rules created.  This is used by', '    #: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.', '    #:', '    #: .. versionadded:: 0.7', '    url_rule_class = Rule', '', '    #: The map object to use for storing the URL rules and routing', '    #: configuration parameters. Defaults to :class:`werkzeug.routing.Map`.', '    #:', '    #: .. versionadded:: 1.1.0', '    url_map_class = Map', '', '    #: The :meth:`test_client` method creates an instance of this test', '    #: client class. Defaults to :class:`~flask.testing.FlaskClient`.', '    #:', '    #: .. versionadded:: 0.7', '    test_client_class: t.Optional[t.Type[\"FlaskClient\"]] = None', '', '    #: The :class:`~click.testing.CliRunner` subclass, by default', '    #: :class:`~flask.testing.FlaskCliRunner` that is used by', '    #: :meth:`test_cli_runner`. Its ``__init__`` method should take a', '    #: Flask app object as the first argument.', '    #:', '    #: .. versionadded:: 1.0', '    test_cli_runner_class: t.Optional[t.Type[\"FlaskCliRunner\"]] = None', '', '    #: the session interface to use.  By default an instance of', '    #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.', '    #:', '    #: .. versionadded:: 0.8', '    session_interface: SessionInterface = SecureCookieSessionInterface()', '', '    def __init__(', '        self,', '        import_name: str,', '        static_url_path: t.Optional[str] = None,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = \"static\",', '        static_host: t.Optional[str] = None,', '        host_matching: bool = False,', '        subdomain_matching: bool = False,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = \"templates\",', '        instance_path: t.Optional[str] = None,', '        instance_relative_config: bool = False,', '        root_path: t.Optional[str] = None,', '    ):', '        super().__init__(', '            import_name=import_name,', '            static_folder=static_folder,', '            static_url_path=static_url_path,', '            template_folder=template_folder,', '            root_path=root_path,', '        )', '', '        if instance_path is None:', '            instance_path = self.auto_find_instance_path()', '        elif not os.path.isabs(instance_path):', '            raise ValueError(', '                \"If an instance path is provided it must be absolute.\"', '                \" A relative path was given instead.\"', '            )', '', '        #: Holds the path to the instance folder.', '        #:', '        #: .. versionadded:: 0.8', '        self.instance_path = instance_path', '', '        #: The configuration dictionary as :class:`Config`.  This behaves', '        #: exactly like a regular dictionary but supports additional methods', '        #: to load a config from files.', '        self.config = self.make_config(instance_relative_config)', '', '        #: An instance of :attr:`aborter_class` created by', '        #: :meth:`make_aborter`. This is called by :func:`flask.abort`', '        #: to raise HTTP errors, and can be called directly as well.', '        #:', '        #: .. versionadded:: 2.2', '        #:     Moved from ``flask.abort``, which calls this object.', '        self.aborter = self.make_aborter()', '', '        self.json: JSONProvider = self.json_provider_class(self)', '        \"\"\"Provides access to JSON methods. Functions in ``flask.json``', '        will call methods on this provider when the application context', '        is active. Used for handling JSON requests and responses.', '', '        An instance of :attr:`json_provider_class`. Can be customized by', '        changing that attribute on a subclass, or by assigning to this', '        attribute afterwards.', '', '        The default, :class:`~flask.json.provider.DefaultJSONProvider`,', \"        uses Python's built-in :mod:`json` library. A different provider\", '        can use a different JSON library.', '', '        .. versionadded:: 2.2', '        \"\"\"', '', '        #: A list of functions that are called by', '        #: :meth:`handle_url_build_error` when :meth:`.url_for` raises a', '        #: :exc:`~werkzeug.routing.BuildError`. Each function is called', '        #: with ``error``, ``endpoint`` and ``values``. If a function', '        #: returns ``None`` or raises a ``BuildError``, it is skipped.', '        #: Otherwise, its return value is returned by ``url_for``.', '        #:', '        #: .. versionadded:: 0.9', '        self.url_build_error_handlers: t.List[', '            t.Callable[[Exception, str, t.Dict[str, t.Any]], str]', '        ] = []', '', '        #: A list of functions that are called when the application context', '        #: is destroyed.  Since the application context is also torn down', '        #: if the request ends this is the place to store code that disconnects', '        #: from databases.', '        #:', '        #: .. versionadded:: 0.9', '        self.teardown_appcontext_funcs: t.List[ft.TeardownCallable] = []', '', '        #: A list of shell context processor functions that should be run', '        #: when a shell context is created.', '        #:', '        #: .. versionadded:: 0.11', '        self.shell_context_processors: t.List[ft.ShellContextProcessorCallable] = []', '', '        #: Maps registered blueprint names to blueprint objects. The', '        #: dict retains the order the blueprints were registered in.', '        #: Blueprints can be registered multiple times, this dict does', '        #: not track how often they were attached.', '        #:', '        #: .. versionadded:: 0.7', '        self.blueprints: t.Dict[str, \"Blueprint\"] = {}', '', '        #: a place where extensions can store application specific state.  For', '        #: example this is where an extension could store database engines and', '        #: similar things.', '        #:', '        #: The key must match the name of the extension module. For example in', '        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be', \"        #: ``'foo'``.\", '        #:', '        #: .. versionadded:: 0.7', '        self.extensions: dict = {}', '', '        #: The :class:`~werkzeug.routing.Map` for this instance.  You can use', '        #: this to change the routing converters after the class was created', '        #: but before any routes are connected.  Example::', '        #:', '        #:    from werkzeug.routing import BaseConverter', '        #:', '        #:    class ListConverter(BaseConverter):', '        #:        def to_python(self, value):', \"        #:            return value.split(',')\", '        #:        def to_url(self, values):', \"        #:            return ','.join(super(ListConverter, self).to_url(value)\", '        #:                            for value in values)', '        #:', '        #:    app = Flask(__name__)', \"        #:    app.url_map.converters['list'] = ListConverter\", '        self.url_map = self.url_map_class()', '', '        self.url_map.host_matching = host_matching', '        self.subdomain_matching = subdomain_matching', '', '        # tracks internally if the application already handled at least one', '        # request.', '        self._got_first_request = False', '', '        # Add a static route using the provided static_url_path, static_host,', '        # and static_folder if there is a configured static_folder.', '        # Note we do this without checking if static_folder exists.', '        # For one, it might be created while the server is running (e.g. during', '        # development). Also, Google App Engine stores static files somewhere', '        if self.has_static_folder:', '            assert (', '                bool(static_host) == host_matching', '            ), \"Invalid static_host/host_matching combination\"', '            # Use a weakref to avoid creating a reference cycle between the app', '            # and the view function (see #3761).', '            self_ref = weakref.ref(self)', '            self.add_url_rule(', '                f\"{self.static_url_path}/<path:filename>\",', '                endpoint=\"static\",', '                host=static_host,', '                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950', '            )', '', '        # Set the name of the Click group in case someone wants to add', \"        # the app's commands to another CLI tool.\", '        self.cli.name = self.name', '', '    def _check_setup_finished(self, f_name: str) -> None:', '        if self._got_first_request:', '            raise AssertionError(', '                f\"The setup method \\'{f_name}\\' can no longer be called\"', '                \" on the application. It has already handled its first\"', '                \" request, any changes will not be applied\"', '                \" consistently.\\\\n\"', '                \"Make sure all imports, decorators, functions, etc.\"', '                \" needed to set up the application are done before\"', '                \" running it.\"', '            )', '', '    @cached_property', '    def name(self) -> str:  # type: ignore', '        \"\"\"The name of the application.  This is usually the import name', \"        with the difference that it's guessed from the run file if the\", '        import name is main.  This name is used as a display name when', '        Flask needs the name of the application.  It can be set and overridden', '        to change the value.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        if self.import_name == \"__main__\":', '            fn = getattr(sys.modules[\"__main__\"], \"__file__\", None)', '            if fn is None:', '                return \"__main__\"', '            return os.path.splitext(os.path.basename(fn))[0]', '        return self.import_name', '', '    @cached_property', '    def logger(self) -> logging.Logger:', '        \"\"\"A standard Python :class:`~logging.Logger` for the app, with', '        the same name as :attr:`name`.', '', \"        In debug mode, the logger's :attr:`~logging.Logger.level` will\", '        be set to :data:`~logging.DEBUG`.', '', '        If there are no handlers configured, a default handler will be', '        added. See :doc:`/logging` for more information.', '', '        .. versionchanged:: 1.1.0', '            The logger takes the same name as :attr:`name` rather than', '            hard-coding ``\"flask.app\"``.', '', '        .. versionchanged:: 1.0.0', '            Behavior was simplified. The logger is always named', '            ``\"flask.app\"``. The level is only set during configuration,', \"            it doesn't check ``app.debug`` each time. Only one format is\", '            used, not different ones depending on ``app.debug``. No', '            handlers are removed, and a handler is only added if no', '            handlers are already configured.', '', '        .. versionadded:: 0.3', '        \"\"\"', '        return create_logger(self)', '', '    @cached_property', '    def jinja_env(self) -> Environment:', '        \"\"\"The Jinja environment used to load templates.', '', '        The environment is created the first time this property is', '        accessed. Changing :attr:`jinja_options` after that will have no', '        effect.', '        \"\"\"', '        return self.create_jinja_environment()', '', '    @property', '    def got_first_request(self) -> bool:', '        \"\"\"This attribute is set to ``True`` if the application started', '        handling the first request.', '', '        .. deprecated:: 2.3', '            Will be removed in Flask 2.4.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        import warnings', '', '        warnings.warn(', '            \"\\'got_first_request\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return self._got_first_request', '', '    def make_config(self, instance_relative: bool = False) -> Config:', '        \"\"\"Used to create the config attribute by the Flask constructor.', '        The `instance_relative` parameter is passed in from the constructor', '        of Flask (there named `instance_relative_config`) and indicates if', '        the config should be relative to the instance path or the root path', '        of the application.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        root_path = self.root_path', '        if instance_relative:', '            root_path = self.instance_path', '        defaults = dict(self.default_config)', '        defaults[\"DEBUG\"] = get_debug_flag()', '        return self.config_class(root_path, defaults)', '', '    def make_aborter(self) -> Aborter:', '        \"\"\"Create the object to assign to :attr:`aborter`. That object', '        is called by :func:`flask.abort` to raise HTTP errors, and can', '        be called directly as well.', '', '        By default, this creates an instance of :attr:`aborter_class`,', '        which defaults to :class:`werkzeug.exceptions.Aborter`.', '', '        .. versionadded:: 2.2', '        \"\"\"', '        return self.aborter_class()', '', '    def auto_find_instance_path(self) -> str:', '        \"\"\"Tries to locate the instance path if it was not provided to the', '        constructor of the application class.  It will basically calculate', '        the path to a folder named ``instance`` next to your main file or', '        the package.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        prefix, package_path = find_package(self.import_name)', '        if prefix is None:', '            return os.path.join(package_path, \"instance\")', '        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")', '', '    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:', '        \"\"\"Opens a resource from the application\\'s instance folder', '        (:attr:`instance_path`).  Otherwise works like', '        :meth:`open_resource`.  Instance resources can also be opened for', '        writing.', '', '        :param resource: the name of the resource.  To access resources within', '                         subfolders use forward slashes as separator.', \"        :param mode: resource file opening mode, default is 'rb'.\", '        \"\"\"', '        return open(os.path.join(self.instance_path, resource), mode)', '', '    def create_jinja_environment(self) -> Environment:', '        \"\"\"Create the Jinja environment based on :attr:`jinja_options`', '        and the various Jinja-related methods of the app. Changing', '        :attr:`jinja_options` after this will have no effect. Also adds', '        Flask-related globals and filters to the environment.', '', '        .. versionchanged:: 0.11', '           ``Environment.auto_reload`` set in accordance with', '           ``TEMPLATES_AUTO_RELOAD`` configuration option.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        options = dict(self.jinja_options)', '', '        if \"autoescape\" not in options:', '            options[\"autoescape\"] = self.select_jinja_autoescape', '', '        if \"auto_reload\" not in options:', '            auto_reload = self.config[\"TEMPLATES_AUTO_RELOAD\"]', '', '            if auto_reload is None:', '                auto_reload = self.debug', '', '            options[\"auto_reload\"] = auto_reload', '', '        rv = self.jinja_environment(self, **options)', '        rv.globals.update(', '            url_for=self.url_for,', '            get_flashed_messages=get_flashed_messages,', '            config=self.config,', '            # request, session and g are normally added with the', '            # context processor for efficiency reasons but for imported', '            # templates we also want the proxies in there.', '            request=request,', '            session=session,', '            g=g,', '        )', '        rv.policies[\"json.dumps_function\"] = self.json.dumps', '        return rv', '', '    def create_global_jinja_loader(self) -> DispatchingJinjaLoader:', '        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to', \"        override just the loader and keeping the rest unchanged.  It's\", '        discouraged to override this function.  Instead one should override', '        the :meth:`jinja_loader` function instead.', '', '        The global loader dispatches between the loaders of the application', '        and the individual blueprints.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        return DispatchingJinjaLoader(self)', '', '    def select_jinja_autoescape(self, filename: str) -> bool:', '        \"\"\"Returns ``True`` if autoescaping should be active for the given', '        template name. If no template name is given, returns `True`.', '', '        .. versionchanged:: 2.2', '            Autoescaping is now enabled by default for ``.svg`` files.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if filename is None:', '            return True', '        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))', '', '    def update_template_context(self, context: dict) -> None:', '        \"\"\"Update the template context with some commonly used variables.', '        This injects request, session, config and g into the template', '        context as well as everything template context processors want', '        to inject.  Note that the as of Flask 0.6, the original values', '        in the context will not be overridden if a context processor', '        decides to return a value with the same key.', '', '        :param context: the context as a dictionary that is updated in place', '                        to add extra variables.', '        \"\"\"', '        names: t.Iterable[t.Optional[str]] = (None,)', '', '        # A template may be rendered outside a request context.', '        if request:', '            names = chain(names, reversed(request.blueprints))', '', '        # The values passed to render_template take precedence. Keep a', '        # copy to re-apply after all context functions.', '        orig_ctx = context.copy()', '', '        for name in names:', '            if name in self.template_context_processors:', '                for func in self.template_context_processors[name]:', '                    context.update(func())', '', '        context.update(orig_ctx)', '', '    def make_shell_context(self) -> dict:', '        \"\"\"Returns the shell context for an interactive shell for this', '        application.  This runs all the registered shell context', '        processors.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        rv = {\"app\": self, \"g\": g}', '        for processor in self.shell_context_processors:', '            rv.update(processor())', '        return rv', '', '    @property', '    def debug(self) -> bool:', '        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the', '        development server, an interactive debugger will be shown for unhandled', '        exceptions, and the server will be reloaded when code changes. This maps to the', '        :data:`DEBUG` config key. It may not behave as expected if set late.', '', '        **Do not enable debug mode when deploying in production.**', '', '        Default: ``False``', '        \"\"\"', '        return self.config[\"DEBUG\"]', '', '    @debug.setter', '    def debug(self, value: bool) -> None:', '        self.config[\"DEBUG\"] = value', '', '        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:', '            self.jinja_env.auto_reload = value', '', '    def run(', '        self,', '        host: t.Optional[str] = None,', '        port: t.Optional[int] = None,', '        debug: t.Optional[bool] = None,', '        load_dotenv: bool = True,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Runs the application on a local development server.', '', '        Do not use ``run()`` in a production setting. It is not intended to', '        meet security and performance requirements for a production server.', '        Instead, see :doc:`/deploying/index` for WSGI server recommendations.', '', '        If the :attr:`debug` flag is set the server will automatically reload', '        for code changes and show a debugger in case an exception happened.', '', '        If you want to run the application in debug mode, but disable the', '        code execution on the interactive debugger, you can pass', \"        ``use_evalex=False`` as parameter.  This will keep the debugger's\", '        traceback screen active, but disable code execution.', '', '        It is not recommended to use this function for development with', '        automatic reloading as this is badly supported.  Instead you should', \"        be using the :command:`flask` command line script's ``run`` support.\", '', '        .. admonition:: Keep in Mind', '', '           Flask will suppress any server error with a generic error page', '           unless it is in debug mode.  As such to enable just the', '           interactive debugger without the code reloading, you have to', '           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.', '           Setting ``use_debugger`` to ``True`` without being in debug mode', \"           won't catch any exceptions because there won't be any to\", '           catch.', '', \"        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\", '            have the server available externally as well. Defaults to', \"            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\", '            if present.', '        :param port: the port of the webserver. Defaults to ``5000`` or the', '            port defined in the ``SERVER_NAME`` config variable if present.', '        :param debug: if given, enable or disable debug mode. See', '            :attr:`debug`.', '        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`', '            files to set environment variables. Will also change the working', '            directory to the directory containing the first file found.', '        :param options: the options to be forwarded to the underlying Werkzeug', '            server. See :func:`werkzeug.serving.run_simple` for more', '            information.', '', '        .. versionchanged:: 1.0', '            If installed, python-dotenv will be used to load environment', '            variables from :file:`.env` and :file:`.flaskenv` files.', '', '            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.', '', '            Threaded mode is enabled by default.', '', '        .. versionchanged:: 0.10', '            The default port is now picked from the ``SERVER_NAME``', '            variable.', '        \"\"\"', \"        # Ignore this call so that it doesn't start another server if\", \"        # the 'flask run' command is used.\", '        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":', '            if not is_running_from_reloader():', '                click.secho(', '                    \" * Ignoring a call to \\'app.run()\\' that would block\"', '                    \" the current \\'flask\\' CLI command.\\\\n\"', '                    \"   Only call \\'app.run()\\' in an \\'if __name__ ==\"', '                    \\' \"__main__\"\\\\\\' guard.\\',', '                    fg=\"red\",', '                )', '', '            return', '', '        if get_load_dotenv(load_dotenv):', '            cli.load_dotenv()', '', '            # if set, env var overrides existing value', '            if \"FLASK_DEBUG\" in os.environ:', '                self.debug = get_debug_flag()', '', '        # debug passed to method overrides all other sources', '        if debug is not None:', '            self.debug = bool(debug)', '', '        server_name = self.config.get(\"SERVER_NAME\")', '        sn_host = sn_port = None', '', '        if server_name:', '            sn_host, _, sn_port = server_name.partition(\":\")', '', '        if not host:', '            if sn_host:', '                host = sn_host', '            else:', '                host = \"127.0.0.1\"', '', '        if port or port == 0:', '            port = int(port)', '        elif sn_port:', '            port = int(sn_port)', '        else:', '            port = 5000', '', '        options.setdefault(\"use_reloader\", self.debug)', '        options.setdefault(\"use_debugger\", self.debug)', '        options.setdefault(\"threaded\", True)', '', '        cli.show_server_banner(self.debug, self.name)', '', '        from werkzeug.serving import run_simple', '', '        try:', '            run_simple(t.cast(str, host), port, self, **options)', '        finally:', '            # reset the first request information if the development server', '            # reset normally.  This makes it possible to restart the server', '            # without reloader and that stuff from an interactive shell.', '            self._got_first_request = False', '', '    def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> \"FlaskClient\":', '        \"\"\"Creates a test client for this application.  For information', '        about unit testing head over to :doc:`/testing`.', '', '        Note that if you are testing for assertions or exceptions in your', '        application code, you must set ``app.testing = True`` in order for the', '        exceptions to propagate to the test client.  Otherwise, the exception', '        will be handled by the application (not visible to the test client) and', '        the only indication of an AssertionError or other exception will be a', '        500 status code response to the test client.  See the :attr:`testing`', '        attribute.  For example::', '', '            app.testing = True', '            client = app.test_client()', '', '        The test client can be used in a ``with`` block to defer the closing down', '        of the context until the end of the ``with`` block.  This is useful if', '        you want to access the context locals for testing::', '', '            with app.test_client() as c:', \"                rv = c.get('/?vodka=42')\", \"                assert request.args['vodka'] == '42'\", '', '        Additionally, you may pass optional keyword arguments that will then', \"        be passed to the application's :attr:`test_client_class` constructor.\", '        For example::', '', '            from flask.testing import FlaskClient', '', '            class CustomClient(FlaskClient):', '                def __init__(self, *args, **kwargs):', '                    self._authentication = kwargs.pop(\"authentication\")', '                    super(CustomClient,self).__init__( *args, **kwargs)', '', '            app.test_client_class = CustomClient', \"            client = app.test_client(authentication='Basic ....')\", '', '        See :class:`~flask.testing.FlaskClient` for more information.', '', '        .. versionchanged:: 0.4', '           added support for ``with`` block usage for the client.', '', '        .. versionadded:: 0.7', '           The `use_cookies` parameter was added as well as the ability', '           to override the client to be used by setting the', '           :attr:`test_client_class` attribute.', '', '        .. versionchanged:: 0.11', '           Added `**kwargs` to support passing additional keyword arguments to', '           the constructor of :attr:`test_client_class`.', '        \"\"\"', '        cls = self.test_client_class', '        if cls is None:', '            from .testing import FlaskClient as cls', '        return cls(  # type: ignore', '            self, self.response_class, use_cookies=use_cookies, **kwargs', '        )', '', '    def test_cli_runner(self, **kwargs: t.Any) -> \"FlaskCliRunner\":', '        \"\"\"Create a CLI runner for testing CLI commands.', '        See :ref:`testing-cli`.', '', '        Returns an instance of :attr:`test_cli_runner_class`, by default', '        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is', '        passed as the first argument.', '', '        .. versionadded:: 1.0', '        \"\"\"', '        cls = self.test_cli_runner_class', '', '        if cls is None:', '            from .testing import FlaskCliRunner as cls', '', '        return cls(self, **kwargs)  # type: ignore', '', '    @setupmethod', '    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:', '        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword', '        arguments passed to this method will override the defaults set on the', '        blueprint.', '', \"        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\", \"        recording the blueprint in the application's :attr:`blueprints`.\", '', '        :param blueprint: The blueprint to register.', '        :param url_prefix: Blueprint routes will be prefixed with this.', '        :param subdomain: Blueprint routes will match on this subdomain.', '        :param url_defaults: Blueprint routes will use these default values for', '            view arguments.', '        :param options: Additional keyword arguments are passed to', '            :class:`~flask.blueprints.BlueprintSetupState`. They can be', '            accessed in :meth:`~flask.Blueprint.record` callbacks.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        blueprint.register(self, options)', '', '    def iter_blueprints(self) -> t.ValuesView[\"Blueprint\"]:', '        \"\"\"Iterates over all blueprints by the order they were registered.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        return self.blueprints.values()', '', '    @setupmethod', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        if endpoint is None:', '            endpoint = _endpoint_from_view_func(view_func)  # type: ignore', '        options[\"endpoint\"] = endpoint', '        methods = options.pop(\"methods\", None)', '', '        # if the methods are not given and the view_func object knows its', '        # methods we can use that instead.  If neither exists, we go with', '        # a tuple of only ``GET`` as default.', '        if methods is None:', '            methods = getattr(view_func, \"methods\", None) or (\"GET\",)', '        if isinstance(methods, str):', '            raise TypeError(', '                \"Allowed methods must be a list of strings, for\"', '                \\' example: @app.route(..., methods=[\"POST\"])\\'', '            )', '        methods = {item.upper() for item in methods}', '', '        # Methods that should always be added', '        required_methods = set(getattr(view_func, \"required_methods\", ()))', '', '        # starting with Flask 0.8 the view_func object can disable and', '        # force-enable the automatic options handling.', '        if provide_automatic_options is None:', '            provide_automatic_options = getattr(', '                view_func, \"provide_automatic_options\", None', '            )', '', '        if provide_automatic_options is None:', '            if \"OPTIONS\" not in methods:', '                provide_automatic_options = True', '                required_methods.add(\"OPTIONS\")', '            else:', '                provide_automatic_options = False', '', '        # Add the required methods now.', '        methods |= required_methods', '', '        rule = self.url_rule_class(rule, methods=methods, **options)', '        rule.provide_automatic_options = provide_automatic_options  # type: ignore', '', '        self.url_map.add(rule)', '        if view_func is not None:', '            old_func = self.view_functions.get(endpoint)', '            if old_func is not None and old_func != view_func:', '                raise AssertionError(', '                    \"View function mapping is overwriting an existing\"', '                    f\" endpoint function: {endpoint}\"', '                )', '            self.view_functions[endpoint] = view_func', '', '    @setupmethod', '    def template_filter(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_filter], T_template_filter]:', '        \"\"\"A decorator that is used to register custom template filter.', '        You can specify a name for the filter, otherwise the function', '        name will be used. Example::', '', '          @app.template_filter()', '          def reverse(s):', '              return s[::-1]', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_template_filter(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_template_filter(', '        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template filter.  Works exactly like the', '        :meth:`template_filter` decorator.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.filters[name or f.__name__] = f', '', '    @setupmethod', '    def template_test(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_test], T_template_test]:', '        \"\"\"A decorator that is used to register custom template test.', '        You can specify a name for the test, otherwise the function', '        name will be used. Example::', '', '          @app.template_test()', '          def is_prime(n):', '              if n == 2:', '                  return True', '              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):', '                  if n % i == 0:', '                      return False', '              return True', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_test) -> T_template_test:', '            self.add_template_test(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_template_test(', '        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template test.  Works exactly like the', '        :meth:`template_test` decorator.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.tests[name or f.__name__] = f', '', '    @setupmethod', '    def template_global(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_global], T_template_global]:', '        \"\"\"A decorator that is used to register a custom template global function.', '        You can specify a name for the global function, otherwise the function', '        name will be used. Example::', '', '            @app.template_global()', '            def double(n):', '                return 2 * n', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global function, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_global) -> T_template_global:', '            self.add_template_global(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_template_global(', '        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template global function. Works exactly like the', '        :meth:`template_global` decorator.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global function, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.globals[name or f.__name__] = f', '', '    @setupmethod', '    def teardown_appcontext(self, f: T_teardown) -> T_teardown:', '        \"\"\"Registers a function to be called when the application', '        context is popped. The application context is typically popped', '        after the request context for each request, at the end of CLI', '        commands, or after a manually pushed context ends.', '', '        .. code-block:: python', '', '            with app.app_context():', '                ...', '', '        When the ``with`` block exits (or ``ctx.pop()`` is called), the', '        teardown functions are called just before the app context is', '        made inactive. Since a request context typically also manages an', '        application context it would also be called when you pop a', '        request context.', '', '        When a teardown function was called because of an unhandled', '        exception it will be passed an error object. If an', '        :meth:`errorhandler` is registered, it will handle the exception', '        and the teardown will not receive it.', '', '        Teardown functions must avoid raising exceptions. If they', '        execute code that might fail they must surround that code with a', '        ``try``/``except`` block and log any errors.', '', '        The return values of teardown functions are ignored.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        self.teardown_appcontext_funcs.append(f)', '        return f', '', '    @setupmethod', '    def shell_context_processor(', '        self, f: T_shell_context_processor', '    ) -> T_shell_context_processor:', '        \"\"\"Registers a shell context processor function.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        self.shell_context_processors.append(f)', '        return f', '', '    def _find_error_handler(self, e: Exception) -> t.Optional[ft.ErrorHandlerCallable]:', '        \"\"\"Return a registered error handler for an exception in this order:', '        blueprint handler for a specific code, app handler for a specific code,', '        blueprint handler for an exception class, app handler for an exception', '        class, or ``None`` if a suitable handler is not found.', '        \"\"\"', '        exc_class, code = self._get_exc_class_and_code(type(e))', '        names = (*request.blueprints, None)', '', '        for c in (code, None) if code is not None else (None,):', '            for name in names:', '                handler_map = self.error_handler_spec[name][c]', '', '                if not handler_map:', '                    continue', '', '                for cls in exc_class.__mro__:', '                    handler = handler_map.get(cls)', '', '                    if handler is not None:', '                        return handler', '        return None', '', '    def handle_http_exception(', '        self, e: HTTPException', '    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:', '        \"\"\"Handles an HTTP exception.  By default this will invoke the', '        registered error handlers and fall back to returning the', '        exception as response.', '', '        .. versionchanged:: 1.0.3', '            ``RoutingException``, used internally for actions such as', '             slash redirects during routing, is not passed to error', '             handlers.', '', '        .. versionchanged:: 1.0', '            Exceptions are looked up by code *and* by MRO, so', '            ``HTTPException`` subclasses can be handled with a catch-all', '            handler for the base ``HTTPException``.', '', '        .. versionadded:: 0.3', '        \"\"\"', \"        # Proxy exceptions don't have error codes.  We want to always return\", '        # those unchanged as errors', '        if e.code is None:', '            return e', '', '        # RoutingExceptions are used internally to trigger routing', '        # actions, such as slash redirects raising RequestRedirect. They', '        # are not raised or handled in user code.', '        if isinstance(e, RoutingException):', '            return e', '', '        handler = self._find_error_handler(e)', '        if handler is None:', '            return e', '        return self.ensure_sync(handler)(e)', '', '    def trap_http_exception(self, e: Exception) -> bool:', '        \"\"\"Checks if an HTTP exception should be trapped or not.  By default', '        this will return ``False`` for all exceptions except for a bad request', '        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It', '        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.', '', '        This is called for all HTTP exceptions raised by a view function.', '        If it returns ``True`` for any exception the error handler for this', '        exception is not called and it shows up as regular exception in the', '        traceback.  This is helpful for debugging implicitly raised HTTP', '        exceptions.', '', '        .. versionchanged:: 1.0', '            Bad request errors are not trapped by default in debug mode.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:', '            return True', '', '        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]', '', '        # if unset, trap key errors in debug mode', '        if (', '            trap_bad_request is None', '            and self.debug', '            and isinstance(e, BadRequestKeyError)', '        ):', '            return True', '', '        if trap_bad_request:', '            return isinstance(e, BadRequest)', '', '        return False', '', '    def handle_user_exception(', '        self, e: Exception', '    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:', '        \"\"\"This method is called whenever an exception occurs that', '        should be handled. A special case is :class:`~werkzeug', '        .exceptions.HTTPException` which is forwarded to the', '        :meth:`handle_http_exception` method. This function will either', '        return a response value or reraise the exception with the same', '        traceback.', '', '        .. versionchanged:: 1.0', '            Key errors raised from request data like ``form`` show the', '            bad key in debug mode rather than a generic bad request', '            message.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        if isinstance(e, BadRequestKeyError) and (', '            self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]', '        ):', '            e.show_exception = True', '', '        if isinstance(e, HTTPException) and not self.trap_http_exception(e):', '            return self.handle_http_exception(e)', '', '        handler = self._find_error_handler(e)', '', '        if handler is None:', '            raise', '', '        return self.ensure_sync(handler)(e)', '', '    def handle_exception(self, e: Exception) -> Response:', '        \"\"\"Handle an exception that did not have an error handler', '        associated with it, or that was raised from an error handler.', '        This always causes a 500 ``InternalServerError``.', '', '        Always sends the :data:`got_request_exception` signal.', '', '        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug', '        mode, the error will be re-raised so that the debugger can', '        display it. Otherwise, the original exception is logged, and', '        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.', '', '        If an error handler is registered for ``InternalServerError`` or', '        ``500``, it will be used. For consistency, the handler will', '        always receive the ``InternalServerError``. The original', '        unhandled exception is available as ``e.original_exception``.', '', '        .. versionchanged:: 1.1.0', '            Always passes the ``InternalServerError`` instance to the', '            handler, setting ``original_exception`` to the unhandled', '            error.', '', '        .. versionchanged:: 1.1.0', '            ``after_request`` functions and other finalization is done', '            even for the default 500 response when there is no handler.', '', '        .. versionadded:: 0.3', '        \"\"\"', '        exc_info = sys.exc_info()', '        got_request_exception.send(self, exception=e)', '        propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]', '', '        if propagate is None:', '            propagate = self.testing or self.debug', '', '        if propagate:', '            # Re-raise if called with an active exception, otherwise', '            # raise the passed in exception.', '            if exc_info[1] is e:', '                raise', '', '            raise e', '', '        self.log_exception(exc_info)', '        server_error: t.Union[InternalServerError, ft.ResponseReturnValue]', '        server_error = InternalServerError(original_exception=e)', '        handler = self._find_error_handler(server_error)', '', '        if handler is not None:', '            server_error = self.ensure_sync(handler)(server_error)', '', '        return self.finalize_request(server_error, from_error_handler=True)', '', '    def log_exception(', '        self,', '        exc_info: t.Union[', '            t.Tuple[type, BaseException, TracebackType], t.Tuple[None, None, None]', '        ],', '    ) -> None:', '        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`', '        if debugging is disabled and right before the handler is called.', '        The default implementation logs the exception as error on the', '        :attr:`logger`.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        self.logger.error(', '            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info', '        )', '', '    def raise_routing_exception(self, request: Request) -> \"te.NoReturn\":', '        \"\"\"Intercept routing exceptions and possibly do something else.', '', '        In debug mode, intercept a routing redirect and replace it with', '        an error if the body will be discarded.', '', \"        With modern Werkzeug this shouldn't occur, since it now uses a\", '        308 status which tells the browser to resend the method and', '        body.', '', '        .. versionchanged:: 2.1', \"            Don't intercept 307 and 308 redirects.\", '', '        :meta private:', '        :internal:', '        \"\"\"', '        if (', '            not self.debug', '            or not isinstance(request.routing_exception, RequestRedirect)', '            or request.routing_exception.code in {307, 308}', '            or request.method in {\"GET\", \"HEAD\", \"OPTIONS\"}', '        ):', '            raise request.routing_exception  # type: ignore', '', '        from .debughelpers import FormDataRoutingRedirect', '', '        raise FormDataRoutingRedirect(request)', '', '    def dispatch_request(self) -> ft.ResponseReturnValue:', '        \"\"\"Does the request dispatching.  Matches the URL and returns the', '        return value of the view or error handler.  This does not have to', '        be a response object.  In order to convert the return value to a', '        proper response object, call :func:`make_response`.', '', '        .. versionchanged:: 0.7', '           This no longer does the exception handling, this code was', '           moved to the new :meth:`full_dispatch_request`.', '        \"\"\"', '        req = request_ctx.request', '        if req.routing_exception is not None:', '            self.raise_routing_exception(req)', '        rule: Rule = req.url_rule  # type: ignore[assignment]', '        # if we provide automatic options for this URL and the', '        # request came with the OPTIONS method, reply automatically', '        if (', '            getattr(rule, \"provide_automatic_options\", False)', '            and req.method == \"OPTIONS\"', '        ):', '            return self.make_default_options_response()', '        # otherwise dispatch to the handler for that endpoint', '        view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]', '        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)', '', '    def full_dispatch_request(self) -> Response:', '        \"\"\"Dispatches the request and on top of that performs request', '        pre and postprocessing as well as HTTP exception catching and', '        error handling.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        self._got_first_request = True', '', '        try:', '            request_started.send(self)', '            rv = self.preprocess_request()', '            if rv is None:', '                rv = self.dispatch_request()', '        except Exception as e:', '            rv = self.handle_user_exception(e)', '        return self.finalize_request(rv)', '', '    def finalize_request(', '        self,', '        rv: t.Union[ft.ResponseReturnValue, HTTPException],', '        from_error_handler: bool = False,', '    ) -> Response:', '        \"\"\"Given the return value from a view function this finalizes', '        the request by converting it into a response and invoking the', '        postprocessing functions.  This is invoked for both normal', '        request dispatching as well as error handlers.', '', '        Because this means that it might be called as a result of a', '        failure a special safe mode is available which can be enabled', '        with the `from_error_handler` flag.  If enabled, failures in', '        response processing will be logged and otherwise ignored.', '', '        :internal:', '        \"\"\"', '        response = self.make_response(rv)', '        try:', '            response = self.process_response(response)', '            request_finished.send(self, response=response)', '        except Exception:', '            if not from_error_handler:', '                raise', '            self.logger.exception(', '                \"Request finalizing failed with an error while handling an error\"', '            )', '        return response', '', '    def make_default_options_response(self) -> Response:', '        \"\"\"This method is called to create the default ``OPTIONS`` response.', '        This can be changed through subclassing to change the default', '        behavior of ``OPTIONS`` responses.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        adapter = request_ctx.url_adapter', '        methods = adapter.allowed_methods()  # type: ignore[union-attr]', '        rv = self.response_class()', '        rv.allow.update(methods)', '        return rv', '', '    def should_ignore_error(self, error: t.Optional[BaseException]) -> bool:', '        \"\"\"This is called to figure out if an error should be ignored', '        or not as far as the teardown system is concerned.  If this', '        function returns ``True`` then the teardown handlers will not be', '        passed the error.', '', '        .. versionadded:: 0.10', '        \"\"\"', '        return False', '', '    def ensure_sync(self, func: t.Callable) -> t.Callable:', '        \"\"\"Ensure that the function is synchronous for WSGI workers.', '        Plain ``def`` functions are returned as-is. ``async def``', '        functions are wrapped to run and wait for the response.', '', '        Override this method to change how the app runs async views.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        if iscoroutinefunction(func):', '            return self.async_to_sync(func)', '', '        return func', '', '    def async_to_sync(', '        self, func: t.Callable[..., t.Coroutine]', '    ) -> t.Callable[..., t.Any]:', '        \"\"\"Return a sync function that will run the coroutine function.', '', '        .. code-block:: python', '', '            result = app.async_to_sync(func)(*args, **kwargs)', '', '        Override this method to change how the app converts async code', '        to be synchronously callable.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        try:', '            from asgiref.sync import async_to_sync as asgiref_async_to_sync', '        except ImportError:', '            raise RuntimeError(', '                \"Install Flask with the \\'async\\' extra in order to use async views.\"', '            ) from None', '', '        return asgiref_async_to_sync(func)', '', '    def url_for(', '        self,', '        endpoint: str,', '        *,', '        _anchor: t.Optional[str] = None,', '        _method: t.Optional[str] = None,', '        _scheme: t.Optional[str] = None,', '        _external: t.Optional[bool] = None,', '        **values: t.Any,', '    ) -> str:', '        \"\"\"Generate a URL to the given endpoint with the given values.', '', '        This is called by :func:`flask.url_for`, and can be called', '        directly as well.', '', '        An *endpoint* is the name of a URL rule, usually added with', '        :meth:`@app.route() <route>`, and usually the same name as the', '        view function. A route defined in a :class:`~flask.Blueprint`', \"        will prepend the blueprint's name separated by a ``.`` to the\", '        endpoint.', '', '        In some cases, such as email messages, you want URLs to include', '        the scheme and domain, like ``https://example.com/hello``. When', '        not in an active request, URLs will be external by default, but', '        this requires setting :data:`SERVER_NAME` so Flask knows what', '        domain to use. :data:`APPLICATION_ROOT` and', '        :data:`PREFERRED_URL_SCHEME` should also be configured as', '        needed. This config is only used when not in an active request.', '', '        Functions can be decorated with :meth:`url_defaults` to modify', '        keyword arguments before the URL is built.', '', '        If building fails for some reason, such as an unknown endpoint', \"        or incorrect values, the app's :meth:`handle_url_build_error`\", '        method is called. If that returns a string, that is returned,', '        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.', '', '        :param endpoint: The endpoint name associated with the URL to', '            generate. If this starts with a ``.``, the current blueprint', '            name (if any) will be used.', '        :param _anchor: If given, append this as ``#anchor`` to the URL.', '        :param _method: If given, generate the URL associated with this', '            method for the endpoint.', '        :param _scheme: If given, the URL will have this scheme if it', '            is external.', '        :param _external: If given, prefer the URL to be internal', '            (False) or require it to be external (True). External URLs', '            include the scheme and domain. When not in an active', '            request, URLs are external by default.', '        :param values: Values to use for the variable parts of the URL', '            rule. Unknown keys are appended as query string arguments,', '            like ``?a=b&c=d``.', '', '        .. versionadded:: 2.2', '            Moved from ``flask.url_for``, which calls this method.', '        \"\"\"', '        req_ctx = _cv_request.get(None)', '', '        if req_ctx is not None:', '            url_adapter = req_ctx.url_adapter', '            blueprint_name = req_ctx.request.blueprint', '', '            # If the endpoint starts with \".\" and the request matches a', '            # blueprint, the endpoint is relative to the blueprint.', '            if endpoint[:1] == \".\":', '                if blueprint_name is not None:', '                    endpoint = f\"{blueprint_name}{endpoint}\"', '                else:', '                    endpoint = endpoint[1:]', '', '            # When in a request, generate a URL without scheme and', '            # domain by default, unless a scheme is given.', '            if _external is None:', '                _external = _scheme is not None', '        else:', '            app_ctx = _cv_app.get(None)', '', '            # If called by helpers.url_for, an app context is active,', '            # use its url_adapter. Otherwise, app.url_for was called', '            # directly, build an adapter.', '            if app_ctx is not None:', '                url_adapter = app_ctx.url_adapter', '            else:', '                url_adapter = self.create_url_adapter(None)', '', '            if url_adapter is None:', '                raise RuntimeError(', '                    \"Unable to build URLs outside an active request\"', '                    \" without \\'SERVER_NAME\\' configured. Also configure\"', '                    \" \\'APPLICATION_ROOT\\' and \\'PREFERRED_URL_SCHEME\\' as\"', '                    \" needed.\"', '                )', '', '            # When outside a request, generate a URL with scheme and', '            # domain by default.', '            if _external is None:', '                _external = True', '', '        # It is an error to set _scheme when _external=False, in order', '        # to avoid accidental insecure URLs.', '        if _scheme is not None and not _external:', '            raise ValueError(\"When specifying \\'_scheme\\', \\'_external\\' must be True.\")', '', '        self.inject_url_defaults(endpoint, values)', '', '        try:', '            rv = url_adapter.build(  # type: ignore[union-attr]', '                endpoint,', '                values,', '                method=_method,', '                url_scheme=_scheme,', '                force_external=_external,', '            )', '        except BuildError as error:', '            values.update(', '                _anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external', '            )', '            return self.handle_url_build_error(error, endpoint, values)', '', '        if _anchor is not None:', '            _anchor = _url_quote(_anchor, safe=\"%!#$&\\'()*+,/:;=?@\")', '            rv = f\"{rv}#{_anchor}\"', '', '        return rv', '', '    def redirect(self, location: str, code: int = 302) -> BaseResponse:', '        \"\"\"Create a redirect response object.', '', '        This is called by :func:`flask.redirect`, and can be called', '        directly as well.', '', '        :param location: The URL to redirect to.', '        :param code: The status code for the redirect.', '', '        .. versionadded:: 2.2', '            Moved from ``flask.redirect``, which calls this method.', '        \"\"\"', '        return _wz_redirect(location, code=code, Response=self.response_class)', '', '    def make_response(self, rv: ft.ResponseReturnValue) -> Response:', '        \"\"\"Convert the return value from a view function to an instance of', '        :attr:`response_class`.', '', '        :param rv: the return value from the view function. The view function', '            must return a response. Returning ``None``, or the view ending', '            without returning, is not allowed. The following types are allowed', '            for ``view_rv``:', '', '            ``str``', '                A response object is created with the string encoded to UTF-8', '                as the body.', '', '            ``bytes``', '                A response object is created with the bytes as the body.', '', '            ``dict``', \"                A dictionary that will be jsonify'd before being returned.\", '', '            ``list``', \"                A list that will be jsonify'd before being returned.\", '', '            ``generator`` or ``iterator``', '                A generator that returns ``str`` or ``bytes`` to be', '                streamed as the response.', '', '            ``tuple``', '                Either ``(body, status, headers)``, ``(body, status)``, or', '                ``(body, headers)``, where ``body`` is any of the other types', '                allowed here, ``status`` is a string or an integer, and', '                ``headers`` is a dictionary or a list of ``(key, value)``', '                tuples. If ``body`` is a :attr:`response_class` instance,', '                ``status`` overwrites the exiting value and ``headers`` are', '                extended.', '', '            :attr:`response_class`', '                The object is returned unchanged.', '', '            other :class:`~werkzeug.wrappers.Response` class', '                The object is coerced to :attr:`response_class`.', '', '            :func:`callable`', '                The function is called as a WSGI application. The result is', '                used to create a response object.', '', '        .. versionchanged:: 2.2', '            A generator will be converted to a streaming response.', '            A list will be converted to a JSON response.', '', '        .. versionchanged:: 1.1', '            A dict will be converted to a JSON response.', '', '        .. versionchanged:: 0.9', '           Previously a tuple was interpreted as the arguments for the', '           response object.', '        \"\"\"', '', '        status = headers = None', '', '        # unpack tuple returns', '        if isinstance(rv, tuple):', '            len_rv = len(rv)', '', '            # a 3-tuple is unpacked directly', '            if len_rv == 3:', '                rv, status, headers = rv  # type: ignore[misc]', '            # decide if a 2-tuple has status or headers', '            elif len_rv == 2:', '                if isinstance(rv[1], (Headers, dict, tuple, list)):', '                    rv, headers = rv', '                else:', '                    rv, status = rv  # type: ignore[assignment,misc]', '            # other sized tuples are not allowed', '            else:', '                raise TypeError(', '                    \"The view function did not return a valid response tuple.\"', '                    \" The tuple must have the form (body, status, headers),\"', '                    \" (body, status), or (body, headers).\"', '                )', '', '        # the body must not be None', '        if rv is None:', '            raise TypeError(', '                f\"The view function for {request.endpoint!r} did not\"', '                \" return a valid response. The function either returned\"', '                \" None or ended without a return statement.\"', '            )', '', '        # make sure the body is an instance of the response class', '        if not isinstance(rv, self.response_class):', '            if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, _abc_Iterator):', '                # let the response class set the status and headers instead of', '                # waiting to do it manually, so that the class can handle any', '                # special logic', '                rv = self.response_class(', '                    rv,', '                    status=status,', '                    headers=headers,  # type: ignore[arg-type]', '                )', '                status = headers = None', '            elif isinstance(rv, (dict, list)):', '                rv = self.json.response(rv)', '            elif isinstance(rv, BaseResponse) or callable(rv):', '                # evaluate a WSGI callable, or coerce a different response', '                # class to the correct type', '                try:', '                    rv = self.response_class.force_type(', '                        rv, request.environ  # type: ignore[arg-type]', '                    )', '                except TypeError as e:', '                    raise TypeError(', '                        f\"{e}\\\\nThe view function did not return a valid\"', '                        \" response. The return type must be a string,\"', '                        \" dict, list, tuple with headers or status,\"', '                        \" Response instance, or WSGI callable, but it\"', '                        f\" was a {type(rv).__name__}.\"', '                    ).with_traceback(sys.exc_info()[2]) from None', '            else:', '                raise TypeError(', '                    \"The view function did not return a valid\"', '                    \" response. The return type must be a string,\"', '                    \" dict, list, tuple with headers or status,\"', '                    \" Response instance, or WSGI callable, but it was a\"', '                    f\" {type(rv).__name__}.\"', '                )', '', '        rv = t.cast(Response, rv)', '        # prefer the status if it was provided', '        if status is not None:', '            if isinstance(status, (str, bytes, bytearray)):', '                rv.status = status', '            else:', '                rv.status_code = status', '', '        # extend existing headers with provided headers', '        if headers:', '            rv.headers.update(headers)  # type: ignore[arg-type]', '', '        return rv', '', '    def create_url_adapter(', '        self, request: t.Optional[Request]', '    ) -> t.Optional[MapAdapter]:', '        \"\"\"Creates a URL adapter for the given request. The URL adapter', '        is created at a point where the request context is not yet set', '        up so the request is passed explicitly.', '', '        .. versionadded:: 0.6', '', '        .. versionchanged:: 0.9', '           This can now also be called without a request object when the', '           URL adapter is created for the application context.', '', '        .. versionchanged:: 1.0', '            :data:`SERVER_NAME` no longer implicitly enables subdomain', '            matching. Use :attr:`subdomain_matching` instead.', '        \"\"\"', '        if request is not None:', '            # If subdomain matching is disabled (the default), use the', '            # default subdomain in all cases. This should be the default', '            # in Werkzeug but it currently does not have that feature.', '            if not self.subdomain_matching:', '                subdomain = self.url_map.default_subdomain or None', '            else:', '                subdomain = None', '', '            return self.url_map.bind_to_environ(', '                request.environ,', '                server_name=self.config[\"SERVER_NAME\"],', '                subdomain=subdomain,', '            )', '        # We need at the very least the server name to be set for this', '        # to work.', '        if self.config[\"SERVER_NAME\"] is not None:', '            return self.url_map.bind(', '                self.config[\"SERVER_NAME\"],', '                script_name=self.config[\"APPLICATION_ROOT\"],', '                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],', '            )', '', '        return None', '', '    def inject_url_defaults(self, endpoint: str, values: dict) -> None:', '        \"\"\"Injects the URL defaults for the given endpoint directly into', '        the values dictionary passed.  This is used internally and', '        automatically called on URL building.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        names: t.Iterable[t.Optional[str]] = (None,)', '', '        # url_for may be called outside a request context, parse the', '        # passed endpoint instead of using request.blueprints.', '        if \".\" in endpoint:', '            names = chain(', '                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))', '            )', '', '        for name in names:', '            if name in self.url_default_functions:', '                for func in self.url_default_functions[name]:', '                    func(endpoint, values)', '', '    def handle_url_build_error(', '        self, error: BuildError, endpoint: str, values: t.Dict[str, t.Any]', '    ) -> str:', '        \"\"\"Called by :meth:`.url_for` if a', '        :exc:`~werkzeug.routing.BuildError` was raised. If this returns', '        a value, it will be returned by ``url_for``, otherwise the error', '        will be re-raised.', '', '        Each function in :attr:`url_build_error_handlers` is called with', '        ``error``, ``endpoint`` and ``values``. If a function returns', '        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,', '        its return value is returned by ``url_for``.', '', '        :param error: The active ``BuildError`` being handled.', '        :param endpoint: The endpoint being built.', '        :param values: The keyword arguments passed to ``url_for``.', '        \"\"\"', '        for handler in self.url_build_error_handlers:', '            try:', '                rv = handler(error, endpoint, values)', '            except BuildError as e:', '                # make error available outside except block', '                error = e', '            else:', '                if rv is not None:', '                    return rv', '', '        # Re-raise if called with an active exception, otherwise raise', '        # the passed in exception.', '        if error is sys.exc_info()[1]:', '            raise', '', '        raise error', '', '    def preprocess_request(self) -> t.Optional[ft.ResponseReturnValue]:', '        \"\"\"Called before the request is dispatched. Calls', '        :attr:`url_value_preprocessors` registered with the app and the', '        current blueprint (if any). Then calls :attr:`before_request_funcs`', '        registered with the app and the blueprint.', '', '        If any :meth:`before_request` handler returns a non-None value, the', '        value is handled as if it was the return value from the view, and', '        further request handling is stopped.', '        \"\"\"', '        names = (None, *reversed(request.blueprints))', '', '        for name in names:', '            if name in self.url_value_preprocessors:', '                for url_func in self.url_value_preprocessors[name]:', '                    url_func(request.endpoint, request.view_args)', '', '        for name in names:', '            if name in self.before_request_funcs:', '                for before_func in self.before_request_funcs[name]:', '                    rv = self.ensure_sync(before_func)()', '', '                    if rv is not None:', '                        return rv', '', '        return None', '', '    def process_response(self, response: Response) -> Response:', '        \"\"\"Can be overridden in order to modify the response object', \"        before it's sent to the WSGI server.  By default this will\", '        call all the :meth:`after_request` decorated functions.', '', '        .. versionchanged:: 0.5', '           As of Flask 0.5 the functions registered for after request', '           execution are called in reverse order of registration.', '', '        :param response: a :attr:`response_class` object.', '        :return: a new response object or the same, has to be an', '                 instance of :attr:`response_class`.', '        \"\"\"', '        ctx = request_ctx._get_current_object()  # type: ignore[attr-defined]', '', '        for func in ctx._after_request_functions:', '            response = self.ensure_sync(func)(response)', '', '        for name in chain(request.blueprints, (None,)):', '            if name in self.after_request_funcs:', '                for func in reversed(self.after_request_funcs[name]):', '                    response = self.ensure_sync(func)(response)', '', '        if not self.session_interface.is_null_session(ctx.session):', '            self.session_interface.save_session(self, ctx.session, response)', '', '        return response', '', '    def do_teardown_request(', '        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore', '    ) -> None:', '        \"\"\"Called after the request is dispatched and the response is', '        returned, right before the request context is popped.', '', '        This calls all functions decorated with', '        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`', '        if a blueprint handled the request. Finally, the', '        :data:`request_tearing_down` signal is sent.', '', '        This is called by', '        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,', '        which may be delayed during testing to maintain access to', '        resources.', '', '        :param exc: An unhandled exception raised while dispatching the', '            request. Detected from the current exception information if', '            not passed. Passed to each teardown function.', '', '        .. versionchanged:: 0.9', '            Added the ``exc`` argument.', '        \"\"\"', '        if exc is _sentinel:', '            exc = sys.exc_info()[1]', '', '        for name in chain(request.blueprints, (None,)):', '            if name in self.teardown_request_funcs:', '                for func in reversed(self.teardown_request_funcs[name]):', '                    self.ensure_sync(func)(exc)', '', '        request_tearing_down.send(self, exc=exc)', '', '    def do_teardown_appcontext(', '        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore', '    ) -> None:', '        \"\"\"Called right before the application context is popped.', '', '        When handling a request, the application context is popped', '        after the request context. See :meth:`do_teardown_request`.', '', '        This calls all functions decorated with', '        :meth:`teardown_appcontext`. Then the', '        :data:`appcontext_tearing_down` signal is sent.', '', '        This is called by', '        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        if exc is _sentinel:', '            exc = sys.exc_info()[1]', '', '        for func in reversed(self.teardown_appcontext_funcs):', '            self.ensure_sync(func)(exc)', '', '        appcontext_tearing_down.send(self, exc=exc)', '', '    def app_context(self) -> AppContext:', '        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``', '        block to push the context, which will make :data:`current_app`', '        point at this application.', '', '        An application context is automatically pushed by', '        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`', '        when handling a request, and when running a CLI command. Use', '        this to manually create a context outside of these situations.', '', '        ::', '', '            with app.app_context():', '                init_db()', '', '        See :doc:`/appcontext`.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        return AppContext(self)', '', '    def request_context(self, environ: dict) -> RequestContext:', '        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a', '        WSGI environment. Use a ``with`` block to push the context,', '        which will make :data:`request` point at this request.', '', '        See :doc:`/reqcontext`.', '', '        Typically you should not call this from your own code. A request', '        context is automatically pushed by the :meth:`wsgi_app` when', '        handling a request. Use :meth:`test_request_context` to create', '        an environment and context instead of this method.', '', '        :param environ: a WSGI environment', '        \"\"\"', '        return RequestContext(self, environ)', '', '    def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:', '        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI', '        environment created from the given values. This is mostly useful', '        during testing, where you may want to run a function that uses', '        request data without dispatching a full request.', '', '        See :doc:`/reqcontext`.', '', '        Use a ``with`` block to push the context, which will make', '        :data:`request` point at the request for the created', '        environment. ::', '', '            with app.test_request_context(...):', '                generate_report()', '', '        When using the shell, it may be easier to push and pop the', '        context manually to avoid indentation. ::', '', '            ctx = app.test_request_context(...)', '            ctx.push()', '            ...', '            ctx.pop()', '', \"        Takes the same arguments as Werkzeug's\", '        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from', '        the application. See the linked Werkzeug docs for most of the', '        available arguments. Flask-specific behavior is listed here.', '', '        :param path: URL path being requested.', '        :param base_url: Base URL where the app is being served, which', '            ``path`` is relative to. If not given, built from', '            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,', '            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.', '        :param subdomain: Subdomain name to append to', '            :data:`SERVER_NAME`.', '        :param url_scheme: Scheme to use instead of', '            :data:`PREFERRED_URL_SCHEME`.', '        :param data: The request body, either as a string or a dict of', '            form keys and values.', '        :param json: If given, this is serialized as JSON and passed as', '            ``data``. Also defaults ``content_type`` to', '            ``application/json``.', '        :param args: other positional arguments passed to', '            :class:`~werkzeug.test.EnvironBuilder`.', '        :param kwargs: other keyword arguments passed to', '            :class:`~werkzeug.test.EnvironBuilder`.', '        \"\"\"', '        from .testing import EnvironBuilder', '', '        builder = EnvironBuilder(self, *args, **kwargs)', '', '        try:', '            return self.request_context(builder.get_environ())', '        finally:', '            builder.close()', '', '    def wsgi_app(self, environ: dict, start_response: t.Callable) -> t.Any:', '        \"\"\"The actual WSGI application. This is not implemented in', '        :meth:`__call__` so that middlewares can be applied without', '        losing a reference to the app object. Instead of doing this::', '', '            app = MyMiddleware(app)', '', \"        It's a better idea to do this instead::\", '', '            app.wsgi_app = MyMiddleware(app.wsgi_app)', '', '        Then you still have the original application object around and', '        can continue to call methods on it.', '', '        .. versionchanged:: 0.7', '            Teardown events for the request and app contexts are called', '            even if an unhandled error occurs. Other events may not be', '            called depending on when an error occurs during dispatch.', '            See :ref:`callbacks-and-errors`.', '', '        :param environ: A WSGI environment.', '        :param start_response: A callable accepting a status code,', '            a list of headers, and an optional exception context to', '            start the response.', '        \"\"\"', '        ctx = self.request_context(environ)', '        error: t.Optional[BaseException] = None', '        try:', '            try:', '                ctx.push()', '                response = self.full_dispatch_request()', '            except Exception as e:', '                error = e', '                response = self.handle_exception(e)', '            except:  # noqa: B001', '                error = sys.exc_info()[1]', '                raise', '            return response(environ, start_response)', '        finally:', '            if \"werkzeug.debug.preserve_context\" in environ:', '                environ[\"werkzeug.debug.preserve_context\"](_cv_app.get())', '                environ[\"werkzeug.debug.preserve_context\"](_cv_request.get())', '', '            if error is not None and self.should_ignore_error(error):', '                error = None', '', '            ctx.pop(error)', '', '    def __call__(self, environ: dict, start_response: t.Callable) -> t.Any:', '        \"\"\"The WSGI server calls the Flask application object as the', '        WSGI application. This calls :meth:`wsgi_app`, which can be', '        wrapped to apply middleware.', '        \"\"\"', '        return self.wsgi_app(environ, start_response)'], 'methods': [{'name': '__init__', 'start_line': 367, 'end_line': 520, 'text': ['    def __init__(', '        self,', '        import_name: str,', '        static_url_path: t.Optional[str] = None,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = \"static\",', '        static_host: t.Optional[str] = None,', '        host_matching: bool = False,', '        subdomain_matching: bool = False,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = \"templates\",', '        instance_path: t.Optional[str] = None,', '        instance_relative_config: bool = False,', '        root_path: t.Optional[str] = None,', '    ):', '        super().__init__(', '            import_name=import_name,', '            static_folder=static_folder,', '            static_url_path=static_url_path,', '            template_folder=template_folder,', '            root_path=root_path,', '        )', '', '        if instance_path is None:', '            instance_path = self.auto_find_instance_path()', '        elif not os.path.isabs(instance_path):', '            raise ValueError(', '                \"If an instance path is provided it must be absolute.\"', '                \" A relative path was given instead.\"', '            )', '', '        #: Holds the path to the instance folder.', '        #:', '        #: .. versionadded:: 0.8', '        self.instance_path = instance_path', '', '        #: The configuration dictionary as :class:`Config`.  This behaves', '        #: exactly like a regular dictionary but supports additional methods', '        #: to load a config from files.', '        self.config = self.make_config(instance_relative_config)', '', '        #: An instance of :attr:`aborter_class` created by', '        #: :meth:`make_aborter`. This is called by :func:`flask.abort`', '        #: to raise HTTP errors, and can be called directly as well.', '        #:', '        #: .. versionadded:: 2.2', '        #:     Moved from ``flask.abort``, which calls this object.', '        self.aborter = self.make_aborter()', '', '        self.json: JSONProvider = self.json_provider_class(self)', '        \"\"\"Provides access to JSON methods. Functions in ``flask.json``', '        will call methods on this provider when the application context', '        is active. Used for handling JSON requests and responses.', '', '        An instance of :attr:`json_provider_class`. Can be customized by', '        changing that attribute on a subclass, or by assigning to this', '        attribute afterwards.', '', '        The default, :class:`~flask.json.provider.DefaultJSONProvider`,', \"        uses Python's built-in :mod:`json` library. A different provider\", '        can use a different JSON library.', '', '        .. versionadded:: 2.2', '        \"\"\"', '', '        #: A list of functions that are called by', '        #: :meth:`handle_url_build_error` when :meth:`.url_for` raises a', '        #: :exc:`~werkzeug.routing.BuildError`. Each function is called', '        #: with ``error``, ``endpoint`` and ``values``. If a function', '        #: returns ``None`` or raises a ``BuildError``, it is skipped.', '        #: Otherwise, its return value is returned by ``url_for``.', '        #:', '        #: .. versionadded:: 0.9', '        self.url_build_error_handlers: t.List[', '            t.Callable[[Exception, str, t.Dict[str, t.Any]], str]', '        ] = []', '', '        #: A list of functions that are called when the application context', '        #: is destroyed.  Since the application context is also torn down', '        #: if the request ends this is the place to store code that disconnects', '        #: from databases.', '        #:', '        #: .. versionadded:: 0.9', '        self.teardown_appcontext_funcs: t.List[ft.TeardownCallable] = []', '', '        #: A list of shell context processor functions that should be run', '        #: when a shell context is created.', '        #:', '        #: .. versionadded:: 0.11', '        self.shell_context_processors: t.List[ft.ShellContextProcessorCallable] = []', '', '        #: Maps registered blueprint names to blueprint objects. The', '        #: dict retains the order the blueprints were registered in.', '        #: Blueprints can be registered multiple times, this dict does', '        #: not track how often they were attached.', '        #:', '        #: .. versionadded:: 0.7', '        self.blueprints: t.Dict[str, \"Blueprint\"] = {}', '', '        #: a place where extensions can store application specific state.  For', '        #: example this is where an extension could store database engines and', '        #: similar things.', '        #:', '        #: The key must match the name of the extension module. For example in', '        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be', \"        #: ``'foo'``.\", '        #:', '        #: .. versionadded:: 0.7', '        self.extensions: dict = {}', '', '        #: The :class:`~werkzeug.routing.Map` for this instance.  You can use', '        #: this to change the routing converters after the class was created', '        #: but before any routes are connected.  Example::', '        #:', '        #:    from werkzeug.routing import BaseConverter', '        #:', '        #:    class ListConverter(BaseConverter):', '        #:        def to_python(self, value):', \"        #:            return value.split(',')\", '        #:        def to_url(self, values):', \"        #:            return ','.join(super(ListConverter, self).to_url(value)\", '        #:                            for value in values)', '        #:', '        #:    app = Flask(__name__)', \"        #:    app.url_map.converters['list'] = ListConverter\", '        self.url_map = self.url_map_class()', '', '        self.url_map.host_matching = host_matching', '        self.subdomain_matching = subdomain_matching', '', '        # tracks internally if the application already handled at least one', '        # request.', '        self._got_first_request = False', '', '        # Add a static route using the provided static_url_path, static_host,', '        # and static_folder if there is a configured static_folder.', '        # Note we do this without checking if static_folder exists.', '        # For one, it might be created while the server is running (e.g. during', '        # development). Also, Google App Engine stores static files somewhere', '        if self.has_static_folder:', '            assert (', '                bool(static_host) == host_matching', '            ), \"Invalid static_host/host_matching combination\"', '            # Use a weakref to avoid creating a reference cycle between the app', '            # and the view function (see #3761).', '            self_ref = weakref.ref(self)', '            self.add_url_rule(', '                f\"{self.static_url_path}/<path:filename>\",', '                endpoint=\"static\",', '                host=static_host,', '                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950', '            )', '', '        # Set the name of the Click group in case someone wants to add', \"        # the app's commands to another CLI tool.\", '        self.cli.name = self.name']}, {'name': '_check_setup_finished', 'start_line': 522, 'end_line': 532, 'text': ['    def _check_setup_finished(self, f_name: str) -> None:', '        if self._got_first_request:', '            raise AssertionError(', '                f\"The setup method \\'{f_name}\\' can no longer be called\"', '                \" on the application. It has already handled its first\"', '                \" request, any changes will not be applied\"', '                \" consistently.\\\\n\"', '                \"Make sure all imports, decorators, functions, etc.\"', '                \" needed to set up the application are done before\"', '                \" running it.\"', '            )']}, {'name': 'name', 'start_line': 535, 'end_line': 549, 'text': ['    def name(self) -> str:  # type: ignore', '        \"\"\"The name of the application.  This is usually the import name', \"        with the difference that it's guessed from the run file if the\", '        import name is main.  This name is used as a display name when', '        Flask needs the name of the application.  It can be set and overridden', '        to change the value.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        if self.import_name == \"__main__\":', '            fn = getattr(sys.modules[\"__main__\"], \"__file__\", None)', '            if fn is None:', '                return \"__main__\"', '            return os.path.splitext(os.path.basename(fn))[0]', '        return self.import_name']}, {'name': 'logger', 'start_line': 552, 'end_line': 576, 'text': ['    def logger(self) -> logging.Logger:', '        \"\"\"A standard Python :class:`~logging.Logger` for the app, with', '        the same name as :attr:`name`.', '', \"        In debug mode, the logger's :attr:`~logging.Logger.level` will\", '        be set to :data:`~logging.DEBUG`.', '', '        If there are no handlers configured, a default handler will be', '        added. See :doc:`/logging` for more information.', '', '        .. versionchanged:: 1.1.0', '            The logger takes the same name as :attr:`name` rather than', '            hard-coding ``\"flask.app\"``.', '', '        .. versionchanged:: 1.0.0', '            Behavior was simplified. The logger is always named', '            ``\"flask.app\"``. The level is only set during configuration,', \"            it doesn't check ``app.debug`` each time. Only one format is\", '            used, not different ones depending on ``app.debug``. No', '            handlers are removed, and a handler is only added if no', '            handlers are already configured.', '', '        .. versionadded:: 0.3', '        \"\"\"', '        return create_logger(self)']}, {'name': 'jinja_env', 'start_line': 579, 'end_line': 586, 'text': ['    def jinja_env(self) -> Environment:', '        \"\"\"The Jinja environment used to load templates.', '', '        The environment is created the first time this property is', '        accessed. Changing :attr:`jinja_options` after that will have no', '        effect.', '        \"\"\"', '        return self.create_jinja_environment()']}, {'name': 'got_first_request', 'start_line': 589, 'end_line': 605, 'text': ['    def got_first_request(self) -> bool:', '        \"\"\"This attribute is set to ``True`` if the application started', '        handling the first request.', '', '        .. deprecated:: 2.3', '            Will be removed in Flask 2.4.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        import warnings', '', '        warnings.warn(', '            \"\\'got_first_request\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return self._got_first_request']}, {'name': 'make_config', 'start_line': 607, 'end_line': 621, 'text': ['    def make_config(self, instance_relative: bool = False) -> Config:', '        \"\"\"Used to create the config attribute by the Flask constructor.', '        The `instance_relative` parameter is passed in from the constructor', '        of Flask (there named `instance_relative_config`) and indicates if', '        the config should be relative to the instance path or the root path', '        of the application.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        root_path = self.root_path', '        if instance_relative:', '            root_path = self.instance_path', '        defaults = dict(self.default_config)', '        defaults[\"DEBUG\"] = get_debug_flag()', '        return self.config_class(root_path, defaults)']}, {'name': 'make_aborter', 'start_line': 623, 'end_line': 633, 'text': ['    def make_aborter(self) -> Aborter:', '        \"\"\"Create the object to assign to :attr:`aborter`. That object', '        is called by :func:`flask.abort` to raise HTTP errors, and can', '        be called directly as well.', '', '        By default, this creates an instance of :attr:`aborter_class`,', '        which defaults to :class:`werkzeug.exceptions.Aborter`.', '', '        .. versionadded:: 2.2', '        \"\"\"', '        return self.aborter_class()']}, {'name': 'auto_find_instance_path', 'start_line': 635, 'end_line': 646, 'text': ['    def auto_find_instance_path(self) -> str:', '        \"\"\"Tries to locate the instance path if it was not provided to the', '        constructor of the application class.  It will basically calculate', '        the path to a folder named ``instance`` next to your main file or', '        the package.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        prefix, package_path = find_package(self.import_name)', '        if prefix is None:', '            return os.path.join(package_path, \"instance\")', '        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")']}, {'name': 'open_instance_resource', 'start_line': 648, 'end_line': 658, 'text': ['    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:', '        \"\"\"Opens a resource from the application\\'s instance folder', '        (:attr:`instance_path`).  Otherwise works like', '        :meth:`open_resource`.  Instance resources can also be opened for', '        writing.', '', '        :param resource: the name of the resource.  To access resources within', '                         subfolders use forward slashes as separator.', \"        :param mode: resource file opening mode, default is 'rb'.\", '        \"\"\"', '        return open(os.path.join(self.instance_path, resource), mode)']}, {'name': 'create_jinja_environment', 'start_line': 660, 'end_line': 698, 'text': ['    def create_jinja_environment(self) -> Environment:', '        \"\"\"Create the Jinja environment based on :attr:`jinja_options`', '        and the various Jinja-related methods of the app. Changing', '        :attr:`jinja_options` after this will have no effect. Also adds', '        Flask-related globals and filters to the environment.', '', '        .. versionchanged:: 0.11', '           ``Environment.auto_reload`` set in accordance with', '           ``TEMPLATES_AUTO_RELOAD`` configuration option.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        options = dict(self.jinja_options)', '', '        if \"autoescape\" not in options:', '            options[\"autoescape\"] = self.select_jinja_autoescape', '', '        if \"auto_reload\" not in options:', '            auto_reload = self.config[\"TEMPLATES_AUTO_RELOAD\"]', '', '            if auto_reload is None:', '                auto_reload = self.debug', '', '            options[\"auto_reload\"] = auto_reload', '', '        rv = self.jinja_environment(self, **options)', '        rv.globals.update(', '            url_for=self.url_for,', '            get_flashed_messages=get_flashed_messages,', '            config=self.config,', '            # request, session and g are normally added with the', '            # context processor for efficiency reasons but for imported', '            # templates we also want the proxies in there.', '            request=request,', '            session=session,', '            g=g,', '        )', '        rv.policies[\"json.dumps_function\"] = self.json.dumps', '        return rv']}, {'name': 'create_global_jinja_loader', 'start_line': 700, 'end_line': 711, 'text': ['    def create_global_jinja_loader(self) -> DispatchingJinjaLoader:', '        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to', \"        override just the loader and keeping the rest unchanged.  It's\", '        discouraged to override this function.  Instead one should override', '        the :meth:`jinja_loader` function instead.', '', '        The global loader dispatches between the loaders of the application', '        and the individual blueprints.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        return DispatchingJinjaLoader(self)']}, {'name': 'select_jinja_autoescape', 'start_line': 713, 'end_line': 724, 'text': ['    def select_jinja_autoescape(self, filename: str) -> bool:', '        \"\"\"Returns ``True`` if autoescaping should be active for the given', '        template name. If no template name is given, returns `True`.', '', '        .. versionchanged:: 2.2', '            Autoescaping is now enabled by default for ``.svg`` files.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if filename is None:', '            return True', '        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))']}, {'name': 'update_template_context', 'start_line': 726, 'end_line': 752, 'text': ['    def update_template_context(self, context: dict) -> None:', '        \"\"\"Update the template context with some commonly used variables.', '        This injects request, session, config and g into the template', '        context as well as everything template context processors want', '        to inject.  Note that the as of Flask 0.6, the original values', '        in the context will not be overridden if a context processor', '        decides to return a value with the same key.', '', '        :param context: the context as a dictionary that is updated in place', '                        to add extra variables.', '        \"\"\"', '        names: t.Iterable[t.Optional[str]] = (None,)', '', '        # A template may be rendered outside a request context.', '        if request:', '            names = chain(names, reversed(request.blueprints))', '', '        # The values passed to render_template take precedence. Keep a', '        # copy to re-apply after all context functions.', '        orig_ctx = context.copy()', '', '        for name in names:', '            if name in self.template_context_processors:', '                for func in self.template_context_processors[name]:', '                    context.update(func())', '', '        context.update(orig_ctx)']}, {'name': 'make_shell_context', 'start_line': 754, 'end_line': 764, 'text': ['    def make_shell_context(self) -> dict:', '        \"\"\"Returns the shell context for an interactive shell for this', '        application.  This runs all the registered shell context', '        processors.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        rv = {\"app\": self, \"g\": g}', '        for processor in self.shell_context_processors:', '            rv.update(processor())', '        return rv']}, {'name': 'debug', 'start_line': 767, 'end_line': 777, 'text': ['    def debug(self) -> bool:', '        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the', '        development server, an interactive debugger will be shown for unhandled', '        exceptions, and the server will be reloaded when code changes. This maps to the', '        :data:`DEBUG` config key. It may not behave as expected if set late.', '', '        **Do not enable debug mode when deploying in production.**', '', '        Default: ``False``', '        \"\"\"', '        return self.config[\"DEBUG\"]']}, {'name': 'debug', 'start_line': 780, 'end_line': 784, 'text': ['    def debug(self, value: bool) -> None:', '        self.config[\"DEBUG\"] = value', '', '        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:', '            self.jinja_env.auto_reload = value']}, {'name': 'run', 'start_line': 786, 'end_line': 907, 'text': ['    def run(', '        self,', '        host: t.Optional[str] = None,', '        port: t.Optional[int] = None,', '        debug: t.Optional[bool] = None,', '        load_dotenv: bool = True,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Runs the application on a local development server.', '', '        Do not use ``run()`` in a production setting. It is not intended to', '        meet security and performance requirements for a production server.', '        Instead, see :doc:`/deploying/index` for WSGI server recommendations.', '', '        If the :attr:`debug` flag is set the server will automatically reload', '        for code changes and show a debugger in case an exception happened.', '', '        If you want to run the application in debug mode, but disable the', '        code execution on the interactive debugger, you can pass', \"        ``use_evalex=False`` as parameter.  This will keep the debugger's\", '        traceback screen active, but disable code execution.', '', '        It is not recommended to use this function for development with', '        automatic reloading as this is badly supported.  Instead you should', \"        be using the :command:`flask` command line script's ``run`` support.\", '', '        .. admonition:: Keep in Mind', '', '           Flask will suppress any server error with a generic error page', '           unless it is in debug mode.  As such to enable just the', '           interactive debugger without the code reloading, you have to', '           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.', '           Setting ``use_debugger`` to ``True`` without being in debug mode', \"           won't catch any exceptions because there won't be any to\", '           catch.', '', \"        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\", '            have the server available externally as well. Defaults to', \"            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\", '            if present.', '        :param port: the port of the webserver. Defaults to ``5000`` or the', '            port defined in the ``SERVER_NAME`` config variable if present.', '        :param debug: if given, enable or disable debug mode. See', '            :attr:`debug`.', '        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`', '            files to set environment variables. Will also change the working', '            directory to the directory containing the first file found.', '        :param options: the options to be forwarded to the underlying Werkzeug', '            server. See :func:`werkzeug.serving.run_simple` for more', '            information.', '', '        .. versionchanged:: 1.0', '            If installed, python-dotenv will be used to load environment', '            variables from :file:`.env` and :file:`.flaskenv` files.', '', '            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.', '', '            Threaded mode is enabled by default.', '', '        .. versionchanged:: 0.10', '            The default port is now picked from the ``SERVER_NAME``', '            variable.', '        \"\"\"', \"        # Ignore this call so that it doesn't start another server if\", \"        # the 'flask run' command is used.\", '        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":', '            if not is_running_from_reloader():', '                click.secho(', '                    \" * Ignoring a call to \\'app.run()\\' that would block\"', '                    \" the current \\'flask\\' CLI command.\\\\n\"', '                    \"   Only call \\'app.run()\\' in an \\'if __name__ ==\"', '                    \\' \"__main__\"\\\\\\' guard.\\',', '                    fg=\"red\",', '                )', '', '            return', '', '        if get_load_dotenv(load_dotenv):', '            cli.load_dotenv()', '', '            # if set, env var overrides existing value', '            if \"FLASK_DEBUG\" in os.environ:', '                self.debug = get_debug_flag()', '', '        # debug passed to method overrides all other sources', '        if debug is not None:', '            self.debug = bool(debug)', '', '        server_name = self.config.get(\"SERVER_NAME\")', '        sn_host = sn_port = None', '', '        if server_name:', '            sn_host, _, sn_port = server_name.partition(\":\")', '', '        if not host:', '            if sn_host:', '                host = sn_host', '            else:', '                host = \"127.0.0.1\"', '', '        if port or port == 0:', '            port = int(port)', '        elif sn_port:', '            port = int(sn_port)', '        else:', '            port = 5000', '', '        options.setdefault(\"use_reloader\", self.debug)', '        options.setdefault(\"use_debugger\", self.debug)', '        options.setdefault(\"threaded\", True)', '', '        cli.show_server_banner(self.debug, self.name)', '', '        from werkzeug.serving import run_simple', '', '        try:', '            run_simple(t.cast(str, host), port, self, **options)', '        finally:', '            # reset the first request information if the development server', '            # reset normally.  This makes it possible to restart the server', '            # without reloader and that stuff from an interactive shell.', '            self._got_first_request = False']}, {'name': 'test_client', 'start_line': 909, 'end_line': 965, 'text': ['    def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> \"FlaskClient\":', '        \"\"\"Creates a test client for this application.  For information', '        about unit testing head over to :doc:`/testing`.', '', '        Note that if you are testing for assertions or exceptions in your', '        application code, you must set ``app.testing = True`` in order for the', '        exceptions to propagate to the test client.  Otherwise, the exception', '        will be handled by the application (not visible to the test client) and', '        the only indication of an AssertionError or other exception will be a', '        500 status code response to the test client.  See the :attr:`testing`', '        attribute.  For example::', '', '            app.testing = True', '            client = app.test_client()', '', '        The test client can be used in a ``with`` block to defer the closing down', '        of the context until the end of the ``with`` block.  This is useful if', '        you want to access the context locals for testing::', '', '            with app.test_client() as c:', \"                rv = c.get('/?vodka=42')\", \"                assert request.args['vodka'] == '42'\", '', '        Additionally, you may pass optional keyword arguments that will then', \"        be passed to the application's :attr:`test_client_class` constructor.\", '        For example::', '', '            from flask.testing import FlaskClient', '', '            class CustomClient(FlaskClient):', '                def __init__(self, *args, **kwargs):', '                    self._authentication = kwargs.pop(\"authentication\")', '                    super(CustomClient,self).__init__( *args, **kwargs)', '', '            app.test_client_class = CustomClient', \"            client = app.test_client(authentication='Basic ....')\", '', '        See :class:`~flask.testing.FlaskClient` for more information.', '', '        .. versionchanged:: 0.4', '           added support for ``with`` block usage for the client.', '', '        .. versionadded:: 0.7', '           The `use_cookies` parameter was added as well as the ability', '           to override the client to be used by setting the', '           :attr:`test_client_class` attribute.', '', '        .. versionchanged:: 0.11', '           Added `**kwargs` to support passing additional keyword arguments to', '           the constructor of :attr:`test_client_class`.', '        \"\"\"', '        cls = self.test_client_class', '        if cls is None:', '            from .testing import FlaskClient as cls', '        return cls(  # type: ignore', '            self, self.response_class, use_cookies=use_cookies, **kwargs', '        )']}, {'name': 'test_cli_runner', 'start_line': 967, 'end_line': 982, 'text': ['    def test_cli_runner(self, **kwargs: t.Any) -> \"FlaskCliRunner\":', '        \"\"\"Create a CLI runner for testing CLI commands.', '        See :ref:`testing-cli`.', '', '        Returns an instance of :attr:`test_cli_runner_class`, by default', '        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is', '        passed as the first argument.', '', '        .. versionadded:: 1.0', '        \"\"\"', '        cls = self.test_cli_runner_class', '', '        if cls is None:', '            from .testing import FlaskCliRunner as cls', '', '        return cls(self, **kwargs)  # type: ignore']}, {'name': 'register_blueprint', 'start_line': 985, 'end_line': 1010, 'text': ['    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:', '        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword', '        arguments passed to this method will override the defaults set on the', '        blueprint.', '', \"        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\", \"        recording the blueprint in the application's :attr:`blueprints`.\", '', '        :param blueprint: The blueprint to register.', '        :param url_prefix: Blueprint routes will be prefixed with this.', '        :param subdomain: Blueprint routes will match on this subdomain.', '        :param url_defaults: Blueprint routes will use these default values for', '            view arguments.', '        :param options: Additional keyword arguments are passed to', '            :class:`~flask.blueprints.BlueprintSetupState`. They can be', '            accessed in :meth:`~flask.Blueprint.record` callbacks.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        blueprint.register(self, options)']}, {'name': 'iter_blueprints', 'start_line': 1012, 'end_line': 1017, 'text': ['    def iter_blueprints(self) -> t.ValuesView[\"Blueprint\"]:', '        \"\"\"Iterates over all blueprints by the order they were registered.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        return self.blueprints.values()']}, {'name': 'add_url_rule', 'start_line': 1020, 'end_line': 1076, 'text': ['    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        if endpoint is None:', '            endpoint = _endpoint_from_view_func(view_func)  # type: ignore', '        options[\"endpoint\"] = endpoint', '        methods = options.pop(\"methods\", None)', '', '        # if the methods are not given and the view_func object knows its', '        # methods we can use that instead.  If neither exists, we go with', '        # a tuple of only ``GET`` as default.', '        if methods is None:', '            methods = getattr(view_func, \"methods\", None) or (\"GET\",)', '        if isinstance(methods, str):', '            raise TypeError(', '                \"Allowed methods must be a list of strings, for\"', '                \\' example: @app.route(..., methods=[\"POST\"])\\'', '            )', '        methods = {item.upper() for item in methods}', '', '        # Methods that should always be added', '        required_methods = set(getattr(view_func, \"required_methods\", ()))', '', '        # starting with Flask 0.8 the view_func object can disable and', '        # force-enable the automatic options handling.', '        if provide_automatic_options is None:', '            provide_automatic_options = getattr(', '                view_func, \"provide_automatic_options\", None', '            )', '', '        if provide_automatic_options is None:', '            if \"OPTIONS\" not in methods:', '                provide_automatic_options = True', '                required_methods.add(\"OPTIONS\")', '            else:', '                provide_automatic_options = False', '', '        # Add the required methods now.', '        methods |= required_methods', '', '        rule = self.url_rule_class(rule, methods=methods, **options)', '        rule.provide_automatic_options = provide_automatic_options  # type: ignore', '', '        self.url_map.add(rule)', '        if view_func is not None:', '            old_func = self.view_functions.get(endpoint)', '            if old_func is not None and old_func != view_func:', '                raise AssertionError(', '                    \"View function mapping is overwriting an existing\"', '                    f\" endpoint function: {endpoint}\"', '                )', '            self.view_functions[endpoint] = view_func']}, {'name': 'template_filter', 'start_line': 1079, 'end_line': 1098, 'text': ['    def template_filter(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_filter], T_template_filter]:', '        \"\"\"A decorator that is used to register custom template filter.', '        You can specify a name for the filter, otherwise the function', '        name will be used. Example::', '', '          @app.template_filter()', '          def reverse(s):', '              return s[::-1]', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_template_filter(f, name=name)', '            return f', '', '        return decorator']}, {'name': 'add_template_filter', 'start_line': 1101, 'end_line': 1110, 'text': ['    def add_template_filter(', '        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template filter.  Works exactly like the', '        :meth:`template_filter` decorator.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.filters[name or f.__name__] = f']}, {'name': 'template_test', 'start_line': 1113, 'end_line': 1139, 'text': ['    def template_test(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_test], T_template_test]:', '        \"\"\"A decorator that is used to register custom template test.', '        You can specify a name for the test, otherwise the function', '        name will be used. Example::', '', '          @app.template_test()', '          def is_prime(n):', '              if n == 2:', '                  return True', '              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):', '                  if n % i == 0:', '                      return False', '              return True', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_test) -> T_template_test:', '            self.add_template_test(f, name=name)', '            return f', '', '        return decorator']}, {'name': 'add_template_test', 'start_line': 1142, 'end_line': 1153, 'text': ['    def add_template_test(', '        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template test.  Works exactly like the', '        :meth:`template_test` decorator.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.tests[name or f.__name__] = f']}, {'name': 'template_global', 'start_line': 1156, 'end_line': 1177, 'text': ['    def template_global(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_global], T_template_global]:', '        \"\"\"A decorator that is used to register a custom template global function.', '        You can specify a name for the global function, otherwise the function', '        name will be used. Example::', '', '            @app.template_global()', '            def double(n):', '                return 2 * n', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global function, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_global) -> T_template_global:', '            self.add_template_global(f, name=name)', '            return f', '', '        return decorator']}, {'name': 'add_template_global', 'start_line': 1180, 'end_line': 1191, 'text': ['    def add_template_global(', '        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template global function. Works exactly like the', '        :meth:`template_global` decorator.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global function, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.globals[name or f.__name__] = f']}, {'name': 'teardown_appcontext', 'start_line': 1194, 'end_line': 1225, 'text': ['    def teardown_appcontext(self, f: T_teardown) -> T_teardown:', '        \"\"\"Registers a function to be called when the application', '        context is popped. The application context is typically popped', '        after the request context for each request, at the end of CLI', '        commands, or after a manually pushed context ends.', '', '        .. code-block:: python', '', '            with app.app_context():', '                ...', '', '        When the ``with`` block exits (or ``ctx.pop()`` is called), the', '        teardown functions are called just before the app context is', '        made inactive. Since a request context typically also manages an', '        application context it would also be called when you pop a', '        request context.', '', '        When a teardown function was called because of an unhandled', '        exception it will be passed an error object. If an', '        :meth:`errorhandler` is registered, it will handle the exception', '        and the teardown will not receive it.', '', '        Teardown functions must avoid raising exceptions. If they', '        execute code that might fail they must surround that code with a', '        ``try``/``except`` block and log any errors.', '', '        The return values of teardown functions are ignored.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        self.teardown_appcontext_funcs.append(f)', '        return f']}, {'name': 'shell_context_processor', 'start_line': 1228, 'end_line': 1236, 'text': ['    def shell_context_processor(', '        self, f: T_shell_context_processor', '    ) -> T_shell_context_processor:', '        \"\"\"Registers a shell context processor function.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        self.shell_context_processors.append(f)', '        return f']}, {'name': '_find_error_handler', 'start_line': 1238, 'end_line': 1259, 'text': ['    def _find_error_handler(self, e: Exception) -> t.Optional[ft.ErrorHandlerCallable]:', '        \"\"\"Return a registered error handler for an exception in this order:', '        blueprint handler for a specific code, app handler for a specific code,', '        blueprint handler for an exception class, app handler for an exception', '        class, or ``None`` if a suitable handler is not found.', '        \"\"\"', '        exc_class, code = self._get_exc_class_and_code(type(e))', '        names = (*request.blueprints, None)', '', '        for c in (code, None) if code is not None else (None,):', '            for name in names:', '                handler_map = self.error_handler_spec[name][c]', '', '                if not handler_map:', '                    continue', '', '                for cls in exc_class.__mro__:', '                    handler = handler_map.get(cls)', '', '                    if handler is not None:', '                        return handler', '        return None']}, {'name': 'handle_http_exception', 'start_line': 1261, 'end_line': 1294, 'text': ['    def handle_http_exception(', '        self, e: HTTPException', '    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:', '        \"\"\"Handles an HTTP exception.  By default this will invoke the', '        registered error handlers and fall back to returning the', '        exception as response.', '', '        .. versionchanged:: 1.0.3', '            ``RoutingException``, used internally for actions such as', '             slash redirects during routing, is not passed to error', '             handlers.', '', '        .. versionchanged:: 1.0', '            Exceptions are looked up by code *and* by MRO, so', '            ``HTTPException`` subclasses can be handled with a catch-all', '            handler for the base ``HTTPException``.', '', '        .. versionadded:: 0.3', '        \"\"\"', \"        # Proxy exceptions don't have error codes.  We want to always return\", '        # those unchanged as errors', '        if e.code is None:', '            return e', '', '        # RoutingExceptions are used internally to trigger routing', '        # actions, such as slash redirects raising RequestRedirect. They', '        # are not raised or handled in user code.', '        if isinstance(e, RoutingException):', '            return e', '', '        handler = self._find_error_handler(e)', '        if handler is None:', '            return e', '        return self.ensure_sync(handler)(e)']}, {'name': 'trap_http_exception', 'start_line': 1296, 'end_line': 1329, 'text': ['    def trap_http_exception(self, e: Exception) -> bool:', '        \"\"\"Checks if an HTTP exception should be trapped or not.  By default', '        this will return ``False`` for all exceptions except for a bad request', '        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It', '        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.', '', '        This is called for all HTTP exceptions raised by a view function.', '        If it returns ``True`` for any exception the error handler for this', '        exception is not called and it shows up as regular exception in the', '        traceback.  This is helpful for debugging implicitly raised HTTP', '        exceptions.', '', '        .. versionchanged:: 1.0', '            Bad request errors are not trapped by default in debug mode.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:', '            return True', '', '        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]', '', '        # if unset, trap key errors in debug mode', '        if (', '            trap_bad_request is None', '            and self.debug', '            and isinstance(e, BadRequestKeyError)', '        ):', '            return True', '', '        if trap_bad_request:', '            return isinstance(e, BadRequest)', '', '        return False']}, {'name': 'handle_user_exception', 'start_line': 1331, 'end_line': 1361, 'text': ['    def handle_user_exception(', '        self, e: Exception', '    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:', '        \"\"\"This method is called whenever an exception occurs that', '        should be handled. A special case is :class:`~werkzeug', '        .exceptions.HTTPException` which is forwarded to the', '        :meth:`handle_http_exception` method. This function will either', '        return a response value or reraise the exception with the same', '        traceback.', '', '        .. versionchanged:: 1.0', '            Key errors raised from request data like ``form`` show the', '            bad key in debug mode rather than a generic bad request', '            message.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        if isinstance(e, BadRequestKeyError) and (', '            self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]', '        ):', '            e.show_exception = True', '', '        if isinstance(e, HTTPException) and not self.trap_http_exception(e):', '            return self.handle_http_exception(e)', '', '        handler = self._find_error_handler(e)', '', '        if handler is None:', '            raise', '', '        return self.ensure_sync(handler)(e)']}, {'name': 'handle_exception', 'start_line': 1363, 'end_line': 1414, 'text': ['    def handle_exception(self, e: Exception) -> Response:', '        \"\"\"Handle an exception that did not have an error handler', '        associated with it, or that was raised from an error handler.', '        This always causes a 500 ``InternalServerError``.', '', '        Always sends the :data:`got_request_exception` signal.', '', '        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug', '        mode, the error will be re-raised so that the debugger can', '        display it. Otherwise, the original exception is logged, and', '        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.', '', '        If an error handler is registered for ``InternalServerError`` or', '        ``500``, it will be used. For consistency, the handler will', '        always receive the ``InternalServerError``. The original', '        unhandled exception is available as ``e.original_exception``.', '', '        .. versionchanged:: 1.1.0', '            Always passes the ``InternalServerError`` instance to the', '            handler, setting ``original_exception`` to the unhandled', '            error.', '', '        .. versionchanged:: 1.1.0', '            ``after_request`` functions and other finalization is done', '            even for the default 500 response when there is no handler.', '', '        .. versionadded:: 0.3', '        \"\"\"', '        exc_info = sys.exc_info()', '        got_request_exception.send(self, exception=e)', '        propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]', '', '        if propagate is None:', '            propagate = self.testing or self.debug', '', '        if propagate:', '            # Re-raise if called with an active exception, otherwise', '            # raise the passed in exception.', '            if exc_info[1] is e:', '                raise', '', '            raise e', '', '        self.log_exception(exc_info)', '        server_error: t.Union[InternalServerError, ft.ResponseReturnValue]', '        server_error = InternalServerError(original_exception=e)', '        handler = self._find_error_handler(server_error)', '', '        if handler is not None:', '            server_error = self.ensure_sync(handler)(server_error)', '', '        return self.finalize_request(server_error, from_error_handler=True)']}, {'name': 'log_exception', 'start_line': 1416, 'end_line': 1431, 'text': ['    def log_exception(', '        self,', '        exc_info: t.Union[', '            t.Tuple[type, BaseException, TracebackType], t.Tuple[None, None, None]', '        ],', '    ) -> None:', '        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`', '        if debugging is disabled and right before the handler is called.', '        The default implementation logs the exception as error on the', '        :attr:`logger`.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        self.logger.error(', '            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info', '        )']}, {'name': 'raise_routing_exception', 'start_line': 1433, 'end_line': 1459, 'text': ['    def raise_routing_exception(self, request: Request) -> \"te.NoReturn\":', '        \"\"\"Intercept routing exceptions and possibly do something else.', '', '        In debug mode, intercept a routing redirect and replace it with', '        an error if the body will be discarded.', '', \"        With modern Werkzeug this shouldn't occur, since it now uses a\", '        308 status which tells the browser to resend the method and', '        body.', '', '        .. versionchanged:: 2.1', \"            Don't intercept 307 and 308 redirects.\", '', '        :meta private:', '        :internal:', '        \"\"\"', '        if (', '            not self.debug', '            or not isinstance(request.routing_exception, RequestRedirect)', '            or request.routing_exception.code in {307, 308}', '            or request.method in {\"GET\", \"HEAD\", \"OPTIONS\"}', '        ):', '            raise request.routing_exception  # type: ignore', '', '        from .debughelpers import FormDataRoutingRedirect', '', '        raise FormDataRoutingRedirect(request)']}, {'name': 'dispatch_request', 'start_line': 1461, 'end_line': 1484, 'text': ['    def dispatch_request(self) -> ft.ResponseReturnValue:', '        \"\"\"Does the request dispatching.  Matches the URL and returns the', '        return value of the view or error handler.  This does not have to', '        be a response object.  In order to convert the return value to a', '        proper response object, call :func:`make_response`.', '', '        .. versionchanged:: 0.7', '           This no longer does the exception handling, this code was', '           moved to the new :meth:`full_dispatch_request`.', '        \"\"\"', '        req = request_ctx.request', '        if req.routing_exception is not None:', '            self.raise_routing_exception(req)', '        rule: Rule = req.url_rule  # type: ignore[assignment]', '        # if we provide automatic options for this URL and the', '        # request came with the OPTIONS method, reply automatically', '        if (', '            getattr(rule, \"provide_automatic_options\", False)', '            and req.method == \"OPTIONS\"', '        ):', '            return self.make_default_options_response()', '        # otherwise dispatch to the handler for that endpoint', '        view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]', '        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)']}, {'name': 'full_dispatch_request', 'start_line': 1486, 'end_line': 1502, 'text': ['    def full_dispatch_request(self) -> Response:', '        \"\"\"Dispatches the request and on top of that performs request', '        pre and postprocessing as well as HTTP exception catching and', '        error handling.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        self._got_first_request = True', '', '        try:', '            request_started.send(self)', '            rv = self.preprocess_request()', '            if rv is None:', '                rv = self.dispatch_request()', '        except Exception as e:', '            rv = self.handle_user_exception(e)', '        return self.finalize_request(rv)']}, {'name': 'finalize_request', 'start_line': 1504, 'end_line': 1531, 'text': ['    def finalize_request(', '        self,', '        rv: t.Union[ft.ResponseReturnValue, HTTPException],', '        from_error_handler: bool = False,', '    ) -> Response:', '        \"\"\"Given the return value from a view function this finalizes', '        the request by converting it into a response and invoking the', '        postprocessing functions.  This is invoked for both normal', '        request dispatching as well as error handlers.', '', '        Because this means that it might be called as a result of a', '        failure a special safe mode is available which can be enabled', '        with the `from_error_handler` flag.  If enabled, failures in', '        response processing will be logged and otherwise ignored.', '', '        :internal:', '        \"\"\"', '        response = self.make_response(rv)', '        try:', '            response = self.process_response(response)', '            request_finished.send(self, response=response)', '        except Exception:', '            if not from_error_handler:', '                raise', '            self.logger.exception(', '                \"Request finalizing failed with an error while handling an error\"', '            )', '        return response']}, {'name': 'make_default_options_response', 'start_line': 1533, 'end_line': 1544, 'text': ['    def make_default_options_response(self) -> Response:', '        \"\"\"This method is called to create the default ``OPTIONS`` response.', '        This can be changed through subclassing to change the default', '        behavior of ``OPTIONS`` responses.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        adapter = request_ctx.url_adapter', '        methods = adapter.allowed_methods()  # type: ignore[union-attr]', '        rv = self.response_class()', '        rv.allow.update(methods)', '        return rv']}, {'name': 'should_ignore_error', 'start_line': 1546, 'end_line': 1554, 'text': ['    def should_ignore_error(self, error: t.Optional[BaseException]) -> bool:', '        \"\"\"This is called to figure out if an error should be ignored', '        or not as far as the teardown system is concerned.  If this', '        function returns ``True`` then the teardown handlers will not be', '        passed the error.', '', '        .. versionadded:: 0.10', '        \"\"\"', '        return False']}, {'name': 'ensure_sync', 'start_line': 1556, 'end_line': 1568, 'text': ['    def ensure_sync(self, func: t.Callable) -> t.Callable:', '        \"\"\"Ensure that the function is synchronous for WSGI workers.', '        Plain ``def`` functions are returned as-is. ``async def``', '        functions are wrapped to run and wait for the response.', '', '        Override this method to change how the app runs async views.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        if iscoroutinefunction(func):', '            return self.async_to_sync(func)', '', '        return func']}, {'name': 'async_to_sync', 'start_line': 1570, 'end_line': 1591, 'text': ['    def async_to_sync(', '        self, func: t.Callable[..., t.Coroutine]', '    ) -> t.Callable[..., t.Any]:', '        \"\"\"Return a sync function that will run the coroutine function.', '', '        .. code-block:: python', '', '            result = app.async_to_sync(func)(*args, **kwargs)', '', '        Override this method to change how the app converts async code', '        to be synchronously callable.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        try:', '            from asgiref.sync import async_to_sync as asgiref_async_to_sync', '        except ImportError:', '            raise RuntimeError(', '                \"Install Flask with the \\'async\\' extra in order to use async views.\"', '            ) from None', '', '        return asgiref_async_to_sync(func)']}, {'name': 'url_for', 'start_line': 1593, 'end_line': 1716, 'text': ['    def url_for(', '        self,', '        endpoint: str,', '        *,', '        _anchor: t.Optional[str] = None,', '        _method: t.Optional[str] = None,', '        _scheme: t.Optional[str] = None,', '        _external: t.Optional[bool] = None,', '        **values: t.Any,', '    ) -> str:', '        \"\"\"Generate a URL to the given endpoint with the given values.', '', '        This is called by :func:`flask.url_for`, and can be called', '        directly as well.', '', '        An *endpoint* is the name of a URL rule, usually added with', '        :meth:`@app.route() <route>`, and usually the same name as the', '        view function. A route defined in a :class:`~flask.Blueprint`', \"        will prepend the blueprint's name separated by a ``.`` to the\", '        endpoint.', '', '        In some cases, such as email messages, you want URLs to include', '        the scheme and domain, like ``https://example.com/hello``. When', '        not in an active request, URLs will be external by default, but', '        this requires setting :data:`SERVER_NAME` so Flask knows what', '        domain to use. :data:`APPLICATION_ROOT` and', '        :data:`PREFERRED_URL_SCHEME` should also be configured as', '        needed. This config is only used when not in an active request.', '', '        Functions can be decorated with :meth:`url_defaults` to modify', '        keyword arguments before the URL is built.', '', '        If building fails for some reason, such as an unknown endpoint', \"        or incorrect values, the app's :meth:`handle_url_build_error`\", '        method is called. If that returns a string, that is returned,', '        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.', '', '        :param endpoint: The endpoint name associated with the URL to', '            generate. If this starts with a ``.``, the current blueprint', '            name (if any) will be used.', '        :param _anchor: If given, append this as ``#anchor`` to the URL.', '        :param _method: If given, generate the URL associated with this', '            method for the endpoint.', '        :param _scheme: If given, the URL will have this scheme if it', '            is external.', '        :param _external: If given, prefer the URL to be internal', '            (False) or require it to be external (True). External URLs', '            include the scheme and domain. When not in an active', '            request, URLs are external by default.', '        :param values: Values to use for the variable parts of the URL', '            rule. Unknown keys are appended as query string arguments,', '            like ``?a=b&c=d``.', '', '        .. versionadded:: 2.2', '            Moved from ``flask.url_for``, which calls this method.', '        \"\"\"', '        req_ctx = _cv_request.get(None)', '', '        if req_ctx is not None:', '            url_adapter = req_ctx.url_adapter', '            blueprint_name = req_ctx.request.blueprint', '', '            # If the endpoint starts with \".\" and the request matches a', '            # blueprint, the endpoint is relative to the blueprint.', '            if endpoint[:1] == \".\":', '                if blueprint_name is not None:', '                    endpoint = f\"{blueprint_name}{endpoint}\"', '                else:', '                    endpoint = endpoint[1:]', '', '            # When in a request, generate a URL without scheme and', '            # domain by default, unless a scheme is given.', '            if _external is None:', '                _external = _scheme is not None', '        else:', '            app_ctx = _cv_app.get(None)', '', '            # If called by helpers.url_for, an app context is active,', '            # use its url_adapter. Otherwise, app.url_for was called', '            # directly, build an adapter.', '            if app_ctx is not None:', '                url_adapter = app_ctx.url_adapter', '            else:', '                url_adapter = self.create_url_adapter(None)', '', '            if url_adapter is None:', '                raise RuntimeError(', '                    \"Unable to build URLs outside an active request\"', '                    \" without \\'SERVER_NAME\\' configured. Also configure\"', '                    \" \\'APPLICATION_ROOT\\' and \\'PREFERRED_URL_SCHEME\\' as\"', '                    \" needed.\"', '                )', '', '            # When outside a request, generate a URL with scheme and', '            # domain by default.', '            if _external is None:', '                _external = True', '', '        # It is an error to set _scheme when _external=False, in order', '        # to avoid accidental insecure URLs.', '        if _scheme is not None and not _external:', '            raise ValueError(\"When specifying \\'_scheme\\', \\'_external\\' must be True.\")', '', '        self.inject_url_defaults(endpoint, values)', '', '        try:', '            rv = url_adapter.build(  # type: ignore[union-attr]', '                endpoint,', '                values,', '                method=_method,', '                url_scheme=_scheme,', '                force_external=_external,', '            )', '        except BuildError as error:', '            values.update(', '                _anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external', '            )', '            return self.handle_url_build_error(error, endpoint, values)', '', '        if _anchor is not None:', '            _anchor = _url_quote(_anchor, safe=\"%!#$&\\'()*+,/:;=?@\")', '            rv = f\"{rv}#{_anchor}\"', '', '        return rv']}, {'name': 'redirect', 'start_line': 1718, 'end_line': 1730, 'text': ['    def redirect(self, location: str, code: int = 302) -> BaseResponse:', '        \"\"\"Create a redirect response object.', '', '        This is called by :func:`flask.redirect`, and can be called', '        directly as well.', '', '        :param location: The URL to redirect to.', '        :param code: The status code for the redirect.', '', '        .. versionadded:: 2.2', '            Moved from ``flask.redirect``, which calls this method.', '        \"\"\"', '        return _wz_redirect(location, code=code, Response=self.response_class)']}, {'name': 'make_response', 'start_line': 1732, 'end_line': 1870, 'text': ['    def make_response(self, rv: ft.ResponseReturnValue) -> Response:', '        \"\"\"Convert the return value from a view function to an instance of', '        :attr:`response_class`.', '', '        :param rv: the return value from the view function. The view function', '            must return a response. Returning ``None``, or the view ending', '            without returning, is not allowed. The following types are allowed', '            for ``view_rv``:', '', '            ``str``', '                A response object is created with the string encoded to UTF-8', '                as the body.', '', '            ``bytes``', '                A response object is created with the bytes as the body.', '', '            ``dict``', \"                A dictionary that will be jsonify'd before being returned.\", '', '            ``list``', \"                A list that will be jsonify'd before being returned.\", '', '            ``generator`` or ``iterator``', '                A generator that returns ``str`` or ``bytes`` to be', '                streamed as the response.', '', '            ``tuple``', '                Either ``(body, status, headers)``, ``(body, status)``, or', '                ``(body, headers)``, where ``body`` is any of the other types', '                allowed here, ``status`` is a string or an integer, and', '                ``headers`` is a dictionary or a list of ``(key, value)``', '                tuples. If ``body`` is a :attr:`response_class` instance,', '                ``status`` overwrites the exiting value and ``headers`` are', '                extended.', '', '            :attr:`response_class`', '                The object is returned unchanged.', '', '            other :class:`~werkzeug.wrappers.Response` class', '                The object is coerced to :attr:`response_class`.', '', '            :func:`callable`', '                The function is called as a WSGI application. The result is', '                used to create a response object.', '', '        .. versionchanged:: 2.2', '            A generator will be converted to a streaming response.', '            A list will be converted to a JSON response.', '', '        .. versionchanged:: 1.1', '            A dict will be converted to a JSON response.', '', '        .. versionchanged:: 0.9', '           Previously a tuple was interpreted as the arguments for the', '           response object.', '        \"\"\"', '', '        status = headers = None', '', '        # unpack tuple returns', '        if isinstance(rv, tuple):', '            len_rv = len(rv)', '', '            # a 3-tuple is unpacked directly', '            if len_rv == 3:', '                rv, status, headers = rv  # type: ignore[misc]', '            # decide if a 2-tuple has status or headers', '            elif len_rv == 2:', '                if isinstance(rv[1], (Headers, dict, tuple, list)):', '                    rv, headers = rv', '                else:', '                    rv, status = rv  # type: ignore[assignment,misc]', '            # other sized tuples are not allowed', '            else:', '                raise TypeError(', '                    \"The view function did not return a valid response tuple.\"', '                    \" The tuple must have the form (body, status, headers),\"', '                    \" (body, status), or (body, headers).\"', '                )', '', '        # the body must not be None', '        if rv is None:', '            raise TypeError(', '                f\"The view function for {request.endpoint!r} did not\"', '                \" return a valid response. The function either returned\"', '                \" None or ended without a return statement.\"', '            )', '', '        # make sure the body is an instance of the response class', '        if not isinstance(rv, self.response_class):', '            if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, _abc_Iterator):', '                # let the response class set the status and headers instead of', '                # waiting to do it manually, so that the class can handle any', '                # special logic', '                rv = self.response_class(', '                    rv,', '                    status=status,', '                    headers=headers,  # type: ignore[arg-type]', '                )', '                status = headers = None', '            elif isinstance(rv, (dict, list)):', '                rv = self.json.response(rv)', '            elif isinstance(rv, BaseResponse) or callable(rv):', '                # evaluate a WSGI callable, or coerce a different response', '                # class to the correct type', '                try:', '                    rv = self.response_class.force_type(', '                        rv, request.environ  # type: ignore[arg-type]', '                    )', '                except TypeError as e:', '                    raise TypeError(', '                        f\"{e}\\\\nThe view function did not return a valid\"', '                        \" response. The return type must be a string,\"', '                        \" dict, list, tuple with headers or status,\"', '                        \" Response instance, or WSGI callable, but it\"', '                        f\" was a {type(rv).__name__}.\"', '                    ).with_traceback(sys.exc_info()[2]) from None', '            else:', '                raise TypeError(', '                    \"The view function did not return a valid\"', '                    \" response. The return type must be a string,\"', '                    \" dict, list, tuple with headers or status,\"', '                    \" Response instance, or WSGI callable, but it was a\"', '                    f\" {type(rv).__name__}.\"', '                )', '', '        rv = t.cast(Response, rv)', '        # prefer the status if it was provided', '        if status is not None:', '            if isinstance(status, (str, bytes, bytearray)):', '                rv.status = status', '            else:', '                rv.status_code = status', '', '        # extend existing headers with provided headers', '        if headers:', '            rv.headers.update(headers)  # type: ignore[arg-type]', '', '        return rv']}, {'name': 'create_url_adapter', 'start_line': 1872, 'end_line': 1912, 'text': ['    def create_url_adapter(', '        self, request: t.Optional[Request]', '    ) -> t.Optional[MapAdapter]:', '        \"\"\"Creates a URL adapter for the given request. The URL adapter', '        is created at a point where the request context is not yet set', '        up so the request is passed explicitly.', '', '        .. versionadded:: 0.6', '', '        .. versionchanged:: 0.9', '           This can now also be called without a request object when the', '           URL adapter is created for the application context.', '', '        .. versionchanged:: 1.0', '            :data:`SERVER_NAME` no longer implicitly enables subdomain', '            matching. Use :attr:`subdomain_matching` instead.', '        \"\"\"', '        if request is not None:', '            # If subdomain matching is disabled (the default), use the', '            # default subdomain in all cases. This should be the default', '            # in Werkzeug but it currently does not have that feature.', '            if not self.subdomain_matching:', '                subdomain = self.url_map.default_subdomain or None', '            else:', '                subdomain = None', '', '            return self.url_map.bind_to_environ(', '                request.environ,', '                server_name=self.config[\"SERVER_NAME\"],', '                subdomain=subdomain,', '            )', '        # We need at the very least the server name to be set for this', '        # to work.', '        if self.config[\"SERVER_NAME\"] is not None:', '            return self.url_map.bind(', '                self.config[\"SERVER_NAME\"],', '                script_name=self.config[\"APPLICATION_ROOT\"],', '                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],', '            )', '', '        return None']}, {'name': 'inject_url_defaults', 'start_line': 1914, 'end_line': 1933, 'text': ['    def inject_url_defaults(self, endpoint: str, values: dict) -> None:', '        \"\"\"Injects the URL defaults for the given endpoint directly into', '        the values dictionary passed.  This is used internally and', '        automatically called on URL building.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        names: t.Iterable[t.Optional[str]] = (None,)', '', '        # url_for may be called outside a request context, parse the', '        # passed endpoint instead of using request.blueprints.', '        if \".\" in endpoint:', '            names = chain(', '                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))', '            )', '', '        for name in names:', '            if name in self.url_default_functions:', '                for func in self.url_default_functions[name]:', '                    func(endpoint, values)']}, {'name': 'handle_url_build_error', 'start_line': 1935, 'end_line': 1967, 'text': ['    def handle_url_build_error(', '        self, error: BuildError, endpoint: str, values: t.Dict[str, t.Any]', '    ) -> str:', '        \"\"\"Called by :meth:`.url_for` if a', '        :exc:`~werkzeug.routing.BuildError` was raised. If this returns', '        a value, it will be returned by ``url_for``, otherwise the error', '        will be re-raised.', '', '        Each function in :attr:`url_build_error_handlers` is called with', '        ``error``, ``endpoint`` and ``values``. If a function returns', '        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,', '        its return value is returned by ``url_for``.', '', '        :param error: The active ``BuildError`` being handled.', '        :param endpoint: The endpoint being built.', '        :param values: The keyword arguments passed to ``url_for``.', '        \"\"\"', '        for handler in self.url_build_error_handlers:', '            try:', '                rv = handler(error, endpoint, values)', '            except BuildError as e:', '                # make error available outside except block', '                error = e', '            else:', '                if rv is not None:', '                    return rv', '', '        # Re-raise if called with an active exception, otherwise raise', '        # the passed in exception.', '        if error is sys.exc_info()[1]:', '            raise', '', '        raise error']}, {'name': 'preprocess_request', 'start_line': 1969, 'end_line': 1994, 'text': ['    def preprocess_request(self) -> t.Optional[ft.ResponseReturnValue]:', '        \"\"\"Called before the request is dispatched. Calls', '        :attr:`url_value_preprocessors` registered with the app and the', '        current blueprint (if any). Then calls :attr:`before_request_funcs`', '        registered with the app and the blueprint.', '', '        If any :meth:`before_request` handler returns a non-None value, the', '        value is handled as if it was the return value from the view, and', '        further request handling is stopped.', '        \"\"\"', '        names = (None, *reversed(request.blueprints))', '', '        for name in names:', '            if name in self.url_value_preprocessors:', '                for url_func in self.url_value_preprocessors[name]:', '                    url_func(request.endpoint, request.view_args)', '', '        for name in names:', '            if name in self.before_request_funcs:', '                for before_func in self.before_request_funcs[name]:', '                    rv = self.ensure_sync(before_func)()', '', '                    if rv is not None:', '                        return rv', '', '        return None']}, {'name': 'process_response', 'start_line': 1996, 'end_line': 2022, 'text': ['    def process_response(self, response: Response) -> Response:', '        \"\"\"Can be overridden in order to modify the response object', \"        before it's sent to the WSGI server.  By default this will\", '        call all the :meth:`after_request` decorated functions.', '', '        .. versionchanged:: 0.5', '           As of Flask 0.5 the functions registered for after request', '           execution are called in reverse order of registration.', '', '        :param response: a :attr:`response_class` object.', '        :return: a new response object or the same, has to be an', '                 instance of :attr:`response_class`.', '        \"\"\"', '        ctx = request_ctx._get_current_object()  # type: ignore[attr-defined]', '', '        for func in ctx._after_request_functions:', '            response = self.ensure_sync(func)(response)', '', '        for name in chain(request.blueprints, (None,)):', '            if name in self.after_request_funcs:', '                for func in reversed(self.after_request_funcs[name]):', '                    response = self.ensure_sync(func)(response)', '', '        if not self.session_interface.is_null_session(ctx.session):', '            self.session_interface.save_session(self, ctx.session, response)', '', '        return response']}, {'name': 'do_teardown_request', 'start_line': 2024, 'end_line': 2055, 'text': ['    def do_teardown_request(', '        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore', '    ) -> None:', '        \"\"\"Called after the request is dispatched and the response is', '        returned, right before the request context is popped.', '', '        This calls all functions decorated with', '        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`', '        if a blueprint handled the request. Finally, the', '        :data:`request_tearing_down` signal is sent.', '', '        This is called by', '        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,', '        which may be delayed during testing to maintain access to', '        resources.', '', '        :param exc: An unhandled exception raised while dispatching the', '            request. Detected from the current exception information if', '            not passed. Passed to each teardown function.', '', '        .. versionchanged:: 0.9', '            Added the ``exc`` argument.', '        \"\"\"', '        if exc is _sentinel:', '            exc = sys.exc_info()[1]', '', '        for name in chain(request.blueprints, (None,)):', '            if name in self.teardown_request_funcs:', '                for func in reversed(self.teardown_request_funcs[name]):', '                    self.ensure_sync(func)(exc)', '', '        request_tearing_down.send(self, exc=exc)']}, {'name': 'do_teardown_appcontext', 'start_line': 2057, 'end_line': 2080, 'text': ['    def do_teardown_appcontext(', '        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore', '    ) -> None:', '        \"\"\"Called right before the application context is popped.', '', '        When handling a request, the application context is popped', '        after the request context. See :meth:`do_teardown_request`.', '', '        This calls all functions decorated with', '        :meth:`teardown_appcontext`. Then the', '        :data:`appcontext_tearing_down` signal is sent.', '', '        This is called by', '        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        if exc is _sentinel:', '            exc = sys.exc_info()[1]', '', '        for func in reversed(self.teardown_appcontext_funcs):', '            self.ensure_sync(func)(exc)', '', '        appcontext_tearing_down.send(self, exc=exc)']}, {'name': 'app_context', 'start_line': 2082, 'end_line': 2101, 'text': ['    def app_context(self) -> AppContext:', '        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``', '        block to push the context, which will make :data:`current_app`', '        point at this application.', '', '        An application context is automatically pushed by', '        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`', '        when handling a request, and when running a CLI command. Use', '        this to manually create a context outside of these situations.', '', '        ::', '', '            with app.app_context():', '                init_db()', '', '        See :doc:`/appcontext`.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        return AppContext(self)']}, {'name': 'request_context', 'start_line': 2103, 'end_line': 2117, 'text': ['    def request_context(self, environ: dict) -> RequestContext:', '        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a', '        WSGI environment. Use a ``with`` block to push the context,', '        which will make :data:`request` point at this request.', '', '        See :doc:`/reqcontext`.', '', '        Typically you should not call this from your own code. A request', '        context is automatically pushed by the :meth:`wsgi_app` when', '        handling a request. Use :meth:`test_request_context` to create', '        an environment and context instead of this method.', '', '        :param environ: a WSGI environment', '        \"\"\"', '        return RequestContext(self, environ)']}, {'name': 'test_request_context', 'start_line': 2119, 'end_line': 2173, 'text': ['    def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:', '        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI', '        environment created from the given values. This is mostly useful', '        during testing, where you may want to run a function that uses', '        request data without dispatching a full request.', '', '        See :doc:`/reqcontext`.', '', '        Use a ``with`` block to push the context, which will make', '        :data:`request` point at the request for the created', '        environment. ::', '', '            with app.test_request_context(...):', '                generate_report()', '', '        When using the shell, it may be easier to push and pop the', '        context manually to avoid indentation. ::', '', '            ctx = app.test_request_context(...)', '            ctx.push()', '            ...', '            ctx.pop()', '', \"        Takes the same arguments as Werkzeug's\", '        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from', '        the application. See the linked Werkzeug docs for most of the', '        available arguments. Flask-specific behavior is listed here.', '', '        :param path: URL path being requested.', '        :param base_url: Base URL where the app is being served, which', '            ``path`` is relative to. If not given, built from', '            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,', '            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.', '        :param subdomain: Subdomain name to append to', '            :data:`SERVER_NAME`.', '        :param url_scheme: Scheme to use instead of', '            :data:`PREFERRED_URL_SCHEME`.', '        :param data: The request body, either as a string or a dict of', '            form keys and values.', '        :param json: If given, this is serialized as JSON and passed as', '            ``data``. Also defaults ``content_type`` to', '            ``application/json``.', '        :param args: other positional arguments passed to', '            :class:`~werkzeug.test.EnvironBuilder`.', '        :param kwargs: other keyword arguments passed to', '            :class:`~werkzeug.test.EnvironBuilder`.', '        \"\"\"', '        from .testing import EnvironBuilder', '', '        builder = EnvironBuilder(self, *args, **kwargs)', '', '        try:', '            return self.request_context(builder.get_environ())', '        finally:', '            builder.close()']}, {'name': 'wsgi_app', 'start_line': 2175, 'end_line': 2221, 'text': ['    def wsgi_app(self, environ: dict, start_response: t.Callable) -> t.Any:', '        \"\"\"The actual WSGI application. This is not implemented in', '        :meth:`__call__` so that middlewares can be applied without', '        losing a reference to the app object. Instead of doing this::', '', '            app = MyMiddleware(app)', '', \"        It's a better idea to do this instead::\", '', '            app.wsgi_app = MyMiddleware(app.wsgi_app)', '', '        Then you still have the original application object around and', '        can continue to call methods on it.', '', '        .. versionchanged:: 0.7', '            Teardown events for the request and app contexts are called', '            even if an unhandled error occurs. Other events may not be', '            called depending on when an error occurs during dispatch.', '            See :ref:`callbacks-and-errors`.', '', '        :param environ: A WSGI environment.', '        :param start_response: A callable accepting a status code,', '            a list of headers, and an optional exception context to', '            start the response.', '        \"\"\"', '        ctx = self.request_context(environ)', '        error: t.Optional[BaseException] = None', '        try:', '            try:', '                ctx.push()', '                response = self.full_dispatch_request()', '            except Exception as e:', '                error = e', '                response = self.handle_exception(e)', '            except:  # noqa: B001', '                error = sys.exc_info()[1]', '                raise', '            return response(environ, start_response)', '        finally:', '            if \"werkzeug.debug.preserve_context\" in environ:', '                environ[\"werkzeug.debug.preserve_context\"](_cv_app.get())', '                environ[\"werkzeug.debug.preserve_context\"](_cv_request.get())', '', '            if error is not None and self.should_ignore_error(error):', '                error = None', '', '            ctx.pop(error)']}, {'name': '__call__', 'start_line': 2223, 'end_line': 2228, 'text': ['    def __call__(self, environ: dict, start_response: t.Callable) -> t.Any:', '        \"\"\"The WSGI server calls the Flask application object as the', '        WSGI application. This calls :meth:`wsgi_app`, which can be', '        wrapped to apply middleware.', '        \"\"\"', '        return self.wsgi_app(environ, start_response)']}]}], 'functions': [{'name': '_make_timedelta', 'start_line': 98, 'end_line': 102, 'text': ['def _make_timedelta(value: t.Union[timedelta, int, None]) -> t.Optional[timedelta]:', '    if value is None or isinstance(value, timedelta):', '        return value', '', '    return timedelta(seconds=value)']}, {'name': 'iscoroutinefunction', 'start_line': 88, 'end_line': 95, 'text': ['    def iscoroutinefunction(func: t.Any) -> bool:', '        while inspect.ismethod(func):', '            func = func.__func__', '', '        while isinstance(func, functools.partial):', '            func = func.func', '', '        return inspect.iscoroutinefunction(func)']}, {'name': 'decorator', 'start_line': 1094, 'end_line': 1096, 'text': ['        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_template_filter(f, name=name)', '            return f']}, {'name': 'decorator', 'start_line': 1135, 'end_line': 1137, 'text': ['        def decorator(f: T_template_test) -> T_template_test:', '            self.add_template_test(f, name=name)', '            return f']}, {'name': 'decorator', 'start_line': 1173, 'end_line': 1175, 'text': ['        def decorator(f: T_template_global) -> T_template_global:', '            self.add_template_global(f, name=name)', '            return f']}], 'text': ['import functools', 'import inspect', 'import logging', 'import os', 'import sys', 'import typing as t', 'import weakref', 'from collections.abc import Iterator as _abc_Iterator', 'from datetime import timedelta', 'from itertools import chain', 'from types import TracebackType', 'from urllib.parse import quote as _url_quote', '', 'import click', 'from werkzeug.datastructures import Headers', 'from werkzeug.datastructures import ImmutableDict', 'from werkzeug.exceptions import Aborter', 'from werkzeug.exceptions import BadRequest', 'from werkzeug.exceptions import BadRequestKeyError', 'from werkzeug.exceptions import HTTPException', 'from werkzeug.exceptions import InternalServerError', 'from werkzeug.routing import BuildError', 'from werkzeug.routing import Map', 'from werkzeug.routing import MapAdapter', 'from werkzeug.routing import RequestRedirect', 'from werkzeug.routing import RoutingException', 'from werkzeug.routing import Rule', 'from werkzeug.serving import is_running_from_reloader', 'from werkzeug.utils import cached_property', 'from werkzeug.utils import redirect as _wz_redirect', 'from werkzeug.wrappers import Response as BaseResponse', '', 'from . import cli', 'from . import typing as ft', 'from .config import Config', 'from .config import ConfigAttribute', 'from .ctx import _AppCtxGlobals', 'from .ctx import AppContext', 'from .ctx import RequestContext', 'from .globals import _cv_app', 'from .globals import _cv_request', 'from .globals import g', 'from .globals import request', 'from .globals import request_ctx', 'from .globals import session', 'from .helpers import _split_blueprint_path', 'from .helpers import get_debug_flag', 'from .helpers import get_flashed_messages', 'from .helpers import get_load_dotenv', 'from .json.provider import DefaultJSONProvider', 'from .json.provider import JSONProvider', 'from .logging import create_logger', 'from .scaffold import _endpoint_from_view_func', 'from .scaffold import _sentinel', 'from .scaffold import find_package', 'from .scaffold import Scaffold', 'from .scaffold import setupmethod', 'from .sessions import SecureCookieSessionInterface', 'from .sessions import SessionInterface', 'from .signals import appcontext_tearing_down', 'from .signals import got_request_exception', 'from .signals import request_finished', 'from .signals import request_started', 'from .signals import request_tearing_down', 'from .templating import DispatchingJinjaLoader', 'from .templating import Environment', 'from .wrappers import Request', 'from .wrappers import Response', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    import typing_extensions as te', '    from .blueprints import Blueprint', '    from .testing import FlaskClient', '    from .testing import FlaskCliRunner', '', 'T_shell_context_processor = t.TypeVar(', '    \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable', ')', 'T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)', 'T_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)', 'T_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)', 'T_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)', '', 'if sys.version_info >= (3, 8):', '    iscoroutinefunction = inspect.iscoroutinefunction', 'else:', '', '    def iscoroutinefunction(func: t.Any) -> bool:', '        while inspect.ismethod(func):', '            func = func.__func__', '', '        while isinstance(func, functools.partial):', '            func = func.func', '', '        return inspect.iscoroutinefunction(func)', '', '', 'def _make_timedelta(value: t.Union[timedelta, int, None]) -> t.Optional[timedelta]:', '    if value is None or isinstance(value, timedelta):', '        return value', '', '    return timedelta(seconds=value)', '', '', 'class Flask(Scaffold):', '    \"\"\"The flask object implements a WSGI application and acts as the central', '    object.  It is passed the name of the module or package of the', '    application.  Once it is created it will act as a central registry for', '    the view functions, the URL rules, template configuration and much more.', '', '    The name of the package is used to resolve resources from inside the', '    package or the folder the module is contained in depending on if the', '    package parameter resolves to an actual python package (a folder with', '    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).', '', '    For more information about resource loading, see :func:`open_resource`.', '', '    Usually you create a :class:`Flask` instance in your main module or', '    in the :file:`__init__.py` file of your package like this::', '', '        from flask import Flask', '        app = Flask(__name__)', '', '    .. admonition:: About the First Parameter', '', '        The idea of the first parameter is to give Flask an idea of what', '        belongs to your application.  This name is used to find resources', '        on the filesystem, can be used by extensions to improve debugging', '        information and a lot more.', '', \"        So it's important what you provide there.  If you are using a single\", '        module, `__name__` is always the correct value.  If you however are', \"        using a package, it's usually recommended to hardcode the name of\", '        your package there.', '', '        For example if your application is defined in :file:`yourapplication/app.py`', '        you should create it with one of the two versions below::', '', \"            app = Flask('yourapplication')\", \"            app = Flask(__name__.split('.')[0])\", '', '        Why is that?  The application will work even with `__name__`, thanks', '        to how resources are looked up.  However it will make debugging more', '        painful.  Certain extensions can make assumptions based on the', '        import name of your application.  For example the Flask-SQLAlchemy', '        extension will look for the code in your application that triggered', '        an SQL query in debug mode.  If the import name is not properly set', '        up, that debugging information is lost.  (For example it would only', '        pick up SQL queries in `yourapplication.app` and not', '        `yourapplication.views.frontend`)', '', '    .. versionadded:: 0.7', '       The `static_url_path`, `static_folder`, and `template_folder`', '       parameters were added.', '', '    .. versionadded:: 0.8', '       The `instance_path` and `instance_relative_config` parameters were', '       added.', '', '    .. versionadded:: 0.11', '       The `root_path` parameter was added.', '', '    .. versionadded:: 1.0', '       The ``host_matching`` and ``static_host`` parameters were added.', '', '    .. versionadded:: 1.0', '       The ``subdomain_matching`` parameter was added. Subdomain', '       matching needs to be enabled manually now. Setting', '       :data:`SERVER_NAME` does not implicitly enable it.', '', '    :param import_name: the name of the application package', '    :param static_url_path: can be used to specify a different path for the', '                            static files on the web.  Defaults to the name', '                            of the `static_folder` folder.', '    :param static_folder: The folder with static files that is served at', '        ``static_url_path``. Relative to the application ``root_path``', \"        or an absolute path. Defaults to ``'static'``.\", '    :param static_host: the host to use when adding the static route.', '        Defaults to None. Required when using ``host_matching=True``', '        with a ``static_folder`` configured.', '    :param host_matching: set ``url_map.host_matching`` attribute.', '        Defaults to False.', '    :param subdomain_matching: consider the subdomain relative to', '        :data:`SERVER_NAME` when matching routes. Defaults to False.', '    :param template_folder: the folder that contains the templates that should', '                            be used by the application.  Defaults to', \"                            ``'templates'`` folder in the root path of the\", '                            application.', '    :param instance_path: An alternative instance path for the application.', \"                          By default the folder ``'instance'`` next to the\", '                          package or module is assumed to be the instance', '                          path.', '    :param instance_relative_config: if set to ``True`` relative filenames', '                                     for loading the config are assumed to', '                                     be relative to the instance path instead', '                                     of the application root.', '    :param root_path: The path to the root of the application files.', \"        This should only be set manually when it can't be detected\", '        automatically, such as for namespace packages.', '    \"\"\"', '', '    #: The class that is used for request objects.  See :class:`~flask.Request`', '    #: for more information.', '    request_class = Request', '', '    #: The class that is used for response objects.  See', '    #: :class:`~flask.Response` for more information.', '    response_class = Response', '', '    #: The class of the object assigned to :attr:`aborter`, created by', '    #: :meth:`create_aborter`. That object is called by', '    #: :func:`flask.abort` to raise HTTP errors, and can be', '    #: called directly as well.', '    #:', '    #: Defaults to :class:`werkzeug.exceptions.Aborter`.', '    #:', '    #: .. versionadded:: 2.2', '    aborter_class = Aborter', '', '    #: The class that is used for the Jinja environment.', '    #:', '    #: .. versionadded:: 0.11', '    jinja_environment = Environment', '', '    #: The class that is used for the :data:`~flask.g` instance.', '    #:', '    #: Example use cases for a custom class:', '    #:', '    #: 1. Store arbitrary attributes on flask.g.', '    #: 2. Add a property for lazy per-request database connectors.', '    #: 3. Return None instead of AttributeError on unexpected attributes.', '    #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.', '    #:', '    #: In Flask 0.9 this property was called `request_globals_class` but it', '    #: was changed in 0.10 to :attr:`app_ctx_globals_class` because the', '    #: flask.g object is now application context scoped.', '    #:', '    #: .. versionadded:: 0.10', '    app_ctx_globals_class = _AppCtxGlobals', '', '    #: The class that is used for the ``config`` attribute of this app.', '    #: Defaults to :class:`~flask.Config`.', '    #:', '    #: Example use cases for a custom class:', '    #:', '    #: 1. Default values for certain config options.', '    #: 2. Access to config values through attributes in addition to keys.', '    #:', '    #: .. versionadded:: 0.11', '    config_class = Config', '', '    #: The testing flag.  Set this to ``True`` to enable the test mode of', '    #: Flask extensions (and in the future probably also Flask itself).', '    #: For example this might activate test helpers that have an', '    #: additional runtime cost which should not be enabled by default.', '    #:', '    #: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the', \"    #: default it's implicitly enabled.\", '    #:', '    #: This attribute can also be configured from the config with the', '    #: ``TESTING`` configuration key.  Defaults to ``False``.', '    testing = ConfigAttribute(\"TESTING\")', '', '    #: If a secret key is set, cryptographic components can use this to', '    #: sign cookies and other things. Set this to a complex random value', '    #: when you want to use the secure cookie for instance.', '    #:', '    #: This attribute can also be configured from the config with the', '    #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.', '    secret_key = ConfigAttribute(\"SECRET_KEY\")', '', '    #: A :class:`~datetime.timedelta` which is used to set the expiration', '    #: date of a permanent session.  The default is 31 days which makes a', '    #: permanent session survive for roughly one month.', '    #:', '    #: This attribute can also be configured from the config with the', '    #: ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to', '    #: ``timedelta(days=31)``', '    permanent_session_lifetime = ConfigAttribute(', '        \"PERMANENT_SESSION_LIFETIME\", get_converter=_make_timedelta', '    )', '', '    json_provider_class: t.Type[JSONProvider] = DefaultJSONProvider', '    \"\"\"A subclass of :class:`~flask.json.provider.JSONProvider`. An', '    instance is created and assigned to :attr:`app.json` when creating', '    the app.', '', '    The default, :class:`~flask.json.provider.DefaultJSONProvider`, uses', \"    Python's built-in :mod:`json` library. A different provider can use\", '    a different JSON library.', '', '    .. versionadded:: 2.2', '    \"\"\"', '', '    #: Options that are passed to the Jinja environment in', '    #: :meth:`create_jinja_environment`. Changing these options after', '    #: the environment is created (accessing :attr:`jinja_env`) will', '    #: have no effect.', '    #:', '    #: .. versionchanged:: 1.1.0', '    #:     This is a ``dict`` instead of an ``ImmutableDict`` to allow', '    #:     easier configuration.', '    #:', '    jinja_options: dict = {}', '', '    #: Default configuration parameters.', '    default_config = ImmutableDict(', '        {', '            \"DEBUG\": None,', '            \"TESTING\": False,', '            \"PROPAGATE_EXCEPTIONS\": None,', '            \"SECRET_KEY\": None,', '            \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),', '            \"USE_X_SENDFILE\": False,', '            \"SERVER_NAME\": None,', '            \"APPLICATION_ROOT\": \"/\",', '            \"SESSION_COOKIE_NAME\": \"session\",', '            \"SESSION_COOKIE_DOMAIN\": None,', '            \"SESSION_COOKIE_PATH\": None,', '            \"SESSION_COOKIE_HTTPONLY\": True,', '            \"SESSION_COOKIE_SECURE\": False,', '            \"SESSION_COOKIE_SAMESITE\": None,', '            \"SESSION_REFRESH_EACH_REQUEST\": True,', '            \"MAX_CONTENT_LENGTH\": None,', '            \"SEND_FILE_MAX_AGE_DEFAULT\": None,', '            \"TRAP_BAD_REQUEST_ERRORS\": None,', '            \"TRAP_HTTP_EXCEPTIONS\": False,', '            \"EXPLAIN_TEMPLATE_LOADING\": False,', '            \"PREFERRED_URL_SCHEME\": \"http\",', '            \"TEMPLATES_AUTO_RELOAD\": None,', '            \"MAX_COOKIE_SIZE\": 4093,', '        }', '    )', '', '    #: The rule object to use for URL rules created.  This is used by', '    #: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.', '    #:', '    #: .. versionadded:: 0.7', '    url_rule_class = Rule', '', '    #: The map object to use for storing the URL rules and routing', '    #: configuration parameters. Defaults to :class:`werkzeug.routing.Map`.', '    #:', '    #: .. versionadded:: 1.1.0', '    url_map_class = Map', '', '    #: The :meth:`test_client` method creates an instance of this test', '    #: client class. Defaults to :class:`~flask.testing.FlaskClient`.', '    #:', '    #: .. versionadded:: 0.7', '    test_client_class: t.Optional[t.Type[\"FlaskClient\"]] = None', '', '    #: The :class:`~click.testing.CliRunner` subclass, by default', '    #: :class:`~flask.testing.FlaskCliRunner` that is used by', '    #: :meth:`test_cli_runner`. Its ``__init__`` method should take a', '    #: Flask app object as the first argument.', '    #:', '    #: .. versionadded:: 1.0', '    test_cli_runner_class: t.Optional[t.Type[\"FlaskCliRunner\"]] = None', '', '    #: the session interface to use.  By default an instance of', '    #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.', '    #:', '    #: .. versionadded:: 0.8', '    session_interface: SessionInterface = SecureCookieSessionInterface()', '', '    def __init__(', '        self,', '        import_name: str,', '        static_url_path: t.Optional[str] = None,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = \"static\",', '        static_host: t.Optional[str] = None,', '        host_matching: bool = False,', '        subdomain_matching: bool = False,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = \"templates\",', '        instance_path: t.Optional[str] = None,', '        instance_relative_config: bool = False,', '        root_path: t.Optional[str] = None,', '    ):', '        super().__init__(', '            import_name=import_name,', '            static_folder=static_folder,', '            static_url_path=static_url_path,', '            template_folder=template_folder,', '            root_path=root_path,', '        )', '', '        if instance_path is None:', '            instance_path = self.auto_find_instance_path()', '        elif not os.path.isabs(instance_path):', '            raise ValueError(', '                \"If an instance path is provided it must be absolute.\"', '                \" A relative path was given instead.\"', '            )', '', '        #: Holds the path to the instance folder.', '        #:', '        #: .. versionadded:: 0.8', '        self.instance_path = instance_path', '', '        #: The configuration dictionary as :class:`Config`.  This behaves', '        #: exactly like a regular dictionary but supports additional methods', '        #: to load a config from files.', '        self.config = self.make_config(instance_relative_config)', '', '        #: An instance of :attr:`aborter_class` created by', '        #: :meth:`make_aborter`. This is called by :func:`flask.abort`', '        #: to raise HTTP errors, and can be called directly as well.', '        #:', '        #: .. versionadded:: 2.2', '        #:     Moved from ``flask.abort``, which calls this object.', '        self.aborter = self.make_aborter()', '', '        self.json: JSONProvider = self.json_provider_class(self)', '        \"\"\"Provides access to JSON methods. Functions in ``flask.json``', '        will call methods on this provider when the application context', '        is active. Used for handling JSON requests and responses.', '', '        An instance of :attr:`json_provider_class`. Can be customized by', '        changing that attribute on a subclass, or by assigning to this', '        attribute afterwards.', '', '        The default, :class:`~flask.json.provider.DefaultJSONProvider`,', \"        uses Python's built-in :mod:`json` library. A different provider\", '        can use a different JSON library.', '', '        .. versionadded:: 2.2', '        \"\"\"', '', '        #: A list of functions that are called by', '        #: :meth:`handle_url_build_error` when :meth:`.url_for` raises a', '        #: :exc:`~werkzeug.routing.BuildError`. Each function is called', '        #: with ``error``, ``endpoint`` and ``values``. If a function', '        #: returns ``None`` or raises a ``BuildError``, it is skipped.', '        #: Otherwise, its return value is returned by ``url_for``.', '        #:', '        #: .. versionadded:: 0.9', '        self.url_build_error_handlers: t.List[', '            t.Callable[[Exception, str, t.Dict[str, t.Any]], str]', '        ] = []', '', '        #: A list of functions that are called when the application context', '        #: is destroyed.  Since the application context is also torn down', '        #: if the request ends this is the place to store code that disconnects', '        #: from databases.', '        #:', '        #: .. versionadded:: 0.9', '        self.teardown_appcontext_funcs: t.List[ft.TeardownCallable] = []', '', '        #: A list of shell context processor functions that should be run', '        #: when a shell context is created.', '        #:', '        #: .. versionadded:: 0.11', '        self.shell_context_processors: t.List[ft.ShellContextProcessorCallable] = []', '', '        #: Maps registered blueprint names to blueprint objects. The', '        #: dict retains the order the blueprints were registered in.', '        #: Blueprints can be registered multiple times, this dict does', '        #: not track how often they were attached.', '        #:', '        #: .. versionadded:: 0.7', '        self.blueprints: t.Dict[str, \"Blueprint\"] = {}', '', '        #: a place where extensions can store application specific state.  For', '        #: example this is where an extension could store database engines and', '        #: similar things.', '        #:', '        #: The key must match the name of the extension module. For example in', '        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be', \"        #: ``'foo'``.\", '        #:', '        #: .. versionadded:: 0.7', '        self.extensions: dict = {}', '', '        #: The :class:`~werkzeug.routing.Map` for this instance.  You can use', '        #: this to change the routing converters after the class was created', '        #: but before any routes are connected.  Example::', '        #:', '        #:    from werkzeug.routing import BaseConverter', '        #:', '        #:    class ListConverter(BaseConverter):', '        #:        def to_python(self, value):', \"        #:            return value.split(',')\", '        #:        def to_url(self, values):', \"        #:            return ','.join(super(ListConverter, self).to_url(value)\", '        #:                            for value in values)', '        #:', '        #:    app = Flask(__name__)', \"        #:    app.url_map.converters['list'] = ListConverter\", '        self.url_map = self.url_map_class()', '', '        self.url_map.host_matching = host_matching', '        self.subdomain_matching = subdomain_matching', '', '        # tracks internally if the application already handled at least one', '        # request.', '        self._got_first_request = False', '', '        # Add a static route using the provided static_url_path, static_host,', '        # and static_folder if there is a configured static_folder.', '        # Note we do this without checking if static_folder exists.', '        # For one, it might be created while the server is running (e.g. during', '        # development). Also, Google App Engine stores static files somewhere', '        if self.has_static_folder:', '            assert (', '                bool(static_host) == host_matching', '            ), \"Invalid static_host/host_matching combination\"', '            # Use a weakref to avoid creating a reference cycle between the app', '            # and the view function (see #3761).', '            self_ref = weakref.ref(self)', '            self.add_url_rule(', '                f\"{self.static_url_path}/<path:filename>\",', '                endpoint=\"static\",', '                host=static_host,', '                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950', '            )', '', '        # Set the name of the Click group in case someone wants to add', \"        # the app's commands to another CLI tool.\", '        self.cli.name = self.name', '', '    def _check_setup_finished(self, f_name: str) -> None:', '        if self._got_first_request:', '            raise AssertionError(', '                f\"The setup method \\'{f_name}\\' can no longer be called\"', '                \" on the application. It has already handled its first\"', '                \" request, any changes will not be applied\"', '                \" consistently.\\\\n\"', '                \"Make sure all imports, decorators, functions, etc.\"', '                \" needed to set up the application are done before\"', '                \" running it.\"', '            )', '', '    @cached_property', '    def name(self) -> str:  # type: ignore', '        \"\"\"The name of the application.  This is usually the import name', \"        with the difference that it's guessed from the run file if the\", '        import name is main.  This name is used as a display name when', '        Flask needs the name of the application.  It can be set and overridden', '        to change the value.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        if self.import_name == \"__main__\":', '            fn = getattr(sys.modules[\"__main__\"], \"__file__\", None)', '            if fn is None:', '                return \"__main__\"', '            return os.path.splitext(os.path.basename(fn))[0]', '        return self.import_name', '', '    @cached_property', '    def logger(self) -> logging.Logger:', '        \"\"\"A standard Python :class:`~logging.Logger` for the app, with', '        the same name as :attr:`name`.', '', \"        In debug mode, the logger's :attr:`~logging.Logger.level` will\", '        be set to :data:`~logging.DEBUG`.', '', '        If there are no handlers configured, a default handler will be', '        added. See :doc:`/logging` for more information.', '', '        .. versionchanged:: 1.1.0', '            The logger takes the same name as :attr:`name` rather than', '            hard-coding ``\"flask.app\"``.', '', '        .. versionchanged:: 1.0.0', '            Behavior was simplified. The logger is always named', '            ``\"flask.app\"``. The level is only set during configuration,', \"            it doesn't check ``app.debug`` each time. Only one format is\", '            used, not different ones depending on ``app.debug``. No', '            handlers are removed, and a handler is only added if no', '            handlers are already configured.', '', '        .. versionadded:: 0.3', '        \"\"\"', '        return create_logger(self)', '', '    @cached_property', '    def jinja_env(self) -> Environment:', '        \"\"\"The Jinja environment used to load templates.', '', '        The environment is created the first time this property is', '        accessed. Changing :attr:`jinja_options` after that will have no', '        effect.', '        \"\"\"', '        return self.create_jinja_environment()', '', '    @property', '    def got_first_request(self) -> bool:', '        \"\"\"This attribute is set to ``True`` if the application started', '        handling the first request.', '', '        .. deprecated:: 2.3', '            Will be removed in Flask 2.4.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        import warnings', '', '        warnings.warn(', '            \"\\'got_first_request\\' is deprecated and will be removed in Flask 2.4.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        return self._got_first_request', '', '    def make_config(self, instance_relative: bool = False) -> Config:', '        \"\"\"Used to create the config attribute by the Flask constructor.', '        The `instance_relative` parameter is passed in from the constructor', '        of Flask (there named `instance_relative_config`) and indicates if', '        the config should be relative to the instance path or the root path', '        of the application.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        root_path = self.root_path', '        if instance_relative:', '            root_path = self.instance_path', '        defaults = dict(self.default_config)', '        defaults[\"DEBUG\"] = get_debug_flag()', '        return self.config_class(root_path, defaults)', '', '    def make_aborter(self) -> Aborter:', '        \"\"\"Create the object to assign to :attr:`aborter`. That object', '        is called by :func:`flask.abort` to raise HTTP errors, and can', '        be called directly as well.', '', '        By default, this creates an instance of :attr:`aborter_class`,', '        which defaults to :class:`werkzeug.exceptions.Aborter`.', '', '        .. versionadded:: 2.2', '        \"\"\"', '        return self.aborter_class()', '', '    def auto_find_instance_path(self) -> str:', '        \"\"\"Tries to locate the instance path if it was not provided to the', '        constructor of the application class.  It will basically calculate', '        the path to a folder named ``instance`` next to your main file or', '        the package.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        prefix, package_path = find_package(self.import_name)', '        if prefix is None:', '            return os.path.join(package_path, \"instance\")', '        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")', '', '    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:', '        \"\"\"Opens a resource from the application\\'s instance folder', '        (:attr:`instance_path`).  Otherwise works like', '        :meth:`open_resource`.  Instance resources can also be opened for', '        writing.', '', '        :param resource: the name of the resource.  To access resources within', '                         subfolders use forward slashes as separator.', \"        :param mode: resource file opening mode, default is 'rb'.\", '        \"\"\"', '        return open(os.path.join(self.instance_path, resource), mode)', '', '    def create_jinja_environment(self) -> Environment:', '        \"\"\"Create the Jinja environment based on :attr:`jinja_options`', '        and the various Jinja-related methods of the app. Changing', '        :attr:`jinja_options` after this will have no effect. Also adds', '        Flask-related globals and filters to the environment.', '', '        .. versionchanged:: 0.11', '           ``Environment.auto_reload`` set in accordance with', '           ``TEMPLATES_AUTO_RELOAD`` configuration option.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        options = dict(self.jinja_options)', '', '        if \"autoescape\" not in options:', '            options[\"autoescape\"] = self.select_jinja_autoescape', '', '        if \"auto_reload\" not in options:', '            auto_reload = self.config[\"TEMPLATES_AUTO_RELOAD\"]', '', '            if auto_reload is None:', '                auto_reload = self.debug', '', '            options[\"auto_reload\"] = auto_reload', '', '        rv = self.jinja_environment(self, **options)', '        rv.globals.update(', '            url_for=self.url_for,', '            get_flashed_messages=get_flashed_messages,', '            config=self.config,', '            # request, session and g are normally added with the', '            # context processor for efficiency reasons but for imported', '            # templates we also want the proxies in there.', '            request=request,', '            session=session,', '            g=g,', '        )', '        rv.policies[\"json.dumps_function\"] = self.json.dumps', '        return rv', '', '    def create_global_jinja_loader(self) -> DispatchingJinjaLoader:', '        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to', \"        override just the loader and keeping the rest unchanged.  It's\", '        discouraged to override this function.  Instead one should override', '        the :meth:`jinja_loader` function instead.', '', '        The global loader dispatches between the loaders of the application', '        and the individual blueprints.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        return DispatchingJinjaLoader(self)', '', '    def select_jinja_autoescape(self, filename: str) -> bool:', '        \"\"\"Returns ``True`` if autoescaping should be active for the given', '        template name. If no template name is given, returns `True`.', '', '        .. versionchanged:: 2.2', '            Autoescaping is now enabled by default for ``.svg`` files.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if filename is None:', '            return True', '        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))', '', '    def update_template_context(self, context: dict) -> None:', '        \"\"\"Update the template context with some commonly used variables.', '        This injects request, session, config and g into the template', '        context as well as everything template context processors want', '        to inject.  Note that the as of Flask 0.6, the original values', '        in the context will not be overridden if a context processor', '        decides to return a value with the same key.', '', '        :param context: the context as a dictionary that is updated in place', '                        to add extra variables.', '        \"\"\"', '        names: t.Iterable[t.Optional[str]] = (None,)', '', '        # A template may be rendered outside a request context.', '        if request:', '            names = chain(names, reversed(request.blueprints))', '', '        # The values passed to render_template take precedence. Keep a', '        # copy to re-apply after all context functions.', '        orig_ctx = context.copy()', '', '        for name in names:', '            if name in self.template_context_processors:', '                for func in self.template_context_processors[name]:', '                    context.update(func())', '', '        context.update(orig_ctx)', '', '    def make_shell_context(self) -> dict:', '        \"\"\"Returns the shell context for an interactive shell for this', '        application.  This runs all the registered shell context', '        processors.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        rv = {\"app\": self, \"g\": g}', '        for processor in self.shell_context_processors:', '            rv.update(processor())', '        return rv', '', '    @property', '    def debug(self) -> bool:', '        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the', '        development server, an interactive debugger will be shown for unhandled', '        exceptions, and the server will be reloaded when code changes. This maps to the', '        :data:`DEBUG` config key. It may not behave as expected if set late.', '', '        **Do not enable debug mode when deploying in production.**', '', '        Default: ``False``', '        \"\"\"', '        return self.config[\"DEBUG\"]', '', '    @debug.setter', '    def debug(self, value: bool) -> None:', '        self.config[\"DEBUG\"] = value', '', '        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:', '            self.jinja_env.auto_reload = value', '', '    def run(', '        self,', '        host: t.Optional[str] = None,', '        port: t.Optional[int] = None,', '        debug: t.Optional[bool] = None,', '        load_dotenv: bool = True,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Runs the application on a local development server.', '', '        Do not use ``run()`` in a production setting. It is not intended to', '        meet security and performance requirements for a production server.', '        Instead, see :doc:`/deploying/index` for WSGI server recommendations.', '', '        If the :attr:`debug` flag is set the server will automatically reload', '        for code changes and show a debugger in case an exception happened.', '', '        If you want to run the application in debug mode, but disable the', '        code execution on the interactive debugger, you can pass', \"        ``use_evalex=False`` as parameter.  This will keep the debugger's\", '        traceback screen active, but disable code execution.', '', '        It is not recommended to use this function for development with', '        automatic reloading as this is badly supported.  Instead you should', \"        be using the :command:`flask` command line script's ``run`` support.\", '', '        .. admonition:: Keep in Mind', '', '           Flask will suppress any server error with a generic error page', '           unless it is in debug mode.  As such to enable just the', '           interactive debugger without the code reloading, you have to', '           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.', '           Setting ``use_debugger`` to ``True`` without being in debug mode', \"           won't catch any exceptions because there won't be any to\", '           catch.', '', \"        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\", '            have the server available externally as well. Defaults to', \"            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\", '            if present.', '        :param port: the port of the webserver. Defaults to ``5000`` or the', '            port defined in the ``SERVER_NAME`` config variable if present.', '        :param debug: if given, enable or disable debug mode. See', '            :attr:`debug`.', '        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`', '            files to set environment variables. Will also change the working', '            directory to the directory containing the first file found.', '        :param options: the options to be forwarded to the underlying Werkzeug', '            server. See :func:`werkzeug.serving.run_simple` for more', '            information.', '', '        .. versionchanged:: 1.0', '            If installed, python-dotenv will be used to load environment', '            variables from :file:`.env` and :file:`.flaskenv` files.', '', '            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.', '', '            Threaded mode is enabled by default.', '', '        .. versionchanged:: 0.10', '            The default port is now picked from the ``SERVER_NAME``', '            variable.', '        \"\"\"', \"        # Ignore this call so that it doesn't start another server if\", \"        # the 'flask run' command is used.\", '        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":', '            if not is_running_from_reloader():', '                click.secho(', '                    \" * Ignoring a call to \\'app.run()\\' that would block\"', '                    \" the current \\'flask\\' CLI command.\\\\n\"', '                    \"   Only call \\'app.run()\\' in an \\'if __name__ ==\"', '                    \\' \"__main__\"\\\\\\' guard.\\',', '                    fg=\"red\",', '                )', '', '            return', '', '        if get_load_dotenv(load_dotenv):', '            cli.load_dotenv()', '', '            # if set, env var overrides existing value', '            if \"FLASK_DEBUG\" in os.environ:', '                self.debug = get_debug_flag()', '', '        # debug passed to method overrides all other sources', '        if debug is not None:', '            self.debug = bool(debug)', '', '        server_name = self.config.get(\"SERVER_NAME\")', '        sn_host = sn_port = None', '', '        if server_name:', '            sn_host, _, sn_port = server_name.partition(\":\")', '', '        if not host:', '            if sn_host:', '                host = sn_host', '            else:', '                host = \"127.0.0.1\"', '', '        if port or port == 0:', '            port = int(port)', '        elif sn_port:', '            port = int(sn_port)', '        else:', '            port = 5000', '', '        options.setdefault(\"use_reloader\", self.debug)', '        options.setdefault(\"use_debugger\", self.debug)', '        options.setdefault(\"threaded\", True)', '', '        cli.show_server_banner(self.debug, self.name)', '', '        from werkzeug.serving import run_simple', '', '        try:', '            run_simple(t.cast(str, host), port, self, **options)', '        finally:', '            # reset the first request information if the development server', '            # reset normally.  This makes it possible to restart the server', '            # without reloader and that stuff from an interactive shell.', '            self._got_first_request = False', '', '    def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> \"FlaskClient\":', '        \"\"\"Creates a test client for this application.  For information', '        about unit testing head over to :doc:`/testing`.', '', '        Note that if you are testing for assertions or exceptions in your', '        application code, you must set ``app.testing = True`` in order for the', '        exceptions to propagate to the test client.  Otherwise, the exception', '        will be handled by the application (not visible to the test client) and', '        the only indication of an AssertionError or other exception will be a', '        500 status code response to the test client.  See the :attr:`testing`', '        attribute.  For example::', '', '            app.testing = True', '            client = app.test_client()', '', '        The test client can be used in a ``with`` block to defer the closing down', '        of the context until the end of the ``with`` block.  This is useful if', '        you want to access the context locals for testing::', '', '            with app.test_client() as c:', \"                rv = c.get('/?vodka=42')\", \"                assert request.args['vodka'] == '42'\", '', '        Additionally, you may pass optional keyword arguments that will then', \"        be passed to the application's :attr:`test_client_class` constructor.\", '        For example::', '', '            from flask.testing import FlaskClient', '', '            class CustomClient(FlaskClient):', '                def __init__(self, *args, **kwargs):', '                    self._authentication = kwargs.pop(\"authentication\")', '                    super(CustomClient,self).__init__( *args, **kwargs)', '', '            app.test_client_class = CustomClient', \"            client = app.test_client(authentication='Basic ....')\", '', '        See :class:`~flask.testing.FlaskClient` for more information.', '', '        .. versionchanged:: 0.4', '           added support for ``with`` block usage for the client.', '', '        .. versionadded:: 0.7', '           The `use_cookies` parameter was added as well as the ability', '           to override the client to be used by setting the', '           :attr:`test_client_class` attribute.', '', '        .. versionchanged:: 0.11', '           Added `**kwargs` to support passing additional keyword arguments to', '           the constructor of :attr:`test_client_class`.', '        \"\"\"', '        cls = self.test_client_class', '        if cls is None:', '            from .testing import FlaskClient as cls', '        return cls(  # type: ignore', '            self, self.response_class, use_cookies=use_cookies, **kwargs', '        )', '', '    def test_cli_runner(self, **kwargs: t.Any) -> \"FlaskCliRunner\":', '        \"\"\"Create a CLI runner for testing CLI commands.', '        See :ref:`testing-cli`.', '', '        Returns an instance of :attr:`test_cli_runner_class`, by default', '        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is', '        passed as the first argument.', '', '        .. versionadded:: 1.0', '        \"\"\"', '        cls = self.test_cli_runner_class', '', '        if cls is None:', '            from .testing import FlaskCliRunner as cls', '', '        return cls(self, **kwargs)  # type: ignore', '', '    @setupmethod', '    def register_blueprint(self, blueprint: \"Blueprint\", **options: t.Any) -> None:', '        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword', '        arguments passed to this method will override the defaults set on the', '        blueprint.', '', \"        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\", \"        recording the blueprint in the application's :attr:`blueprints`.\", '', '        :param blueprint: The blueprint to register.', '        :param url_prefix: Blueprint routes will be prefixed with this.', '        :param subdomain: Blueprint routes will match on this subdomain.', '        :param url_defaults: Blueprint routes will use these default values for', '            view arguments.', '        :param options: Additional keyword arguments are passed to', '            :class:`~flask.blueprints.BlueprintSetupState`. They can be', '            accessed in :meth:`~flask.Blueprint.record` callbacks.', '', '        .. versionchanged:: 2.0.1', '            The ``name`` option can be used to change the (pre-dotted)', '            name the blueprint is registered with. This allows the same', '            blueprint to be registered multiple times with unique names', '            for ``url_for``.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        blueprint.register(self, options)', '', '    def iter_blueprints(self) -> t.ValuesView[\"Blueprint\"]:', '        \"\"\"Iterates over all blueprints by the order they were registered.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        return self.blueprints.values()', '', '    @setupmethod', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        if endpoint is None:', '            endpoint = _endpoint_from_view_func(view_func)  # type: ignore', '        options[\"endpoint\"] = endpoint', '        methods = options.pop(\"methods\", None)', '', '        # if the methods are not given and the view_func object knows its', '        # methods we can use that instead.  If neither exists, we go with', '        # a tuple of only ``GET`` as default.', '        if methods is None:', '            methods = getattr(view_func, \"methods\", None) or (\"GET\",)', '        if isinstance(methods, str):', '            raise TypeError(', '                \"Allowed methods must be a list of strings, for\"', '                \\' example: @app.route(..., methods=[\"POST\"])\\'', '            )', '        methods = {item.upper() for item in methods}', '', '        # Methods that should always be added', '        required_methods = set(getattr(view_func, \"required_methods\", ()))', '', '        # starting with Flask 0.8 the view_func object can disable and', '        # force-enable the automatic options handling.', '        if provide_automatic_options is None:', '            provide_automatic_options = getattr(', '                view_func, \"provide_automatic_options\", None', '            )', '', '        if provide_automatic_options is None:', '            if \"OPTIONS\" not in methods:', '                provide_automatic_options = True', '                required_methods.add(\"OPTIONS\")', '            else:', '                provide_automatic_options = False', '', '        # Add the required methods now.', '        methods |= required_methods', '', '        rule = self.url_rule_class(rule, methods=methods, **options)', '        rule.provide_automatic_options = provide_automatic_options  # type: ignore', '', '        self.url_map.add(rule)', '        if view_func is not None:', '            old_func = self.view_functions.get(endpoint)', '            if old_func is not None and old_func != view_func:', '                raise AssertionError(', '                    \"View function mapping is overwriting an existing\"', '                    f\" endpoint function: {endpoint}\"', '                )', '            self.view_functions[endpoint] = view_func', '', '    @setupmethod', '    def template_filter(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_filter], T_template_filter]:', '        \"\"\"A decorator that is used to register custom template filter.', '        You can specify a name for the filter, otherwise the function', '        name will be used. Example::', '', '          @app.template_filter()', '          def reverse(s):', '              return s[::-1]', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_filter) -> T_template_filter:', '            self.add_template_filter(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_template_filter(', '        self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template filter.  Works exactly like the', '        :meth:`template_filter` decorator.', '', '        :param name: the optional name of the filter, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.filters[name or f.__name__] = f', '', '    @setupmethod', '    def template_test(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_test], T_template_test]:', '        \"\"\"A decorator that is used to register custom template test.', '        You can specify a name for the test, otherwise the function', '        name will be used. Example::', '', '          @app.template_test()', '          def is_prime(n):', '              if n == 2:', '                  return True', '              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):', '                  if n % i == 0:', '                      return False', '              return True', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_test) -> T_template_test:', '            self.add_template_test(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_template_test(', '        self, f: ft.TemplateTestCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template test.  Works exactly like the', '        :meth:`template_test` decorator.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the test, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.tests[name or f.__name__] = f', '', '    @setupmethod', '    def template_global(', '        self, name: t.Optional[str] = None', '    ) -> t.Callable[[T_template_global], T_template_global]:', '        \"\"\"A decorator that is used to register a custom template global function.', '        You can specify a name for the global function, otherwise the function', '        name will be used. Example::', '', '            @app.template_global()', '            def double(n):', '                return 2 * n', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global function, otherwise the', '                     function name will be used.', '        \"\"\"', '', '        def decorator(f: T_template_global) -> T_template_global:', '            self.add_template_global(f, name=name)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_template_global(', '        self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None', '    ) -> None:', '        \"\"\"Register a custom template global function. Works exactly like the', '        :meth:`template_global` decorator.', '', '        .. versionadded:: 0.10', '', '        :param name: the optional name of the global function, otherwise the', '                     function name will be used.', '        \"\"\"', '        self.jinja_env.globals[name or f.__name__] = f', '', '    @setupmethod', '    def teardown_appcontext(self, f: T_teardown) -> T_teardown:', '        \"\"\"Registers a function to be called when the application', '        context is popped. The application context is typically popped', '        after the request context for each request, at the end of CLI', '        commands, or after a manually pushed context ends.', '', '        .. code-block:: python', '', '            with app.app_context():', '                ...', '', '        When the ``with`` block exits (or ``ctx.pop()`` is called), the', '        teardown functions are called just before the app context is', '        made inactive. Since a request context typically also manages an', '        application context it would also be called when you pop a', '        request context.', '', '        When a teardown function was called because of an unhandled', '        exception it will be passed an error object. If an', '        :meth:`errorhandler` is registered, it will handle the exception', '        and the teardown will not receive it.', '', '        Teardown functions must avoid raising exceptions. If they', '        execute code that might fail they must surround that code with a', '        ``try``/``except`` block and log any errors.', '', '        The return values of teardown functions are ignored.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        self.teardown_appcontext_funcs.append(f)', '        return f', '', '    @setupmethod', '    def shell_context_processor(', '        self, f: T_shell_context_processor', '    ) -> T_shell_context_processor:', '        \"\"\"Registers a shell context processor function.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        self.shell_context_processors.append(f)', '        return f', '', '    def _find_error_handler(self, e: Exception) -> t.Optional[ft.ErrorHandlerCallable]:', '        \"\"\"Return a registered error handler for an exception in this order:', '        blueprint handler for a specific code, app handler for a specific code,', '        blueprint handler for an exception class, app handler for an exception', '        class, or ``None`` if a suitable handler is not found.', '        \"\"\"', '        exc_class, code = self._get_exc_class_and_code(type(e))', '        names = (*request.blueprints, None)', '', '        for c in (code, None) if code is not None else (None,):', '            for name in names:', '                handler_map = self.error_handler_spec[name][c]', '', '                if not handler_map:', '                    continue', '', '                for cls in exc_class.__mro__:', '                    handler = handler_map.get(cls)', '', '                    if handler is not None:', '                        return handler', '        return None', '', '    def handle_http_exception(', '        self, e: HTTPException', '    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:', '        \"\"\"Handles an HTTP exception.  By default this will invoke the', '        registered error handlers and fall back to returning the', '        exception as response.', '', '        .. versionchanged:: 1.0.3', '            ``RoutingException``, used internally for actions such as', '             slash redirects during routing, is not passed to error', '             handlers.', '', '        .. versionchanged:: 1.0', '            Exceptions are looked up by code *and* by MRO, so', '            ``HTTPException`` subclasses can be handled with a catch-all', '            handler for the base ``HTTPException``.', '', '        .. versionadded:: 0.3', '        \"\"\"', \"        # Proxy exceptions don't have error codes.  We want to always return\", '        # those unchanged as errors', '        if e.code is None:', '            return e', '', '        # RoutingExceptions are used internally to trigger routing', '        # actions, such as slash redirects raising RequestRedirect. They', '        # are not raised or handled in user code.', '        if isinstance(e, RoutingException):', '            return e', '', '        handler = self._find_error_handler(e)', '        if handler is None:', '            return e', '        return self.ensure_sync(handler)(e)', '', '    def trap_http_exception(self, e: Exception) -> bool:', '        \"\"\"Checks if an HTTP exception should be trapped or not.  By default', '        this will return ``False`` for all exceptions except for a bad request', '        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It', '        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.', '', '        This is called for all HTTP exceptions raised by a view function.', '        If it returns ``True`` for any exception the error handler for this', '        exception is not called and it shows up as regular exception in the', '        traceback.  This is helpful for debugging implicitly raised HTTP', '        exceptions.', '', '        .. versionchanged:: 1.0', '            Bad request errors are not trapped by default in debug mode.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:', '            return True', '', '        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]', '', '        # if unset, trap key errors in debug mode', '        if (', '            trap_bad_request is None', '            and self.debug', '            and isinstance(e, BadRequestKeyError)', '        ):', '            return True', '', '        if trap_bad_request:', '            return isinstance(e, BadRequest)', '', '        return False', '', '    def handle_user_exception(', '        self, e: Exception', '    ) -> t.Union[HTTPException, ft.ResponseReturnValue]:', '        \"\"\"This method is called whenever an exception occurs that', '        should be handled. A special case is :class:`~werkzeug', '        .exceptions.HTTPException` which is forwarded to the', '        :meth:`handle_http_exception` method. This function will either', '        return a response value or reraise the exception with the same', '        traceback.', '', '        .. versionchanged:: 1.0', '            Key errors raised from request data like ``form`` show the', '            bad key in debug mode rather than a generic bad request', '            message.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        if isinstance(e, BadRequestKeyError) and (', '            self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]', '        ):', '            e.show_exception = True', '', '        if isinstance(e, HTTPException) and not self.trap_http_exception(e):', '            return self.handle_http_exception(e)', '', '        handler = self._find_error_handler(e)', '', '        if handler is None:', '            raise', '', '        return self.ensure_sync(handler)(e)', '', '    def handle_exception(self, e: Exception) -> Response:', '        \"\"\"Handle an exception that did not have an error handler', '        associated with it, or that was raised from an error handler.', '        This always causes a 500 ``InternalServerError``.', '', '        Always sends the :data:`got_request_exception` signal.', '', '        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug', '        mode, the error will be re-raised so that the debugger can', '        display it. Otherwise, the original exception is logged, and', '        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.', '', '        If an error handler is registered for ``InternalServerError`` or', '        ``500``, it will be used. For consistency, the handler will', '        always receive the ``InternalServerError``. The original', '        unhandled exception is available as ``e.original_exception``.', '', '        .. versionchanged:: 1.1.0', '            Always passes the ``InternalServerError`` instance to the', '            handler, setting ``original_exception`` to the unhandled', '            error.', '', '        .. versionchanged:: 1.1.0', '            ``after_request`` functions and other finalization is done', '            even for the default 500 response when there is no handler.', '', '        .. versionadded:: 0.3', '        \"\"\"', '        exc_info = sys.exc_info()', '        got_request_exception.send(self, exception=e)', '        propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]', '', '        if propagate is None:', '            propagate = self.testing or self.debug', '', '        if propagate:', '            # Re-raise if called with an active exception, otherwise', '            # raise the passed in exception.', '            if exc_info[1] is e:', '                raise', '', '            raise e', '', '        self.log_exception(exc_info)', '        server_error: t.Union[InternalServerError, ft.ResponseReturnValue]', '        server_error = InternalServerError(original_exception=e)', '        handler = self._find_error_handler(server_error)', '', '        if handler is not None:', '            server_error = self.ensure_sync(handler)(server_error)', '', '        return self.finalize_request(server_error, from_error_handler=True)', '', '    def log_exception(', '        self,', '        exc_info: t.Union[', '            t.Tuple[type, BaseException, TracebackType], t.Tuple[None, None, None]', '        ],', '    ) -> None:', '        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`', '        if debugging is disabled and right before the handler is called.', '        The default implementation logs the exception as error on the', '        :attr:`logger`.', '', '        .. versionadded:: 0.8', '        \"\"\"', '        self.logger.error(', '            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info', '        )', '', '    def raise_routing_exception(self, request: Request) -> \"te.NoReturn\":', '        \"\"\"Intercept routing exceptions and possibly do something else.', '', '        In debug mode, intercept a routing redirect and replace it with', '        an error if the body will be discarded.', '', \"        With modern Werkzeug this shouldn't occur, since it now uses a\", '        308 status which tells the browser to resend the method and', '        body.', '', '        .. versionchanged:: 2.1', \"            Don't intercept 307 and 308 redirects.\", '', '        :meta private:', '        :internal:', '        \"\"\"', '        if (', '            not self.debug', '            or not isinstance(request.routing_exception, RequestRedirect)', '            or request.routing_exception.code in {307, 308}', '            or request.method in {\"GET\", \"HEAD\", \"OPTIONS\"}', '        ):', '            raise request.routing_exception  # type: ignore', '', '        from .debughelpers import FormDataRoutingRedirect', '', '        raise FormDataRoutingRedirect(request)', '', '    def dispatch_request(self) -> ft.ResponseReturnValue:', '        \"\"\"Does the request dispatching.  Matches the URL and returns the', '        return value of the view or error handler.  This does not have to', '        be a response object.  In order to convert the return value to a', '        proper response object, call :func:`make_response`.', '', '        .. versionchanged:: 0.7', '           This no longer does the exception handling, this code was', '           moved to the new :meth:`full_dispatch_request`.', '        \"\"\"', '        req = request_ctx.request', '        if req.routing_exception is not None:', '            self.raise_routing_exception(req)', '        rule: Rule = req.url_rule  # type: ignore[assignment]', '        # if we provide automatic options for this URL and the', '        # request came with the OPTIONS method, reply automatically', '        if (', '            getattr(rule, \"provide_automatic_options\", False)', '            and req.method == \"OPTIONS\"', '        ):', '            return self.make_default_options_response()', '        # otherwise dispatch to the handler for that endpoint', '        view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]', '        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)', '', '    def full_dispatch_request(self) -> Response:', '        \"\"\"Dispatches the request and on top of that performs request', '        pre and postprocessing as well as HTTP exception catching and', '        error handling.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        self._got_first_request = True', '', '        try:', '            request_started.send(self)', '            rv = self.preprocess_request()', '            if rv is None:', '                rv = self.dispatch_request()', '        except Exception as e:', '            rv = self.handle_user_exception(e)', '        return self.finalize_request(rv)', '', '    def finalize_request(', '        self,', '        rv: t.Union[ft.ResponseReturnValue, HTTPException],', '        from_error_handler: bool = False,', '    ) -> Response:', '        \"\"\"Given the return value from a view function this finalizes', '        the request by converting it into a response and invoking the', '        postprocessing functions.  This is invoked for both normal', '        request dispatching as well as error handlers.', '', '        Because this means that it might be called as a result of a', '        failure a special safe mode is available which can be enabled', '        with the `from_error_handler` flag.  If enabled, failures in', '        response processing will be logged and otherwise ignored.', '', '        :internal:', '        \"\"\"', '        response = self.make_response(rv)', '        try:', '            response = self.process_response(response)', '            request_finished.send(self, response=response)', '        except Exception:', '            if not from_error_handler:', '                raise', '            self.logger.exception(', '                \"Request finalizing failed with an error while handling an error\"', '            )', '        return response', '', '    def make_default_options_response(self) -> Response:', '        \"\"\"This method is called to create the default ``OPTIONS`` response.', '        This can be changed through subclassing to change the default', '        behavior of ``OPTIONS`` responses.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        adapter = request_ctx.url_adapter', '        methods = adapter.allowed_methods()  # type: ignore[union-attr]', '        rv = self.response_class()', '        rv.allow.update(methods)', '        return rv', '', '    def should_ignore_error(self, error: t.Optional[BaseException]) -> bool:', '        \"\"\"This is called to figure out if an error should be ignored', '        or not as far as the teardown system is concerned.  If this', '        function returns ``True`` then the teardown handlers will not be', '        passed the error.', '', '        .. versionadded:: 0.10', '        \"\"\"', '        return False', '', '    def ensure_sync(self, func: t.Callable) -> t.Callable:', '        \"\"\"Ensure that the function is synchronous for WSGI workers.', '        Plain ``def`` functions are returned as-is. ``async def``', '        functions are wrapped to run and wait for the response.', '', '        Override this method to change how the app runs async views.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        if iscoroutinefunction(func):', '            return self.async_to_sync(func)', '', '        return func', '', '    def async_to_sync(', '        self, func: t.Callable[..., t.Coroutine]', '    ) -> t.Callable[..., t.Any]:', '        \"\"\"Return a sync function that will run the coroutine function.', '', '        .. code-block:: python', '', '            result = app.async_to_sync(func)(*args, **kwargs)', '', '        Override this method to change how the app converts async code', '        to be synchronously callable.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        try:', '            from asgiref.sync import async_to_sync as asgiref_async_to_sync', '        except ImportError:', '            raise RuntimeError(', '                \"Install Flask with the \\'async\\' extra in order to use async views.\"', '            ) from None', '', '        return asgiref_async_to_sync(func)', '', '    def url_for(', '        self,', '        endpoint: str,', '        *,', '        _anchor: t.Optional[str] = None,', '        _method: t.Optional[str] = None,', '        _scheme: t.Optional[str] = None,', '        _external: t.Optional[bool] = None,', '        **values: t.Any,', '    ) -> str:', '        \"\"\"Generate a URL to the given endpoint with the given values.', '', '        This is called by :func:`flask.url_for`, and can be called', '        directly as well.', '', '        An *endpoint* is the name of a URL rule, usually added with', '        :meth:`@app.route() <route>`, and usually the same name as the', '        view function. A route defined in a :class:`~flask.Blueprint`', \"        will prepend the blueprint's name separated by a ``.`` to the\", '        endpoint.', '', '        In some cases, such as email messages, you want URLs to include', '        the scheme and domain, like ``https://example.com/hello``. When', '        not in an active request, URLs will be external by default, but', '        this requires setting :data:`SERVER_NAME` so Flask knows what', '        domain to use. :data:`APPLICATION_ROOT` and', '        :data:`PREFERRED_URL_SCHEME` should also be configured as', '        needed. This config is only used when not in an active request.', '', '        Functions can be decorated with :meth:`url_defaults` to modify', '        keyword arguments before the URL is built.', '', '        If building fails for some reason, such as an unknown endpoint', \"        or incorrect values, the app's :meth:`handle_url_build_error`\", '        method is called. If that returns a string, that is returned,', '        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.', '', '        :param endpoint: The endpoint name associated with the URL to', '            generate. If this starts with a ``.``, the current blueprint', '            name (if any) will be used.', '        :param _anchor: If given, append this as ``#anchor`` to the URL.', '        :param _method: If given, generate the URL associated with this', '            method for the endpoint.', '        :param _scheme: If given, the URL will have this scheme if it', '            is external.', '        :param _external: If given, prefer the URL to be internal', '            (False) or require it to be external (True). External URLs', '            include the scheme and domain. When not in an active', '            request, URLs are external by default.', '        :param values: Values to use for the variable parts of the URL', '            rule. Unknown keys are appended as query string arguments,', '            like ``?a=b&c=d``.', '', '        .. versionadded:: 2.2', '            Moved from ``flask.url_for``, which calls this method.', '        \"\"\"', '        req_ctx = _cv_request.get(None)', '', '        if req_ctx is not None:', '            url_adapter = req_ctx.url_adapter', '            blueprint_name = req_ctx.request.blueprint', '', '            # If the endpoint starts with \".\" and the request matches a', '            # blueprint, the endpoint is relative to the blueprint.', '            if endpoint[:1] == \".\":', '                if blueprint_name is not None:', '                    endpoint = f\"{blueprint_name}{endpoint}\"', '                else:', '                    endpoint = endpoint[1:]', '', '            # When in a request, generate a URL without scheme and', '            # domain by default, unless a scheme is given.', '            if _external is None:', '                _external = _scheme is not None', '        else:', '            app_ctx = _cv_app.get(None)', '', '            # If called by helpers.url_for, an app context is active,', '            # use its url_adapter. Otherwise, app.url_for was called', '            # directly, build an adapter.', '            if app_ctx is not None:', '                url_adapter = app_ctx.url_adapter', '            else:', '                url_adapter = self.create_url_adapter(None)', '', '            if url_adapter is None:', '                raise RuntimeError(', '                    \"Unable to build URLs outside an active request\"', '                    \" without \\'SERVER_NAME\\' configured. Also configure\"', '                    \" \\'APPLICATION_ROOT\\' and \\'PREFERRED_URL_SCHEME\\' as\"', '                    \" needed.\"', '                )', '', '            # When outside a request, generate a URL with scheme and', '            # domain by default.', '            if _external is None:', '                _external = True', '', '        # It is an error to set _scheme when _external=False, in order', '        # to avoid accidental insecure URLs.', '        if _scheme is not None and not _external:', '            raise ValueError(\"When specifying \\'_scheme\\', \\'_external\\' must be True.\")', '', '        self.inject_url_defaults(endpoint, values)', '', '        try:', '            rv = url_adapter.build(  # type: ignore[union-attr]', '                endpoint,', '                values,', '                method=_method,', '                url_scheme=_scheme,', '                force_external=_external,', '            )', '        except BuildError as error:', '            values.update(', '                _anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external', '            )', '            return self.handle_url_build_error(error, endpoint, values)', '', '        if _anchor is not None:', '            _anchor = _url_quote(_anchor, safe=\"%!#$&\\'()*+,/:;=?@\")', '            rv = f\"{rv}#{_anchor}\"', '', '        return rv', '', '    def redirect(self, location: str, code: int = 302) -> BaseResponse:', '        \"\"\"Create a redirect response object.', '', '        This is called by :func:`flask.redirect`, and can be called', '        directly as well.', '', '        :param location: The URL to redirect to.', '        :param code: The status code for the redirect.', '', '        .. versionadded:: 2.2', '            Moved from ``flask.redirect``, which calls this method.', '        \"\"\"', '        return _wz_redirect(location, code=code, Response=self.response_class)', '', '    def make_response(self, rv: ft.ResponseReturnValue) -> Response:', '        \"\"\"Convert the return value from a view function to an instance of', '        :attr:`response_class`.', '', '        :param rv: the return value from the view function. The view function', '            must return a response. Returning ``None``, or the view ending', '            without returning, is not allowed. The following types are allowed', '            for ``view_rv``:', '', '            ``str``', '                A response object is created with the string encoded to UTF-8', '                as the body.', '', '            ``bytes``', '                A response object is created with the bytes as the body.', '', '            ``dict``', \"                A dictionary that will be jsonify'd before being returned.\", '', '            ``list``', \"                A list that will be jsonify'd before being returned.\", '', '            ``generator`` or ``iterator``', '                A generator that returns ``str`` or ``bytes`` to be', '                streamed as the response.', '', '            ``tuple``', '                Either ``(body, status, headers)``, ``(body, status)``, or', '                ``(body, headers)``, where ``body`` is any of the other types', '                allowed here, ``status`` is a string or an integer, and', '                ``headers`` is a dictionary or a list of ``(key, value)``', '                tuples. If ``body`` is a :attr:`response_class` instance,', '                ``status`` overwrites the exiting value and ``headers`` are', '                extended.', '', '            :attr:`response_class`', '                The object is returned unchanged.', '', '            other :class:`~werkzeug.wrappers.Response` class', '                The object is coerced to :attr:`response_class`.', '', '            :func:`callable`', '                The function is called as a WSGI application. The result is', '                used to create a response object.', '', '        .. versionchanged:: 2.2', '            A generator will be converted to a streaming response.', '            A list will be converted to a JSON response.', '', '        .. versionchanged:: 1.1', '            A dict will be converted to a JSON response.', '', '        .. versionchanged:: 0.9', '           Previously a tuple was interpreted as the arguments for the', '           response object.', '        \"\"\"', '', '        status = headers = None', '', '        # unpack tuple returns', '        if isinstance(rv, tuple):', '            len_rv = len(rv)', '', '            # a 3-tuple is unpacked directly', '            if len_rv == 3:', '                rv, status, headers = rv  # type: ignore[misc]', '            # decide if a 2-tuple has status or headers', '            elif len_rv == 2:', '                if isinstance(rv[1], (Headers, dict, tuple, list)):', '                    rv, headers = rv', '                else:', '                    rv, status = rv  # type: ignore[assignment,misc]', '            # other sized tuples are not allowed', '            else:', '                raise TypeError(', '                    \"The view function did not return a valid response tuple.\"', '                    \" The tuple must have the form (body, status, headers),\"', '                    \" (body, status), or (body, headers).\"', '                )', '', '        # the body must not be None', '        if rv is None:', '            raise TypeError(', '                f\"The view function for {request.endpoint!r} did not\"', '                \" return a valid response. The function either returned\"', '                \" None or ended without a return statement.\"', '            )', '', '        # make sure the body is an instance of the response class', '        if not isinstance(rv, self.response_class):', '            if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, _abc_Iterator):', '                # let the response class set the status and headers instead of', '                # waiting to do it manually, so that the class can handle any', '                # special logic', '                rv = self.response_class(', '                    rv,', '                    status=status,', '                    headers=headers,  # type: ignore[arg-type]', '                )', '                status = headers = None', '            elif isinstance(rv, (dict, list)):', '                rv = self.json.response(rv)', '            elif isinstance(rv, BaseResponse) or callable(rv):', '                # evaluate a WSGI callable, or coerce a different response', '                # class to the correct type', '                try:', '                    rv = self.response_class.force_type(', '                        rv, request.environ  # type: ignore[arg-type]', '                    )', '                except TypeError as e:', '                    raise TypeError(', '                        f\"{e}\\\\nThe view function did not return a valid\"', '                        \" response. The return type must be a string,\"', '                        \" dict, list, tuple with headers or status,\"', '                        \" Response instance, or WSGI callable, but it\"', '                        f\" was a {type(rv).__name__}.\"', '                    ).with_traceback(sys.exc_info()[2]) from None', '            else:', '                raise TypeError(', '                    \"The view function did not return a valid\"', '                    \" response. The return type must be a string,\"', '                    \" dict, list, tuple with headers or status,\"', '                    \" Response instance, or WSGI callable, but it was a\"', '                    f\" {type(rv).__name__}.\"', '                )', '', '        rv = t.cast(Response, rv)', '        # prefer the status if it was provided', '        if status is not None:', '            if isinstance(status, (str, bytes, bytearray)):', '                rv.status = status', '            else:', '                rv.status_code = status', '', '        # extend existing headers with provided headers', '        if headers:', '            rv.headers.update(headers)  # type: ignore[arg-type]', '', '        return rv', '', '    def create_url_adapter(', '        self, request: t.Optional[Request]', '    ) -> t.Optional[MapAdapter]:', '        \"\"\"Creates a URL adapter for the given request. The URL adapter', '        is created at a point where the request context is not yet set', '        up so the request is passed explicitly.', '', '        .. versionadded:: 0.6', '', '        .. versionchanged:: 0.9', '           This can now also be called without a request object when the', '           URL adapter is created for the application context.', '', '        .. versionchanged:: 1.0', '            :data:`SERVER_NAME` no longer implicitly enables subdomain', '            matching. Use :attr:`subdomain_matching` instead.', '        \"\"\"', '        if request is not None:', '            # If subdomain matching is disabled (the default), use the', '            # default subdomain in all cases. This should be the default', '            # in Werkzeug but it currently does not have that feature.', '            if not self.subdomain_matching:', '                subdomain = self.url_map.default_subdomain or None', '            else:', '                subdomain = None', '', '            return self.url_map.bind_to_environ(', '                request.environ,', '                server_name=self.config[\"SERVER_NAME\"],', '                subdomain=subdomain,', '            )', '        # We need at the very least the server name to be set for this', '        # to work.', '        if self.config[\"SERVER_NAME\"] is not None:', '            return self.url_map.bind(', '                self.config[\"SERVER_NAME\"],', '                script_name=self.config[\"APPLICATION_ROOT\"],', '                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],', '            )', '', '        return None', '', '    def inject_url_defaults(self, endpoint: str, values: dict) -> None:', '        \"\"\"Injects the URL defaults for the given endpoint directly into', '        the values dictionary passed.  This is used internally and', '        automatically called on URL building.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        names: t.Iterable[t.Optional[str]] = (None,)', '', '        # url_for may be called outside a request context, parse the', '        # passed endpoint instead of using request.blueprints.', '        if \".\" in endpoint:', '            names = chain(', '                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))', '            )', '', '        for name in names:', '            if name in self.url_default_functions:', '                for func in self.url_default_functions[name]:', '                    func(endpoint, values)', '', '    def handle_url_build_error(', '        self, error: BuildError, endpoint: str, values: t.Dict[str, t.Any]', '    ) -> str:', '        \"\"\"Called by :meth:`.url_for` if a', '        :exc:`~werkzeug.routing.BuildError` was raised. If this returns', '        a value, it will be returned by ``url_for``, otherwise the error', '        will be re-raised.', '', '        Each function in :attr:`url_build_error_handlers` is called with', '        ``error``, ``endpoint`` and ``values``. If a function returns', '        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,', '        its return value is returned by ``url_for``.', '', '        :param error: The active ``BuildError`` being handled.', '        :param endpoint: The endpoint being built.', '        :param values: The keyword arguments passed to ``url_for``.', '        \"\"\"', '        for handler in self.url_build_error_handlers:', '            try:', '                rv = handler(error, endpoint, values)', '            except BuildError as e:', '                # make error available outside except block', '                error = e', '            else:', '                if rv is not None:', '                    return rv', '', '        # Re-raise if called with an active exception, otherwise raise', '        # the passed in exception.', '        if error is sys.exc_info()[1]:', '            raise', '', '        raise error', '', '    def preprocess_request(self) -> t.Optional[ft.ResponseReturnValue]:', '        \"\"\"Called before the request is dispatched. Calls', '        :attr:`url_value_preprocessors` registered with the app and the', '        current blueprint (if any). Then calls :attr:`before_request_funcs`', '        registered with the app and the blueprint.', '', '        If any :meth:`before_request` handler returns a non-None value, the', '        value is handled as if it was the return value from the view, and', '        further request handling is stopped.', '        \"\"\"', '        names = (None, *reversed(request.blueprints))', '', '        for name in names:', '            if name in self.url_value_preprocessors:', '                for url_func in self.url_value_preprocessors[name]:', '                    url_func(request.endpoint, request.view_args)', '', '        for name in names:', '            if name in self.before_request_funcs:', '                for before_func in self.before_request_funcs[name]:', '                    rv = self.ensure_sync(before_func)()', '', '                    if rv is not None:', '                        return rv', '', '        return None', '', '    def process_response(self, response: Response) -> Response:', '        \"\"\"Can be overridden in order to modify the response object', \"        before it's sent to the WSGI server.  By default this will\", '        call all the :meth:`after_request` decorated functions.', '', '        .. versionchanged:: 0.5', '           As of Flask 0.5 the functions registered for after request', '           execution are called in reverse order of registration.', '', '        :param response: a :attr:`response_class` object.', '        :return: a new response object or the same, has to be an', '                 instance of :attr:`response_class`.', '        \"\"\"', '        ctx = request_ctx._get_current_object()  # type: ignore[attr-defined]', '', '        for func in ctx._after_request_functions:', '            response = self.ensure_sync(func)(response)', '', '        for name in chain(request.blueprints, (None,)):', '            if name in self.after_request_funcs:', '                for func in reversed(self.after_request_funcs[name]):', '                    response = self.ensure_sync(func)(response)', '', '        if not self.session_interface.is_null_session(ctx.session):', '            self.session_interface.save_session(self, ctx.session, response)', '', '        return response', '', '    def do_teardown_request(', '        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore', '    ) -> None:', '        \"\"\"Called after the request is dispatched and the response is', '        returned, right before the request context is popped.', '', '        This calls all functions decorated with', '        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`', '        if a blueprint handled the request. Finally, the', '        :data:`request_tearing_down` signal is sent.', '', '        This is called by', '        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,', '        which may be delayed during testing to maintain access to', '        resources.', '', '        :param exc: An unhandled exception raised while dispatching the', '            request. Detected from the current exception information if', '            not passed. Passed to each teardown function.', '', '        .. versionchanged:: 0.9', '            Added the ``exc`` argument.', '        \"\"\"', '        if exc is _sentinel:', '            exc = sys.exc_info()[1]', '', '        for name in chain(request.blueprints, (None,)):', '            if name in self.teardown_request_funcs:', '                for func in reversed(self.teardown_request_funcs[name]):', '                    self.ensure_sync(func)(exc)', '', '        request_tearing_down.send(self, exc=exc)', '', '    def do_teardown_appcontext(', '        self, exc: t.Optional[BaseException] = _sentinel  # type: ignore', '    ) -> None:', '        \"\"\"Called right before the application context is popped.', '', '        When handling a request, the application context is popped', '        after the request context. See :meth:`do_teardown_request`.', '', '        This calls all functions decorated with', '        :meth:`teardown_appcontext`. Then the', '        :data:`appcontext_tearing_down` signal is sent.', '', '        This is called by', '        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        if exc is _sentinel:', '            exc = sys.exc_info()[1]', '', '        for func in reversed(self.teardown_appcontext_funcs):', '            self.ensure_sync(func)(exc)', '', '        appcontext_tearing_down.send(self, exc=exc)', '', '    def app_context(self) -> AppContext:', '        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``', '        block to push the context, which will make :data:`current_app`', '        point at this application.', '', '        An application context is automatically pushed by', '        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`', '        when handling a request, and when running a CLI command. Use', '        this to manually create a context outside of these situations.', '', '        ::', '', '            with app.app_context():', '                init_db()', '', '        See :doc:`/appcontext`.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        return AppContext(self)', '', '    def request_context(self, environ: dict) -> RequestContext:', '        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a', '        WSGI environment. Use a ``with`` block to push the context,', '        which will make :data:`request` point at this request.', '', '        See :doc:`/reqcontext`.', '', '        Typically you should not call this from your own code. A request', '        context is automatically pushed by the :meth:`wsgi_app` when', '        handling a request. Use :meth:`test_request_context` to create', '        an environment and context instead of this method.', '', '        :param environ: a WSGI environment', '        \"\"\"', '        return RequestContext(self, environ)', '', '    def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:', '        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI', '        environment created from the given values. This is mostly useful', '        during testing, where you may want to run a function that uses', '        request data without dispatching a full request.', '', '        See :doc:`/reqcontext`.', '', '        Use a ``with`` block to push the context, which will make', '        :data:`request` point at the request for the created', '        environment. ::', '', '            with app.test_request_context(...):', '                generate_report()', '', '        When using the shell, it may be easier to push and pop the', '        context manually to avoid indentation. ::', '', '            ctx = app.test_request_context(...)', '            ctx.push()', '            ...', '            ctx.pop()', '', \"        Takes the same arguments as Werkzeug's\", '        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from', '        the application. See the linked Werkzeug docs for most of the', '        available arguments. Flask-specific behavior is listed here.', '', '        :param path: URL path being requested.', '        :param base_url: Base URL where the app is being served, which', '            ``path`` is relative to. If not given, built from', '            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,', '            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.', '        :param subdomain: Subdomain name to append to', '            :data:`SERVER_NAME`.', '        :param url_scheme: Scheme to use instead of', '            :data:`PREFERRED_URL_SCHEME`.', '        :param data: The request body, either as a string or a dict of', '            form keys and values.', '        :param json: If given, this is serialized as JSON and passed as', '            ``data``. Also defaults ``content_type`` to', '            ``application/json``.', '        :param args: other positional arguments passed to', '            :class:`~werkzeug.test.EnvironBuilder`.', '        :param kwargs: other keyword arguments passed to', '            :class:`~werkzeug.test.EnvironBuilder`.', '        \"\"\"', '        from .testing import EnvironBuilder', '', '        builder = EnvironBuilder(self, *args, **kwargs)', '', '        try:', '            return self.request_context(builder.get_environ())', '        finally:', '            builder.close()', '', '    def wsgi_app(self, environ: dict, start_response: t.Callable) -> t.Any:', '        \"\"\"The actual WSGI application. This is not implemented in', '        :meth:`__call__` so that middlewares can be applied without', '        losing a reference to the app object. Instead of doing this::', '', '            app = MyMiddleware(app)', '', \"        It's a better idea to do this instead::\", '', '            app.wsgi_app = MyMiddleware(app.wsgi_app)', '', '        Then you still have the original application object around and', '        can continue to call methods on it.', '', '        .. versionchanged:: 0.7', '            Teardown events for the request and app contexts are called', '            even if an unhandled error occurs. Other events may not be', '            called depending on when an error occurs during dispatch.', '            See :ref:`callbacks-and-errors`.', '', '        :param environ: A WSGI environment.', '        :param start_response: A callable accepting a status code,', '            a list of headers, and an optional exception context to', '            start the response.', '        \"\"\"', '        ctx = self.request_context(environ)', '        error: t.Optional[BaseException] = None', '        try:', '            try:', '                ctx.push()', '                response = self.full_dispatch_request()', '            except Exception as e:', '                error = e', '                response = self.handle_exception(e)', '            except:  # noqa: B001', '                error = sys.exc_info()[1]', '                raise', '            return response(environ, start_response)', '        finally:', '            if \"werkzeug.debug.preserve_context\" in environ:', '                environ[\"werkzeug.debug.preserve_context\"](_cv_app.get())', '                environ[\"werkzeug.debug.preserve_context\"](_cv_request.get())', '', '            if error is not None and self.should_ignore_error(error):', '                error = None', '', '            ctx.pop(error)', '', '    def __call__(self, environ: dict, start_response: t.Callable) -> t.Any:', '        \"\"\"The WSGI server calls the Flask application object as the', '        WSGI application. This calls :meth:`wsgi_app`, which can be', '        wrapped to apply middleware.', '        \"\"\"', '        return self.wsgi_app(environ, start_response)']}, 'views.py': {'classes': [{'name': 'View', 'start_line': 13, 'end_line': 132, 'text': ['class View:', '    \"\"\"Subclass this class and override :meth:`dispatch_request` to', '    create a generic class-based view. Call :meth:`as_view` to create a', '    view function that creates an instance of the class with the given', '    arguments and calls its ``dispatch_request`` method with any URL', '    variables.', '', '    See :doc:`views` for a detailed guide.', '', '    .. code-block:: python', '', '        class Hello(View):', '            init_every_request = False', '', '            def dispatch_request(self, name):', '                return f\"Hello, {name}!\"', '', '        app.add_url_rule(', '            \"/hello/<name>\", view_func=Hello.as_view(\"hello\")', '        )', '', '    Set :attr:`methods` on the class to change what methods the view', '    accepts.', '', '    Set :attr:`decorators` on the class to apply a list of decorators to', '    the generated view function. Decorators applied to the class itself', '    will not be applied to the generated view function!', '', '    Set :attr:`init_every_request` to ``False`` for efficiency, unless', '    you need to store request-global data on ``self``.', '    \"\"\"', '', '    #: The methods this view is registered for. Uses the same default', '    #: (``[\"GET\", \"HEAD\", \"OPTIONS\"]``) as ``route`` and', '    #: ``add_url_rule`` by default.', '    methods: t.ClassVar[t.Optional[t.Collection[str]]] = None', '', '    #: Control whether the ``OPTIONS`` method is handled automatically.', '    #: Uses the same default (``True``) as ``route`` and', '    #: ``add_url_rule`` by default.', '    provide_automatic_options: t.ClassVar[t.Optional[bool]] = None', '', '    #: A list of decorators to apply, in order, to the generated view', '    #: function. Remember that ``@decorator`` syntax is applied bottom', '    #: to top, so the first decorator in the list would be the bottom', '    #: decorator.', '    #:', '    #: .. versionadded:: 0.8', '    decorators: t.ClassVar[t.List[t.Callable]] = []', '', '    #: Create a new instance of this view class for every request by', '    #: default. If a view subclass sets this to ``False``, the same', '    #: instance is used for every request.', '    #:', '    #: A single instance is more efficient, especially if complex setup', '    #: is done during init. However, storing data on ``self`` is no', '    #: longer safe across requests, and :data:`~flask.g` should be used', '    #: instead.', '    #:', '    #: .. versionadded:: 2.2', '    init_every_request: t.ClassVar[bool] = True', '', '    def dispatch_request(self) -> ft.ResponseReturnValue:', '        \"\"\"The actual view function behavior. Subclasses must override', '        this and return a valid response. Any variables from the URL', '        rule are passed as keyword arguments.', '        \"\"\"', '        raise NotImplementedError()', '', '    @classmethod', '    def as_view(', '        cls, name: str, *class_args: t.Any, **class_kwargs: t.Any', '    ) -> ft.RouteCallable:', '        \"\"\"Convert the class into a view function that can be registered', '        for a route.', '', '        By default, the generated view will create a new instance of the', '        view class for every request and call its', '        :meth:`dispatch_request` method. If the view class sets', '        :attr:`init_every_request` to ``False``, the same instance will', '        be used for every request.', '', '        Except for ``name``, all other arguments passed to this method', '        are forwarded to the view class ``__init__`` method.', '', '        .. versionchanged:: 2.2', '            Added the ``init_every_request`` class attribute.', '        \"\"\"', '        if cls.init_every_request:', '', '            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                self = view.view_class(  # type: ignore[attr-defined]', '                    *class_args, **class_kwargs', '                )', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)', '', '        else:', '            self = cls(*class_args, **class_kwargs)', '', '            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)', '', '        if cls.decorators:', '            view.__name__ = name', '            view.__module__ = cls.__module__', '            for decorator in cls.decorators:', '                view = decorator(view)', '', '        # We attach the view class to the view function for two reasons:', '        # first of all it allows us to easily figure out what class-based', \"        # view this thing came from, secondly it's also used for instantiating\", '        # the view class so you can actually replace it with something else', '        # for testing purposes and debugging.', '        view.view_class = cls  # type: ignore', '        view.__name__ = name', '        view.__doc__ = cls.__doc__', '        view.__module__ = cls.__module__', '        view.methods = cls.methods  # type: ignore', '        view.provide_automatic_options = cls.provide_automatic_options  # type: ignore', '        return view'], 'methods': [{'name': 'dispatch_request', 'start_line': 75, 'end_line': 80, 'text': ['    def dispatch_request(self) -> ft.ResponseReturnValue:', '        \"\"\"The actual view function behavior. Subclasses must override', '        this and return a valid response. Any variables from the URL', '        rule are passed as keyword arguments.', '        \"\"\"', '        raise NotImplementedError()']}, {'name': 'as_view', 'start_line': 83, 'end_line': 132, 'text': ['    def as_view(', '        cls, name: str, *class_args: t.Any, **class_kwargs: t.Any', '    ) -> ft.RouteCallable:', '        \"\"\"Convert the class into a view function that can be registered', '        for a route.', '', '        By default, the generated view will create a new instance of the', '        view class for every request and call its', '        :meth:`dispatch_request` method. If the view class sets', '        :attr:`init_every_request` to ``False``, the same instance will', '        be used for every request.', '', '        Except for ``name``, all other arguments passed to this method', '        are forwarded to the view class ``__init__`` method.', '', '        .. versionchanged:: 2.2', '            Added the ``init_every_request`` class attribute.', '        \"\"\"', '        if cls.init_every_request:', '', '            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                self = view.view_class(  # type: ignore[attr-defined]', '                    *class_args, **class_kwargs', '                )', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)', '', '        else:', '            self = cls(*class_args, **class_kwargs)', '', '            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)', '', '        if cls.decorators:', '            view.__name__ = name', '            view.__module__ = cls.__module__', '            for decorator in cls.decorators:', '                view = decorator(view)', '', '        # We attach the view class to the view function for two reasons:', '        # first of all it allows us to easily figure out what class-based', \"        # view this thing came from, secondly it's also used for instantiating\", '        # the view class so you can actually replace it with something else', '        # for testing purposes and debugging.', '        view.view_class = cls  # type: ignore', '        view.__name__ = name', '        view.__doc__ = cls.__doc__', '        view.__module__ = cls.__module__', '        view.methods = cls.methods  # type: ignore', '        view.provide_automatic_options = cls.provide_automatic_options  # type: ignore', '        return view']}]}, {'name': 'MethodView', 'start_line': 135, 'end_line': 188, 'text': ['class MethodView(View):', '    \"\"\"Dispatches request methods to the corresponding instance methods.', '    For example, if you implement a ``get`` method, it will be used to', '    handle ``GET`` requests.', '', '    This can be useful for defining a REST API.', '', '    :attr:`methods` is automatically set based on the methods defined on', '    the class.', '', '    See :doc:`views` for a detailed guide.', '', '    .. code-block:: python', '', '        class CounterAPI(MethodView):', '            def get(self):', '                return str(session.get(\"counter\", 0))', '', '            def post(self):', '                session[\"counter\"] = session.get(\"counter\", 0) + 1', '                return redirect(url_for(\"counter\"))', '', '        app.add_url_rule(', '            \"/counter\", view_func=CounterAPI.as_view(\"counter\")', '        )', '    \"\"\"', '', '    def __init_subclass__(cls, **kwargs: t.Any) -> None:', '        super().__init_subclass__(**kwargs)', '', '        if \"methods\" not in cls.__dict__:', '            methods = set()', '', '            for base in cls.__bases__:', '                if getattr(base, \"methods\", None):', '                    methods.update(base.methods)  # type: ignore[attr-defined]', '', '            for key in http_method_funcs:', '                if hasattr(cls, key):', '                    methods.add(key.upper())', '', '            if methods:', '                cls.methods = methods', '', '    def dispatch_request(self, **kwargs: t.Any) -> ft.ResponseReturnValue:', '        meth = getattr(self, request.method.lower(), None)', '', \"        # If the request method is HEAD and we don't have a handler for it\", '        # retry with GET.', '        if meth is None and request.method == \"HEAD\":', '            meth = getattr(self, \"get\", None)', '', '        assert meth is not None, f\"Unimplemented method {request.method!r}\"', '        return current_app.ensure_sync(meth)(**kwargs)'], 'methods': [{'name': '__init_subclass__', 'start_line': 162, 'end_line': 177, 'text': ['    def __init_subclass__(cls, **kwargs: t.Any) -> None:', '        super().__init_subclass__(**kwargs)', '', '        if \"methods\" not in cls.__dict__:', '            methods = set()', '', '            for base in cls.__bases__:', '                if getattr(base, \"methods\", None):', '                    methods.update(base.methods)  # type: ignore[attr-defined]', '', '            for key in http_method_funcs:', '                if hasattr(cls, key):', '                    methods.add(key.upper())', '', '            if methods:', '                cls.methods = methods']}, {'name': 'dispatch_request', 'start_line': 179, 'end_line': 188, 'text': ['    def dispatch_request(self, **kwargs: t.Any) -> ft.ResponseReturnValue:', '        meth = getattr(self, request.method.lower(), None)', '', \"        # If the request method is HEAD and we don't have a handler for it\", '        # retry with GET.', '        if meth is None and request.method == \"HEAD\":', '            meth = getattr(self, \"get\", None)', '', '        assert meth is not None, f\"Unimplemented method {request.method!r}\"', '        return current_app.ensure_sync(meth)(**kwargs)']}]}], 'functions': [{'name': 'view', 'start_line': 103, 'end_line': 107, 'text': ['            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                self = view.view_class(  # type: ignore[attr-defined]', '                    *class_args, **class_kwargs', '                )', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)']}, {'name': 'view', 'start_line': 112, 'end_line': 113, 'text': ['            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)']}], 'text': ['import typing as t', '', 'from . import typing as ft', 'from .globals import current_app', 'from .globals import request', '', '', 'http_method_funcs = frozenset(', '    [\"get\", \"post\", \"head\", \"options\", \"delete\", \"put\", \"trace\", \"patch\"]', ')', '', '', 'class View:', '    \"\"\"Subclass this class and override :meth:`dispatch_request` to', '    create a generic class-based view. Call :meth:`as_view` to create a', '    view function that creates an instance of the class with the given', '    arguments and calls its ``dispatch_request`` method with any URL', '    variables.', '', '    See :doc:`views` for a detailed guide.', '', '    .. code-block:: python', '', '        class Hello(View):', '            init_every_request = False', '', '            def dispatch_request(self, name):', '                return f\"Hello, {name}!\"', '', '        app.add_url_rule(', '            \"/hello/<name>\", view_func=Hello.as_view(\"hello\")', '        )', '', '    Set :attr:`methods` on the class to change what methods the view', '    accepts.', '', '    Set :attr:`decorators` on the class to apply a list of decorators to', '    the generated view function. Decorators applied to the class itself', '    will not be applied to the generated view function!', '', '    Set :attr:`init_every_request` to ``False`` for efficiency, unless', '    you need to store request-global data on ``self``.', '    \"\"\"', '', '    #: The methods this view is registered for. Uses the same default', '    #: (``[\"GET\", \"HEAD\", \"OPTIONS\"]``) as ``route`` and', '    #: ``add_url_rule`` by default.', '    methods: t.ClassVar[t.Optional[t.Collection[str]]] = None', '', '    #: Control whether the ``OPTIONS`` method is handled automatically.', '    #: Uses the same default (``True``) as ``route`` and', '    #: ``add_url_rule`` by default.', '    provide_automatic_options: t.ClassVar[t.Optional[bool]] = None', '', '    #: A list of decorators to apply, in order, to the generated view', '    #: function. Remember that ``@decorator`` syntax is applied bottom', '    #: to top, so the first decorator in the list would be the bottom', '    #: decorator.', '    #:', '    #: .. versionadded:: 0.8', '    decorators: t.ClassVar[t.List[t.Callable]] = []', '', '    #: Create a new instance of this view class for every request by', '    #: default. If a view subclass sets this to ``False``, the same', '    #: instance is used for every request.', '    #:', '    #: A single instance is more efficient, especially if complex setup', '    #: is done during init. However, storing data on ``self`` is no', '    #: longer safe across requests, and :data:`~flask.g` should be used', '    #: instead.', '    #:', '    #: .. versionadded:: 2.2', '    init_every_request: t.ClassVar[bool] = True', '', '    def dispatch_request(self) -> ft.ResponseReturnValue:', '        \"\"\"The actual view function behavior. Subclasses must override', '        this and return a valid response. Any variables from the URL', '        rule are passed as keyword arguments.', '        \"\"\"', '        raise NotImplementedError()', '', '    @classmethod', '    def as_view(', '        cls, name: str, *class_args: t.Any, **class_kwargs: t.Any', '    ) -> ft.RouteCallable:', '        \"\"\"Convert the class into a view function that can be registered', '        for a route.', '', '        By default, the generated view will create a new instance of the', '        view class for every request and call its', '        :meth:`dispatch_request` method. If the view class sets', '        :attr:`init_every_request` to ``False``, the same instance will', '        be used for every request.', '', '        Except for ``name``, all other arguments passed to this method', '        are forwarded to the view class ``__init__`` method.', '', '        .. versionchanged:: 2.2', '            Added the ``init_every_request`` class attribute.', '        \"\"\"', '        if cls.init_every_request:', '', '            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                self = view.view_class(  # type: ignore[attr-defined]', '                    *class_args, **class_kwargs', '                )', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)', '', '        else:', '            self = cls(*class_args, **class_kwargs)', '', '            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:', '                return current_app.ensure_sync(self.dispatch_request)(**kwargs)', '', '        if cls.decorators:', '            view.__name__ = name', '            view.__module__ = cls.__module__', '            for decorator in cls.decorators:', '                view = decorator(view)', '', '        # We attach the view class to the view function for two reasons:', '        # first of all it allows us to easily figure out what class-based', \"        # view this thing came from, secondly it's also used for instantiating\", '        # the view class so you can actually replace it with something else', '        # for testing purposes and debugging.', '        view.view_class = cls  # type: ignore', '        view.__name__ = name', '        view.__doc__ = cls.__doc__', '        view.__module__ = cls.__module__', '        view.methods = cls.methods  # type: ignore', '        view.provide_automatic_options = cls.provide_automatic_options  # type: ignore', '        return view', '', '', 'class MethodView(View):', '    \"\"\"Dispatches request methods to the corresponding instance methods.', '    For example, if you implement a ``get`` method, it will be used to', '    handle ``GET`` requests.', '', '    This can be useful for defining a REST API.', '', '    :attr:`methods` is automatically set based on the methods defined on', '    the class.', '', '    See :doc:`views` for a detailed guide.', '', '    .. code-block:: python', '', '        class CounterAPI(MethodView):', '            def get(self):', '                return str(session.get(\"counter\", 0))', '', '            def post(self):', '                session[\"counter\"] = session.get(\"counter\", 0) + 1', '                return redirect(url_for(\"counter\"))', '', '        app.add_url_rule(', '            \"/counter\", view_func=CounterAPI.as_view(\"counter\")', '        )', '    \"\"\"', '', '    def __init_subclass__(cls, **kwargs: t.Any) -> None:', '        super().__init_subclass__(**kwargs)', '', '        if \"methods\" not in cls.__dict__:', '            methods = set()', '', '            for base in cls.__bases__:', '                if getattr(base, \"methods\", None):', '                    methods.update(base.methods)  # type: ignore[attr-defined]', '', '            for key in http_method_funcs:', '                if hasattr(cls, key):', '                    methods.add(key.upper())', '', '            if methods:', '                cls.methods = methods', '', '    def dispatch_request(self, **kwargs: t.Any) -> ft.ResponseReturnValue:', '        meth = getattr(self, request.method.lower(), None)', '', \"        # If the request method is HEAD and we don't have a handler for it\", '        # retry with GET.', '        if meth is None and request.method == \"HEAD\":', '            meth = getattr(self, \"get\", None)', '', '        assert meth is not None, f\"Unimplemented method {request.method!r}\"', '        return current_app.ensure_sync(meth)(**kwargs)']}, 'scaffold.py': {'classes': [{'name': 'Scaffold', 'start_line': 54, 'end_line': 770, 'text': ['class Scaffold:', '    \"\"\"Common behavior shared between :class:`~flask.Flask` and', '    :class:`~flask.blueprints.Blueprint`.', '', '    :param import_name: The import name of the module where this object', '        is defined. Usually :attr:`__name__` should be used.', '    :param static_folder: Path to a folder of static files to serve.', '        If this is set, a static route will be added.', '    :param static_url_path: URL prefix for the static route.', '    :param template_folder: Path to a folder containing template files.', '        for rendering. If this is set, a Jinja loader will be added.', '    :param root_path: The path that static, template, and resource files', '        are relative to. Typically not set, it is discovered based on', '        the ``import_name``.', '', '    .. versionadded:: 2.0', '    \"\"\"', '', '    name: str', '    _static_folder: t.Optional[str] = None', '    _static_url_path: t.Optional[str] = None', '', '    def __init__(', '        self,', '        import_name: str,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        static_url_path: t.Optional[str] = None,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        root_path: t.Optional[str] = None,', '    ):', '        #: The name of the package or module that this object belongs', '        #: to. Do not change this once it is set by the constructor.', '        self.import_name = import_name', '', '        self.static_folder = static_folder  # type: ignore', '        self.static_url_path = static_url_path', '', '        #: The path to the templates folder, relative to', '        #: :attr:`root_path`, to add to the template loader. ``None`` if', '        #: templates should not be added.', '        self.template_folder = template_folder', '', '        if root_path is None:', '            root_path = get_root_path(self.import_name)', '', '        #: Absolute path to the package on the filesystem. Used to look', '        #: up resources contained in the package.', '        self.root_path = root_path', '', '        #: The Click command group for registering CLI commands for this', '        #: object. The commands are available from the ``flask`` command', '        #: once the application has been discovered and blueprints have', '        #: been registered.', '        self.cli = AppGroup()', '', '        #: A dictionary mapping endpoint names to view functions.', '        #:', '        #: To register a view function, use the :meth:`route` decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.view_functions: t.Dict[str, t.Callable] = {}', '', '        #: A data structure of registered error handlers, in the format', '        #: ``{scope: {code: {class: handler}}}``. The ``scope`` key is', '        #: the name of a blueprint the handlers are active for, or', '        #: ``None`` for all requests. The ``code`` key is the HTTP', '        #: status code for ``HTTPException``, or ``None`` for', '        #: other exceptions. The innermost dictionary maps exception', '        #: classes to handler functions.', '        #:', '        #: To register an error handler, use the :meth:`errorhandler`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.error_handler_spec: t.Dict[', '            ft.AppOrBlueprintKey,', '            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], ft.ErrorHandlerCallable]],', '        ] = defaultdict(lambda: defaultdict(dict))', '', '        #: A data structure of functions to call at the beginning of', '        #: each request, in the format ``{scope: [functions]}``. The', '        #: ``scope`` key is the name of a blueprint the functions are', '        #: active for, or ``None`` for all requests.', '        #:', '        #: To register a function, use the :meth:`before_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.before_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.BeforeRequestCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call at the end of each', '        #: request, in the format ``{scope: [functions]}``. The', '        #: ``scope`` key is the name of a blueprint the functions are', '        #: active for, or ``None`` for all requests.', '        #:', '        #: To register a function, use the :meth:`after_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.after_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.AfterRequestCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call at the end of each', '        #: request even if an exception is raised, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`teardown_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.teardown_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.TeardownCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call to pass extra context', '        #: values when rendering templates, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`context_processor`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.template_context_processors: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.TemplateContextProcessorCallable]', '        ] = defaultdict(list, {None: [_default_template_ctx_processor]})', '', '        #: A data structure of functions to call to modify the keyword', '        #: arguments passed to the view function, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the', '        #: :meth:`url_value_preprocessor` decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.url_value_preprocessors: t.Dict[', '            ft.AppOrBlueprintKey,', '            t.List[ft.URLValuePreprocessorCallable],', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call to modify the keyword', '        #: arguments when generating URLs, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`url_defaults`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.url_default_functions: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.URLDefaultCallable]', '        ] = defaultdict(list)', '', '    def __repr__(self) -> str:', '        return f\"<{type(self).__name__} {self.name!r}>\"', '', '    def _check_setup_finished(self, f_name: str) -> None:', '        raise NotImplementedError', '', '    @property', '    def static_folder(self) -> t.Optional[str]:', '        \"\"\"The absolute path to the configured static folder. ``None``', '        if no static folder is set.', '        \"\"\"', '        if self._static_folder is not None:', '            return os.path.join(self.root_path, self._static_folder)', '        else:', '            return None', '', '    @static_folder.setter', '    def static_folder(self, value: t.Optional[t.Union[str, os.PathLike]]) -> None:', '        if value is not None:', '            value = os.fspath(value).rstrip(r\"\\\\/\")', '', '        self._static_folder = value', '', '    @property', '    def has_static_folder(self) -> bool:', '        \"\"\"``True`` if :attr:`static_folder` is set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        return self.static_folder is not None', '', '    @property', '    def static_url_path(self) -> t.Optional[str]:', '        \"\"\"The URL prefix that the static route will be accessible from.', '', '        If it was not configured during init, it is derived from', '        :attr:`static_folder`.', '        \"\"\"', '        if self._static_url_path is not None:', '            return self._static_url_path', '', '        if self.static_folder is not None:', '            basename = os.path.basename(self.static_folder)', '            return f\"/{basename}\".rstrip(\"/\")', '', '        return None', '', '    @static_url_path.setter', '    def static_url_path(self, value: t.Optional[str]) -> None:', '        if value is not None:', '            value = value.rstrip(\"/\")', '', '        self._static_url_path = value', '', '    def get_send_file_max_age(self, filename: t.Optional[str]) -> t.Optional[int]:', '        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache', \"        value for a given file path if it wasn't passed.\", '', '        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from', '        the configuration of :data:`~flask.current_app`. This defaults', '        to ``None``, which tells the browser to use conditional requests', '        instead of a timed cache, which is usually preferable.', '', '        .. versionchanged:: 2.0', '            The default configuration is ``None`` instead of 12 hours.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]', '', '        if value is None:', '            return None', '', '        if isinstance(value, timedelta):', '            return int(value.total_seconds())', '', '        return value', '', '    def send_static_file(self, filename: str) -> \"Response\":', '        \"\"\"The view function used to serve files from', '        :attr:`static_folder`. A route is automatically registered for', '        this view at :attr:`static_url_path` if :attr:`static_folder` is', '        set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if not self.has_static_folder:', '            raise RuntimeError(\"\\'static_folder\\' must be set to serve static_files.\")', '', '        # send_file only knows to call get_send_file_max_age on the app,', '        # call it here so it works for blueprints too.', '        max_age = self.get_send_file_max_age(filename)', '        return send_from_directory(', '            t.cast(str, self.static_folder), filename, max_age=max_age', '        )', '', '    @cached_property', '    def jinja_loader(self) -> t.Optional[FileSystemLoader]:', '        \"\"\"The Jinja loader for this object\\'s templates. By default this', '        is a class :class:`jinja2.loaders.FileSystemLoader` to', '        :attr:`template_folder` if it is set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if self.template_folder is not None:', '            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))', '        else:', '            return None', '', '    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:', '        \"\"\"Open a resource file relative to :attr:`root_path` for', '        reading.', '', '        For example, if the file ``schema.sql`` is next to the file', '        ``app.py`` where the ``Flask`` app is defined, it can be opened', '        with:', '', '        .. code-block:: python', '', '            with app.open_resource(\"schema.sql\") as f:', '                conn.executescript(f.read())', '', '        :param resource: Path to the resource relative to', '            :attr:`root_path`.', '        :param mode: Open the file in this mode. Only reading is', '            supported, valid values are \"r\" (or \"rt\") and \"rb\".', '        \"\"\"', '        if mode not in {\"r\", \"rt\", \"rb\"}:', '            raise ValueError(\"Resources can only be opened for reading.\")', '', '        return open(os.path.join(self.root_path, resource), mode)', '', '    def _method_route(', '        self,', '        method: str,', '        rule: str,', '        options: dict,', '    ) -> t.Callable[[T_route], T_route]:', '        if \"methods\" in options:', '            raise TypeError(\"Use the \\'route\\' decorator to use the \\'methods\\' argument.\")', '', '        return self.route(rule, methods=[method], **options)', '', '    @setupmethod', '    def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"GET\", rule, options)', '', '    @setupmethod', '    def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"POST\", rule, options)', '', '    @setupmethod', '    def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"PUT\", rule, options)', '', '    @setupmethod', '    def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"DELETE\", rule, options)', '', '    @setupmethod', '    def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"PATCH\", rule, options)', '', '    @setupmethod', '    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Decorate a view function to register it with the given URL', '        rule and options. Calls :meth:`add_url_rule`, which has more', '        details about the implementation.', '', '        .. code-block:: python', '', '            @app.route(\"/\")', '            def index():', '                return \"Hello, World!\"', '', '        See :ref:`url-route-registrations`.', '', '        The endpoint name for the route defaults to the name of the view', \"        function if the ``endpoint`` parameter isn't passed.\", '', '        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and', '        ``OPTIONS`` are added automatically.', '', '        :param rule: The URL rule string.', '        :param options: Extra options passed to the', '            :class:`~werkzeug.routing.Rule` object.', '        \"\"\"', '', '        def decorator(f: T_route) -> T_route:', '            endpoint = options.pop(\"endpoint\", None)', '            self.add_url_rule(rule, endpoint, f, **options)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Register a rule for routing incoming requests and building', '        URLs. The :meth:`route` decorator is a shortcut to call this', '        with the ``view_func`` argument. These are equivalent:', '', '        .. code-block:: python', '', '            @app.route(\"/\")', '            def index():', '                ...', '', '        .. code-block:: python', '', '            def index():', '                ...', '', '            app.add_url_rule(\"/\", view_func=index)', '', '        See :ref:`url-route-registrations`.', '', '        The endpoint name for the route defaults to the name of the view', \"        function if the ``endpoint`` parameter isn't passed. An error\", '        will be raised if a function has already been registered for the', '        endpoint.', '', '        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is', '        always added automatically, and ``OPTIONS`` is added', '        automatically by default.', '', '        ``view_func`` does not necessarily need to be passed, but if the', '        rule should participate in routing an endpoint name must be', '        associated with a view function at some point with the', '        :meth:`endpoint` decorator.', '', '        .. code-block:: python', '', '            app.add_url_rule(\"/\", endpoint=\"index\")', '', '            @app.endpoint(\"index\")', '            def index():', '                ...', '', '        If ``view_func`` has a ``required_methods`` attribute, those', '        methods are added to the passed and automatic methods. If it', '        has a ``provide_automatic_methods`` attribute, it is used as the', '        default if the parameter is not passed.', '', '        :param rule: The URL rule string.', '        :param endpoint: The endpoint name to associate with the rule', '            and view function. Used when routing and building URLs.', '            Defaults to ``view_func.__name__``.', '        :param view_func: The view function to associate with the', '            endpoint name.', '        :param provide_automatic_options: Add the ``OPTIONS`` method and', '            respond to ``OPTIONS`` requests automatically.', '        :param options: Extra options passed to the', '            :class:`~werkzeug.routing.Rule` object.', '        \"\"\"', '        raise NotImplementedError', '', '    @setupmethod', '    def endpoint(self, endpoint: str) -> t.Callable[[F], F]:', '        \"\"\"Decorate a view function to register it for the given', '        endpoint. Used if a rule is added without a ``view_func`` with', '        :meth:`add_url_rule`.', '', '        .. code-block:: python', '', '            app.add_url_rule(\"/ex\", endpoint=\"example\")', '', '            @app.endpoint(\"example\")', '            def example():', '                ...', '', '        :param endpoint: The endpoint name to associate with the view', '            function.', '        \"\"\"', '', '        def decorator(f: F) -> F:', '            self.view_functions[endpoint] = f', '            return f', '', '        return decorator', '', '    @setupmethod', '    def before_request(self, f: T_before_request) -> T_before_request:', '        \"\"\"Register a function to run before each request.', '', '        For example, this can be used to open a database connection, or', '        to load the logged in user from the session.', '', '        .. code-block:: python', '', '            @app.before_request', '            def load_user():', '                if \"user_id\" in session:', '                    g.user = db.session.get(session[\"user_id\"])', '', '        The function will be called without any arguments. If it returns', '        a non-``None`` value, the value is handled as if it was the', '        return value from the view, and further request handling is', '        stopped.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes before every request. When used on a blueprint, this executes before', '        every request that the blueprint handles. To register with a blueprint and', '        execute before every request, use :meth:`.Blueprint.before_app_request`.', '        \"\"\"', '        self.before_request_funcs.setdefault(None, []).append(f)', '        return f', '', '    @setupmethod', '    def after_request(self, f: T_after_request) -> T_after_request:', '        \"\"\"Register a function to run after each request to this object.', '', '        The function is called with the response object, and must return', '        a response object. This allows the functions to modify or', '        replace the response before it is sent.', '', '        If a function raises an exception, any remaining', '        ``after_request`` functions will not be called. Therefore, this', '        should not be used for actions that must execute, such as to', '        close resources. Use :meth:`teardown_request` for that.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes after every request. When used on a blueprint, this executes after', '        every request that the blueprint handles. To register with a blueprint and', '        execute after every request, use :meth:`.Blueprint.after_app_request`.', '        \"\"\"', '        self.after_request_funcs.setdefault(None, []).append(f)', '        return f', '', '    @setupmethod', '    def teardown_request(self, f: T_teardown) -> T_teardown:', '        \"\"\"Register a function to be called when the request context is', '        popped. Typically this happens at the end of each request, but', '        contexts may be pushed manually as well during testing.', '', '        .. code-block:: python', '', '            with app.test_request_context():', '                ...', '', '        When the ``with`` block exits (or ``ctx.pop()`` is called), the', '        teardown functions are called just before the request context is', '        made inactive.', '', '        When a teardown function was called because of an unhandled', '        exception it will be passed an error object. If an', '        :meth:`errorhandler` is registered, it will handle the exception', '        and the teardown will not receive it.', '', '        Teardown functions must avoid raising exceptions. If they', '        execute code that might fail they must surround that code with a', '        ``try``/``except`` block and log any errors.', '', '        The return values of teardown functions are ignored.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes after every request. When used on a blueprint, this executes after', '        every request that the blueprint handles. To register with a blueprint and', '        execute after every request, use :meth:`.Blueprint.teardown_app_request`.', '        \"\"\"', '        self.teardown_request_funcs.setdefault(None, []).append(f)', '        return f', '', '    @setupmethod', '    def context_processor(', '        self,', '        f: T_template_context_processor,', '    ) -> T_template_context_processor:', '        \"\"\"Registers a template context processor function. These functions run before', '        rendering a template. The keys of the returned dict are added as variables', '        available in the template.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every rendered template. When used on a blueprint, this is called', \"        for templates rendered from the blueprint's views. To register with a blueprint\", '        and affect every template, use :meth:`.Blueprint.app_context_processor`.', '        \"\"\"', '        self.template_context_processors[None].append(f)', '        return f', '', '    @setupmethod', '    def url_value_preprocessor(', '        self,', '        f: T_url_value_preprocessor,', '    ) -> T_url_value_preprocessor:', '        \"\"\"Register a URL value preprocessor function for all view', '        functions in the application. These functions will be called before the', '        :meth:`before_request` functions.', '', '        The function can modify the values captured from the matched url before', '        they are passed to the view. For example, this can be used to pop a', '        common language code value and place it in ``g`` rather than pass it to', '        every view.', '', '        The function is passed the endpoint name and values dict. The return', '        value is ignored.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every request. When used on a blueprint, this is called for', '        requests that the blueprint handles. To register with a blueprint and affect', '        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.', '        \"\"\"', '        self.url_value_preprocessors[None].append(f)', '        return f', '', '    @setupmethod', '    def url_defaults(self, f: T_url_defaults) -> T_url_defaults:', '        \"\"\"Callback function for URL defaults for all view functions of the', \"        application.  It's called with the endpoint and values and should\", '        update the values passed in place.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every request. When used on a blueprint, this is called for', '        requests that the blueprint handles. To register with a blueprint and affect', '        every request, use :meth:`.Blueprint.app_url_defaults`.', '        \"\"\"', '        self.url_default_functions[None].append(f)', '        return f', '', '    @setupmethod', '    def errorhandler(', '        self, code_or_exception: t.Union[t.Type[Exception], int]', '    ) -> t.Callable[[T_error_handler], T_error_handler]:', '        \"\"\"Register a function to handle errors by code or exception class.', '', '        A decorator that is used to register a function given an', '        error code.  Example::', '', '            @app.errorhandler(404)', '            def page_not_found(error):', \"                return 'This page does not exist', 404\", '', '        You can also register handlers for arbitrary exceptions::', '', '            @app.errorhandler(DatabaseError)', '            def special_exception_handler(error):', \"                return 'Database connection failed', 500\", '', '        This is available on both app and blueprint objects. When used on an app, this', '        can handle errors from every request. When used on a blueprint, this can handle', '        errors from requests that the blueprint handles. To register with a blueprint', '        and affect every request, use :meth:`.Blueprint.app_errorhandler`.', '', '        .. versionadded:: 0.7', '            Use :meth:`register_error_handler` instead of modifying', '            :attr:`error_handler_spec` directly, for application wide error', '            handlers.', '', '        .. versionadded:: 0.7', '           One can now additionally also register custom exception types', '           that do not necessarily have to be a subclass of the', '           :class:`~werkzeug.exceptions.HTTPException` class.', '', '        :param code_or_exception: the code as integer for the handler, or', '                                  an arbitrary exception', '        \"\"\"', '', '        def decorator(f: T_error_handler) -> T_error_handler:', '            self.register_error_handler(code_or_exception, f)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def register_error_handler(', '        self,', '        code_or_exception: t.Union[t.Type[Exception], int],', '        f: ft.ErrorHandlerCallable,', '    ) -> None:', '        \"\"\"Alternative error attach function to the :meth:`errorhandler`', '        decorator that is more straightforward to use for non decorator', '        usage.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        exc_class, code = self._get_exc_class_and_code(code_or_exception)', '        self.error_handler_spec[None][code][exc_class] = f', '', '    @staticmethod', '    def _get_exc_class_and_code(', '        exc_class_or_code: t.Union[t.Type[Exception], int]', '    ) -> t.Tuple[t.Type[Exception], t.Optional[int]]:', '        \"\"\"Get the exception class being handled. For HTTP status codes', '        or ``HTTPException`` subclasses, return both the exception and', '        status code.', '', '        :param exc_class_or_code: Any exception class, or an HTTP status', '            code as an integer.', '        \"\"\"', '        exc_class: t.Type[Exception]', '', '        if isinstance(exc_class_or_code, int):', '            try:', '                exc_class = default_exceptions[exc_class_or_code]', '            except KeyError:', '                raise ValueError(', '                    f\"\\'{exc_class_or_code}\\' is not a recognized HTTP\"', '                    \" error code. Use a subclass of HTTPException with\"', '                    \" that code instead.\"', '                ) from None', '        else:', '            exc_class = exc_class_or_code', '', '        if isinstance(exc_class, Exception):', '            raise TypeError(', '                f\"{exc_class!r} is an instance, not a class. Handlers\"', '                \" can only be registered for Exception classes or HTTP\"', '                \" error codes.\"', '            )', '', '        if not issubclass(exc_class, Exception):', '            raise ValueError(', '                f\"\\'{exc_class.__name__}\\' is not a subclass of Exception.\"', '                \" Handlers can only be registered for Exception classes\"', '                \" or HTTP error codes.\"', '            )', '', '        if issubclass(exc_class, HTTPException):', '            return exc_class, exc_class.code', '        else:', '            return exc_class, None'], 'methods': [{'name': '__init__', 'start_line': 76, 'end_line': 222, 'text': ['    def __init__(', '        self,', '        import_name: str,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        static_url_path: t.Optional[str] = None,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        root_path: t.Optional[str] = None,', '    ):', '        #: The name of the package or module that this object belongs', '        #: to. Do not change this once it is set by the constructor.', '        self.import_name = import_name', '', '        self.static_folder = static_folder  # type: ignore', '        self.static_url_path = static_url_path', '', '        #: The path to the templates folder, relative to', '        #: :attr:`root_path`, to add to the template loader. ``None`` if', '        #: templates should not be added.', '        self.template_folder = template_folder', '', '        if root_path is None:', '            root_path = get_root_path(self.import_name)', '', '        #: Absolute path to the package on the filesystem. Used to look', '        #: up resources contained in the package.', '        self.root_path = root_path', '', '        #: The Click command group for registering CLI commands for this', '        #: object. The commands are available from the ``flask`` command', '        #: once the application has been discovered and blueprints have', '        #: been registered.', '        self.cli = AppGroup()', '', '        #: A dictionary mapping endpoint names to view functions.', '        #:', '        #: To register a view function, use the :meth:`route` decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.view_functions: t.Dict[str, t.Callable] = {}', '', '        #: A data structure of registered error handlers, in the format', '        #: ``{scope: {code: {class: handler}}}``. The ``scope`` key is', '        #: the name of a blueprint the handlers are active for, or', '        #: ``None`` for all requests. The ``code`` key is the HTTP', '        #: status code for ``HTTPException``, or ``None`` for', '        #: other exceptions. The innermost dictionary maps exception', '        #: classes to handler functions.', '        #:', '        #: To register an error handler, use the :meth:`errorhandler`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.error_handler_spec: t.Dict[', '            ft.AppOrBlueprintKey,', '            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], ft.ErrorHandlerCallable]],', '        ] = defaultdict(lambda: defaultdict(dict))', '', '        #: A data structure of functions to call at the beginning of', '        #: each request, in the format ``{scope: [functions]}``. The', '        #: ``scope`` key is the name of a blueprint the functions are', '        #: active for, or ``None`` for all requests.', '        #:', '        #: To register a function, use the :meth:`before_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.before_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.BeforeRequestCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call at the end of each', '        #: request, in the format ``{scope: [functions]}``. The', '        #: ``scope`` key is the name of a blueprint the functions are', '        #: active for, or ``None`` for all requests.', '        #:', '        #: To register a function, use the :meth:`after_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.after_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.AfterRequestCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call at the end of each', '        #: request even if an exception is raised, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`teardown_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.teardown_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.TeardownCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call to pass extra context', '        #: values when rendering templates, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`context_processor`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.template_context_processors: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.TemplateContextProcessorCallable]', '        ] = defaultdict(list, {None: [_default_template_ctx_processor]})', '', '        #: A data structure of functions to call to modify the keyword', '        #: arguments passed to the view function, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the', '        #: :meth:`url_value_preprocessor` decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.url_value_preprocessors: t.Dict[', '            ft.AppOrBlueprintKey,', '            t.List[ft.URLValuePreprocessorCallable],', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call to modify the keyword', '        #: arguments when generating URLs, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`url_defaults`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.url_default_functions: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.URLDefaultCallable]', '        ] = defaultdict(list)']}, {'name': '__repr__', 'start_line': 224, 'end_line': 225, 'text': ['    def __repr__(self) -> str:', '        return f\"<{type(self).__name__} {self.name!r}>\"']}, {'name': '_check_setup_finished', 'start_line': 227, 'end_line': 228, 'text': ['    def _check_setup_finished(self, f_name: str) -> None:', '        raise NotImplementedError']}, {'name': 'static_folder', 'start_line': 231, 'end_line': 238, 'text': ['    def static_folder(self) -> t.Optional[str]:', '        \"\"\"The absolute path to the configured static folder. ``None``', '        if no static folder is set.', '        \"\"\"', '        if self._static_folder is not None:', '            return os.path.join(self.root_path, self._static_folder)', '        else:', '            return None']}, {'name': 'static_folder', 'start_line': 241, 'end_line': 245, 'text': ['    def static_folder(self, value: t.Optional[t.Union[str, os.PathLike]]) -> None:', '        if value is not None:', '            value = os.fspath(value).rstrip(r\"\\\\/\")', '', '        self._static_folder = value']}, {'name': 'has_static_folder', 'start_line': 248, 'end_line': 253, 'text': ['    def has_static_folder(self) -> bool:', '        \"\"\"``True`` if :attr:`static_folder` is set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        return self.static_folder is not None']}, {'name': 'static_url_path', 'start_line': 256, 'end_line': 269, 'text': ['    def static_url_path(self) -> t.Optional[str]:', '        \"\"\"The URL prefix that the static route will be accessible from.', '', '        If it was not configured during init, it is derived from', '        :attr:`static_folder`.', '        \"\"\"', '        if self._static_url_path is not None:', '            return self._static_url_path', '', '        if self.static_folder is not None:', '            basename = os.path.basename(self.static_folder)', '            return f\"/{basename}\".rstrip(\"/\")', '', '        return None']}, {'name': 'static_url_path', 'start_line': 272, 'end_line': 276, 'text': ['    def static_url_path(self, value: t.Optional[str]) -> None:', '        if value is not None:', '            value = value.rstrip(\"/\")', '', '        self._static_url_path = value']}, {'name': 'get_send_file_max_age', 'start_line': 278, 'end_line': 300, 'text': ['    def get_send_file_max_age(self, filename: t.Optional[str]) -> t.Optional[int]:', '        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache', \"        value for a given file path if it wasn't passed.\", '', '        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from', '        the configuration of :data:`~flask.current_app`. This defaults', '        to ``None``, which tells the browser to use conditional requests', '        instead of a timed cache, which is usually preferable.', '', '        .. versionchanged:: 2.0', '            The default configuration is ``None`` instead of 12 hours.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]', '', '        if value is None:', '            return None', '', '        if isinstance(value, timedelta):', '            return int(value.total_seconds())', '', '        return value']}, {'name': 'send_static_file', 'start_line': 302, 'end_line': 318, 'text': ['    def send_static_file(self, filename: str) -> \"Response\":', '        \"\"\"The view function used to serve files from', '        :attr:`static_folder`. A route is automatically registered for', '        this view at :attr:`static_url_path` if :attr:`static_folder` is', '        set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if not self.has_static_folder:', '            raise RuntimeError(\"\\'static_folder\\' must be set to serve static_files.\")', '', '        # send_file only knows to call get_send_file_max_age on the app,', '        # call it here so it works for blueprints too.', '        max_age = self.get_send_file_max_age(filename)', '        return send_from_directory(', '            t.cast(str, self.static_folder), filename, max_age=max_age', '        )']}, {'name': 'jinja_loader', 'start_line': 321, 'end_line': 331, 'text': ['    def jinja_loader(self) -> t.Optional[FileSystemLoader]:', '        \"\"\"The Jinja loader for this object\\'s templates. By default this', '        is a class :class:`jinja2.loaders.FileSystemLoader` to', '        :attr:`template_folder` if it is set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if self.template_folder is not None:', '            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))', '        else:', '            return None']}, {'name': 'open_resource', 'start_line': 333, 'end_line': 354, 'text': ['    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:', '        \"\"\"Open a resource file relative to :attr:`root_path` for', '        reading.', '', '        For example, if the file ``schema.sql`` is next to the file', '        ``app.py`` where the ``Flask`` app is defined, it can be opened', '        with:', '', '        .. code-block:: python', '', '            with app.open_resource(\"schema.sql\") as f:', '                conn.executescript(f.read())', '', '        :param resource: Path to the resource relative to', '            :attr:`root_path`.', '        :param mode: Open the file in this mode. Only reading is', '            supported, valid values are \"r\" (or \"rt\") and \"rb\".', '        \"\"\"', '        if mode not in {\"r\", \"rt\", \"rb\"}:', '            raise ValueError(\"Resources can only be opened for reading.\")', '', '        return open(os.path.join(self.root_path, resource), mode)']}, {'name': '_method_route', 'start_line': 356, 'end_line': 365, 'text': ['    def _method_route(', '        self,', '        method: str,', '        rule: str,', '        options: dict,', '    ) -> t.Callable[[T_route], T_route]:', '        if \"methods\" in options:', '            raise TypeError(\"Use the \\'route\\' decorator to use the \\'methods\\' argument.\")', '', '        return self.route(rule, methods=[method], **options)']}, {'name': 'get', 'start_line': 368, 'end_line': 373, 'text': ['    def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"GET\", rule, options)']}, {'name': 'post', 'start_line': 376, 'end_line': 381, 'text': ['    def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"POST\", rule, options)']}, {'name': 'put', 'start_line': 384, 'end_line': 389, 'text': ['    def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"PUT\", rule, options)']}, {'name': 'delete', 'start_line': 392, 'end_line': 397, 'text': ['    def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"DELETE\", rule, options)']}, {'name': 'patch', 'start_line': 400, 'end_line': 405, 'text': ['    def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"PATCH\", rule, options)']}, {'name': 'route', 'start_line': 408, 'end_line': 437, 'text': ['    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Decorate a view function to register it with the given URL', '        rule and options. Calls :meth:`add_url_rule`, which has more', '        details about the implementation.', '', '        .. code-block:: python', '', '            @app.route(\"/\")', '            def index():', '                return \"Hello, World!\"', '', '        See :ref:`url-route-registrations`.', '', '        The endpoint name for the route defaults to the name of the view', \"        function if the ``endpoint`` parameter isn't passed.\", '', '        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and', '        ``OPTIONS`` are added automatically.', '', '        :param rule: The URL rule string.', '        :param options: Extra options passed to the', '            :class:`~werkzeug.routing.Rule` object.', '        \"\"\"', '', '        def decorator(f: T_route) -> T_route:', '            endpoint = options.pop(\"endpoint\", None)', '            self.add_url_rule(rule, endpoint, f, **options)', '            return f', '', '        return decorator']}, {'name': 'add_url_rule', 'start_line': 440, 'end_line': 505, 'text': ['    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Register a rule for routing incoming requests and building', '        URLs. The :meth:`route` decorator is a shortcut to call this', '        with the ``view_func`` argument. These are equivalent:', '', '        .. code-block:: python', '', '            @app.route(\"/\")', '            def index():', '                ...', '', '        .. code-block:: python', '', '            def index():', '                ...', '', '            app.add_url_rule(\"/\", view_func=index)', '', '        See :ref:`url-route-registrations`.', '', '        The endpoint name for the route defaults to the name of the view', \"        function if the ``endpoint`` parameter isn't passed. An error\", '        will be raised if a function has already been registered for the', '        endpoint.', '', '        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is', '        always added automatically, and ``OPTIONS`` is added', '        automatically by default.', '', '        ``view_func`` does not necessarily need to be passed, but if the', '        rule should participate in routing an endpoint name must be', '        associated with a view function at some point with the', '        :meth:`endpoint` decorator.', '', '        .. code-block:: python', '', '            app.add_url_rule(\"/\", endpoint=\"index\")', '', '            @app.endpoint(\"index\")', '            def index():', '                ...', '', '        If ``view_func`` has a ``required_methods`` attribute, those', '        methods are added to the passed and automatic methods. If it', '        has a ``provide_automatic_methods`` attribute, it is used as the', '        default if the parameter is not passed.', '', '        :param rule: The URL rule string.', '        :param endpoint: The endpoint name to associate with the rule', '            and view function. Used when routing and building URLs.', '            Defaults to ``view_func.__name__``.', '        :param view_func: The view function to associate with the', '            endpoint name.', '        :param provide_automatic_options: Add the ``OPTIONS`` method and', '            respond to ``OPTIONS`` requests automatically.', '        :param options: Extra options passed to the', '            :class:`~werkzeug.routing.Rule` object.', '        \"\"\"', '        raise NotImplementedError']}, {'name': 'endpoint', 'start_line': 508, 'end_line': 529, 'text': ['    def endpoint(self, endpoint: str) -> t.Callable[[F], F]:', '        \"\"\"Decorate a view function to register it for the given', '        endpoint. Used if a rule is added without a ``view_func`` with', '        :meth:`add_url_rule`.', '', '        .. code-block:: python', '', '            app.add_url_rule(\"/ex\", endpoint=\"example\")', '', '            @app.endpoint(\"example\")', '            def example():', '                ...', '', '        :param endpoint: The endpoint name to associate with the view', '            function.', '        \"\"\"', '', '        def decorator(f: F) -> F:', '            self.view_functions[endpoint] = f', '            return f', '', '        return decorator']}, {'name': 'before_request', 'start_line': 532, 'end_line': 556, 'text': ['    def before_request(self, f: T_before_request) -> T_before_request:', '        \"\"\"Register a function to run before each request.', '', '        For example, this can be used to open a database connection, or', '        to load the logged in user from the session.', '', '        .. code-block:: python', '', '            @app.before_request', '            def load_user():', '                if \"user_id\" in session:', '                    g.user = db.session.get(session[\"user_id\"])', '', '        The function will be called without any arguments. If it returns', '        a non-``None`` value, the value is handled as if it was the', '        return value from the view, and further request handling is', '        stopped.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes before every request. When used on a blueprint, this executes before', '        every request that the blueprint handles. To register with a blueprint and', '        execute before every request, use :meth:`.Blueprint.before_app_request`.', '        \"\"\"', '        self.before_request_funcs.setdefault(None, []).append(f)', '        return f']}, {'name': 'after_request', 'start_line': 559, 'end_line': 577, 'text': ['    def after_request(self, f: T_after_request) -> T_after_request:', '        \"\"\"Register a function to run after each request to this object.', '', '        The function is called with the response object, and must return', '        a response object. This allows the functions to modify or', '        replace the response before it is sent.', '', '        If a function raises an exception, any remaining', '        ``after_request`` functions will not be called. Therefore, this', '        should not be used for actions that must execute, such as to', '        close resources. Use :meth:`teardown_request` for that.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes after every request. When used on a blueprint, this executes after', '        every request that the blueprint handles. To register with a blueprint and', '        execute after every request, use :meth:`.Blueprint.after_app_request`.', '        \"\"\"', '        self.after_request_funcs.setdefault(None, []).append(f)', '        return f']}, {'name': 'teardown_request', 'start_line': 580, 'end_line': 611, 'text': ['    def teardown_request(self, f: T_teardown) -> T_teardown:', '        \"\"\"Register a function to be called when the request context is', '        popped. Typically this happens at the end of each request, but', '        contexts may be pushed manually as well during testing.', '', '        .. code-block:: python', '', '            with app.test_request_context():', '                ...', '', '        When the ``with`` block exits (or ``ctx.pop()`` is called), the', '        teardown functions are called just before the request context is', '        made inactive.', '', '        When a teardown function was called because of an unhandled', '        exception it will be passed an error object. If an', '        :meth:`errorhandler` is registered, it will handle the exception', '        and the teardown will not receive it.', '', '        Teardown functions must avoid raising exceptions. If they', '        execute code that might fail they must surround that code with a', '        ``try``/``except`` block and log any errors.', '', '        The return values of teardown functions are ignored.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes after every request. When used on a blueprint, this executes after', '        every request that the blueprint handles. To register with a blueprint and', '        execute after every request, use :meth:`.Blueprint.teardown_app_request`.', '        \"\"\"', '        self.teardown_request_funcs.setdefault(None, []).append(f)', '        return f']}, {'name': 'context_processor', 'start_line': 614, 'end_line': 628, 'text': ['    def context_processor(', '        self,', '        f: T_template_context_processor,', '    ) -> T_template_context_processor:', '        \"\"\"Registers a template context processor function. These functions run before', '        rendering a template. The keys of the returned dict are added as variables', '        available in the template.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every rendered template. When used on a blueprint, this is called', \"        for templates rendered from the blueprint's views. To register with a blueprint\", '        and affect every template, use :meth:`.Blueprint.app_context_processor`.', '        \"\"\"', '        self.template_context_processors[None].append(f)', '        return f']}, {'name': 'url_value_preprocessor', 'start_line': 631, 'end_line': 653, 'text': ['    def url_value_preprocessor(', '        self,', '        f: T_url_value_preprocessor,', '    ) -> T_url_value_preprocessor:', '        \"\"\"Register a URL value preprocessor function for all view', '        functions in the application. These functions will be called before the', '        :meth:`before_request` functions.', '', '        The function can modify the values captured from the matched url before', '        they are passed to the view. For example, this can be used to pop a', '        common language code value and place it in ``g`` rather than pass it to', '        every view.', '', '        The function is passed the endpoint name and values dict. The return', '        value is ignored.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every request. When used on a blueprint, this is called for', '        requests that the blueprint handles. To register with a blueprint and affect', '        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.', '        \"\"\"', '        self.url_value_preprocessors[None].append(f)', '        return f']}, {'name': 'url_defaults', 'start_line': 656, 'end_line': 667, 'text': ['    def url_defaults(self, f: T_url_defaults) -> T_url_defaults:', '        \"\"\"Callback function for URL defaults for all view functions of the', \"        application.  It's called with the endpoint and values and should\", '        update the values passed in place.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every request. When used on a blueprint, this is called for', '        requests that the blueprint handles. To register with a blueprint and affect', '        every request, use :meth:`.Blueprint.app_url_defaults`.', '        \"\"\"', '        self.url_default_functions[None].append(f)', '        return f']}, {'name': 'errorhandler', 'start_line': 670, 'end_line': 711, 'text': ['    def errorhandler(', '        self, code_or_exception: t.Union[t.Type[Exception], int]', '    ) -> t.Callable[[T_error_handler], T_error_handler]:', '        \"\"\"Register a function to handle errors by code or exception class.', '', '        A decorator that is used to register a function given an', '        error code.  Example::', '', '            @app.errorhandler(404)', '            def page_not_found(error):', \"                return 'This page does not exist', 404\", '', '        You can also register handlers for arbitrary exceptions::', '', '            @app.errorhandler(DatabaseError)', '            def special_exception_handler(error):', \"                return 'Database connection failed', 500\", '', '        This is available on both app and blueprint objects. When used on an app, this', '        can handle errors from every request. When used on a blueprint, this can handle', '        errors from requests that the blueprint handles. To register with a blueprint', '        and affect every request, use :meth:`.Blueprint.app_errorhandler`.', '', '        .. versionadded:: 0.7', '            Use :meth:`register_error_handler` instead of modifying', '            :attr:`error_handler_spec` directly, for application wide error', '            handlers.', '', '        .. versionadded:: 0.7', '           One can now additionally also register custom exception types', '           that do not necessarily have to be a subclass of the', '           :class:`~werkzeug.exceptions.HTTPException` class.', '', '        :param code_or_exception: the code as integer for the handler, or', '                                  an arbitrary exception', '        \"\"\"', '', '        def decorator(f: T_error_handler) -> T_error_handler:', '            self.register_error_handler(code_or_exception, f)', '            return f', '', '        return decorator']}, {'name': 'register_error_handler', 'start_line': 714, 'end_line': 726, 'text': ['    def register_error_handler(', '        self,', '        code_or_exception: t.Union[t.Type[Exception], int],', '        f: ft.ErrorHandlerCallable,', '    ) -> None:', '        \"\"\"Alternative error attach function to the :meth:`errorhandler`', '        decorator that is more straightforward to use for non decorator', '        usage.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        exc_class, code = self._get_exc_class_and_code(code_or_exception)', '        self.error_handler_spec[None][code][exc_class] = f']}, {'name': '_get_exc_class_and_code', 'start_line': 729, 'end_line': 770, 'text': ['    def _get_exc_class_and_code(', '        exc_class_or_code: t.Union[t.Type[Exception], int]', '    ) -> t.Tuple[t.Type[Exception], t.Optional[int]]:', '        \"\"\"Get the exception class being handled. For HTTP status codes', '        or ``HTTPException`` subclasses, return both the exception and', '        status code.', '', '        :param exc_class_or_code: Any exception class, or an HTTP status', '            code as an integer.', '        \"\"\"', '        exc_class: t.Type[Exception]', '', '        if isinstance(exc_class_or_code, int):', '            try:', '                exc_class = default_exceptions[exc_class_or_code]', '            except KeyError:', '                raise ValueError(', '                    f\"\\'{exc_class_or_code}\\' is not a recognized HTTP\"', '                    \" error code. Use a subclass of HTTPException with\"', '                    \" that code instead.\"', '                ) from None', '        else:', '            exc_class = exc_class_or_code', '', '        if isinstance(exc_class, Exception):', '            raise TypeError(', '                f\"{exc_class!r} is an instance, not a class. Handlers\"', '                \" can only be registered for Exception classes or HTTP\"', '                \" error codes.\"', '            )', '', '        if not issubclass(exc_class, Exception):', '            raise ValueError(', '                f\"\\'{exc_class.__name__}\\' is not a subclass of Exception.\"', '                \" Handlers can only be registered for Exception classes\"', '                \" or HTTP error codes.\"', '            )', '', '        if issubclass(exc_class, HTTPException):', '            return exc_class, exc_class.code', '        else:', '            return exc_class, None']}]}], 'functions': [{'name': 'setupmethod', 'start_line': 44, 'end_line': 51, 'text': ['def setupmethod(f: F) -> F:', '    f_name = f.__name__', '', '    def wrapper_func(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '        self._check_setup_finished(f_name)', '        return f(self, *args, **kwargs)', '', '    return t.cast(F, update_wrapper(wrapper_func, f))']}, {'name': '_endpoint_from_view_func', 'start_line': 773, 'end_line': 778, 'text': ['def _endpoint_from_view_func(view_func: t.Callable) -> str:', '    \"\"\"Internal helper that returns the default endpoint for a given', '    function.  This always is the function name.', '    \"\"\"', '    assert view_func is not None, \"expected view func if endpoint is not provided.\"', '    return view_func.__name__']}, {'name': '_matching_loader_thinks_module_is_package', 'start_line': 781, 'end_line': 803, 'text': ['def _matching_loader_thinks_module_is_package(loader, mod_name):', '    \"\"\"Attempt to figure out if the given name is a package or a module.', '', '    :param: loader: The loader that handled the name.', '    :param mod_name: The name of the package or module.', '    \"\"\"', \"    # Use loader.is_package if it's available.\", '    if hasattr(loader, \"is_package\"):', '        return loader.is_package(mod_name)', '', '    cls = type(loader)', '', \"    # NamespaceLoader doesn't implement is_package, but all names it\", '    # loads must be packages.', '    if cls.__module__ == \"_frozen_importlib\" and cls.__name__ == \"NamespaceLoader\":', '        return True', '', '    # Otherwise we need to fail with an error that explains what went', '    # wrong.', '    raise AttributeError(', '        f\"\\'{cls.__name__}.is_package()\\' must be implemented for PEP 302\"', '        f\" import hooks.\"', '    )']}, {'name': '_path_is_relative_to', 'start_line': 806, 'end_line': 812, 'text': ['def _path_is_relative_to(path: pathlib.PurePath, base: str) -> bool:', \"    # Path.is_relative_to doesn't exist until Python 3.9\", '    try:', '        path.relative_to(base)', '        return True', '    except ValueError:', '        return False']}, {'name': '_find_package_path', 'start_line': 815, 'end_line': 880, 'text': ['def _find_package_path(import_name):', '    \"\"\"Find the path that contains the package or module.\"\"\"', '    root_mod_name, _, _ = import_name.partition(\".\")', '', '    try:', '        root_spec = importlib.util.find_spec(root_mod_name)', '', '        if root_spec is None:', '            raise ValueError(\"not found\")', '    # ImportError: the machinery told us it does not exist', '    # ValueError:', '    #    - the module name was invalid', '    #    - the module name is __main__', '    #    - *we* raised `ValueError` due to `root_spec` being `None`', '    except (ImportError, ValueError):', '        pass  # handled below', '    else:', '        # namespace package', '        if root_spec.origin in {\"namespace\", None}:', '            package_spec = importlib.util.find_spec(import_name)', '            if package_spec is not None and package_spec.submodule_search_locations:', '                # Pick the path in the namespace that contains the submodule.', '                package_path = pathlib.Path(', '                    os.path.commonpath(package_spec.submodule_search_locations)', '                )', '                search_locations = (', '                    location', '                    for location in root_spec.submodule_search_locations', '                    if _path_is_relative_to(package_path, location)', '                )', '            else:', '                # Pick the first path.', '                search_locations = iter(root_spec.submodule_search_locations)', '            return os.path.dirname(next(search_locations))', '        # a package (with __init__.py)', '        elif root_spec.submodule_search_locations:', '            return os.path.dirname(os.path.dirname(root_spec.origin))', '        # just a normal module', '        else:', '            return os.path.dirname(root_spec.origin)', '', '    # we were unable to find the `package_path` using PEP 451 loaders', '    loader = pkgutil.get_loader(root_mod_name)', '', '    if loader is None or root_mod_name == \"__main__\":', '        # import name is not found, or interactive/main module', '        return os.getcwd()', '', '    if hasattr(loader, \"get_filename\"):', '        filename = loader.get_filename(root_mod_name)', '    elif hasattr(loader, \"archive\"):', \"        # zipimporter's loader.archive points to the .egg or .zip file.\", '        filename = loader.archive', '    else:', '        # At least one loader is missing both get_filename and archive:', \"        # Google App Engine's HardenedModulesHook, use __file__.\", '        filename = importlib.import_module(root_mod_name).__file__', '', '    package_path = os.path.abspath(os.path.dirname(filename))', '', '    # If the imported name is a package, filename is currently pointing', '    # to the root of the package, need to get the current directory.', '    if _matching_loader_thinks_module_is_package(loader, root_mod_name):', '        package_path = os.path.dirname(package_path)', '', '    return package_path']}, {'name': 'find_package', 'start_line': 883, 'end_line': 921, 'text': ['def find_package(import_name: str):', '    \"\"\"Find the prefix that a package is installed under, and the path', '    that it would be imported from.', '', '    The prefix is the directory containing the standard directory', '    hierarchy (lib, bin, etc.). If the package is not installed to the', '    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),', '    ``None`` is returned.', '', '    The path is the entry in :attr:`sys.path` that contains the package', \"    for import. If the package is not installed, it's assumed that the\", '    package was imported from the current working directory.', '    \"\"\"', '    package_path = _find_package_path(import_name)', '    py_prefix = os.path.abspath(sys.prefix)', '', '    # installed to the system', '    if _path_is_relative_to(pathlib.PurePath(package_path), py_prefix):', '        return py_prefix, package_path', '', '    site_parent, site_folder = os.path.split(package_path)', '', '    # installed to a virtualenv', '    if site_folder.lower() == \"site-packages\":', '        parent, folder = os.path.split(site_parent)', '', '        # Windows (prefix/lib/site-packages)', '        if folder.lower() == \"lib\":', '            return parent, package_path', '', '        # Unix (prefix/lib/pythonX.Y/site-packages)', '        if os.path.basename(parent).lower() == \"lib\":', '            return os.path.dirname(parent), package_path', '', '        # something else (prefix/site-packages)', '        return site_parent, package_path', '', '    # not installed', '    return None, package_path']}, {'name': 'wrapper_func', 'start_line': 47, 'end_line': 49, 'text': ['    def wrapper_func(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '        self._check_setup_finished(f_name)', '        return f(self, *args, **kwargs)']}, {'name': 'decorator', 'start_line': 432, 'end_line': 435, 'text': ['        def decorator(f: T_route) -> T_route:', '            endpoint = options.pop(\"endpoint\", None)', '            self.add_url_rule(rule, endpoint, f, **options)', '            return f']}, {'name': 'decorator', 'start_line': 525, 'end_line': 527, 'text': ['        def decorator(f: F) -> F:', '            self.view_functions[endpoint] = f', '            return f']}, {'name': 'decorator', 'start_line': 707, 'end_line': 709, 'text': ['        def decorator(f: T_error_handler) -> T_error_handler:', '            self.register_error_handler(code_or_exception, f)', '            return f']}], 'text': ['import importlib.util', 'import os', 'import pathlib', 'import pkgutil', 'import sys', 'import typing as t', 'from collections import defaultdict', 'from datetime import timedelta', 'from functools import update_wrapper', '', 'from jinja2 import FileSystemLoader', 'from werkzeug.exceptions import default_exceptions', 'from werkzeug.exceptions import HTTPException', 'from werkzeug.utils import cached_property', '', 'from . import typing as ft', 'from .cli import AppGroup', 'from .globals import current_app', 'from .helpers import get_root_path', 'from .helpers import send_from_directory', 'from .templating import _default_template_ctx_processor', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from .wrappers import Response', '', '# a singleton sentinel value for parameter defaults', '_sentinel = object()', '', 'F = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])', 'T_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable)', 'T_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)', 'T_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)', 'T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)', 'T_template_context_processor = t.TypeVar(', '    \"T_template_context_processor\", bound=ft.TemplateContextProcessorCallable', ')', 'T_url_defaults = t.TypeVar(\"T_url_defaults\", bound=ft.URLDefaultCallable)', 'T_url_value_preprocessor = t.TypeVar(', '    \"T_url_value_preprocessor\", bound=ft.URLValuePreprocessorCallable', ')', 'T_route = t.TypeVar(\"T_route\", bound=ft.RouteCallable)', '', '', 'def setupmethod(f: F) -> F:', '    f_name = f.__name__', '', '    def wrapper_func(self, *args: t.Any, **kwargs: t.Any) -> t.Any:', '        self._check_setup_finished(f_name)', '        return f(self, *args, **kwargs)', '', '    return t.cast(F, update_wrapper(wrapper_func, f))', '', '', 'class Scaffold:', '    \"\"\"Common behavior shared between :class:`~flask.Flask` and', '    :class:`~flask.blueprints.Blueprint`.', '', '    :param import_name: The import name of the module where this object', '        is defined. Usually :attr:`__name__` should be used.', '    :param static_folder: Path to a folder of static files to serve.', '        If this is set, a static route will be added.', '    :param static_url_path: URL prefix for the static route.', '    :param template_folder: Path to a folder containing template files.', '        for rendering. If this is set, a Jinja loader will be added.', '    :param root_path: The path that static, template, and resource files', '        are relative to. Typically not set, it is discovered based on', '        the ``import_name``.', '', '    .. versionadded:: 2.0', '    \"\"\"', '', '    name: str', '    _static_folder: t.Optional[str] = None', '    _static_url_path: t.Optional[str] = None', '', '    def __init__(', '        self,', '        import_name: str,', '        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        static_url_path: t.Optional[str] = None,', '        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,', '        root_path: t.Optional[str] = None,', '    ):', '        #: The name of the package or module that this object belongs', '        #: to. Do not change this once it is set by the constructor.', '        self.import_name = import_name', '', '        self.static_folder = static_folder  # type: ignore', '        self.static_url_path = static_url_path', '', '        #: The path to the templates folder, relative to', '        #: :attr:`root_path`, to add to the template loader. ``None`` if', '        #: templates should not be added.', '        self.template_folder = template_folder', '', '        if root_path is None:', '            root_path = get_root_path(self.import_name)', '', '        #: Absolute path to the package on the filesystem. Used to look', '        #: up resources contained in the package.', '        self.root_path = root_path', '', '        #: The Click command group for registering CLI commands for this', '        #: object. The commands are available from the ``flask`` command', '        #: once the application has been discovered and blueprints have', '        #: been registered.', '        self.cli = AppGroup()', '', '        #: A dictionary mapping endpoint names to view functions.', '        #:', '        #: To register a view function, use the :meth:`route` decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.view_functions: t.Dict[str, t.Callable] = {}', '', '        #: A data structure of registered error handlers, in the format', '        #: ``{scope: {code: {class: handler}}}``. The ``scope`` key is', '        #: the name of a blueprint the handlers are active for, or', '        #: ``None`` for all requests. The ``code`` key is the HTTP', '        #: status code for ``HTTPException``, or ``None`` for', '        #: other exceptions. The innermost dictionary maps exception', '        #: classes to handler functions.', '        #:', '        #: To register an error handler, use the :meth:`errorhandler`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.error_handler_spec: t.Dict[', '            ft.AppOrBlueprintKey,', '            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], ft.ErrorHandlerCallable]],', '        ] = defaultdict(lambda: defaultdict(dict))', '', '        #: A data structure of functions to call at the beginning of', '        #: each request, in the format ``{scope: [functions]}``. The', '        #: ``scope`` key is the name of a blueprint the functions are', '        #: active for, or ``None`` for all requests.', '        #:', '        #: To register a function, use the :meth:`before_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.before_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.BeforeRequestCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call at the end of each', '        #: request, in the format ``{scope: [functions]}``. The', '        #: ``scope`` key is the name of a blueprint the functions are', '        #: active for, or ``None`` for all requests.', '        #:', '        #: To register a function, use the :meth:`after_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.after_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.AfterRequestCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call at the end of each', '        #: request even if an exception is raised, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`teardown_request`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.teardown_request_funcs: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.TeardownCallable]', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call to pass extra context', '        #: values when rendering templates, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`context_processor`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.template_context_processors: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.TemplateContextProcessorCallable]', '        ] = defaultdict(list, {None: [_default_template_ctx_processor]})', '', '        #: A data structure of functions to call to modify the keyword', '        #: arguments passed to the view function, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the', '        #: :meth:`url_value_preprocessor` decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.url_value_preprocessors: t.Dict[', '            ft.AppOrBlueprintKey,', '            t.List[ft.URLValuePreprocessorCallable],', '        ] = defaultdict(list)', '', '        #: A data structure of functions to call to modify the keyword', '        #: arguments when generating URLs, in the format', '        #: ``{scope: [functions]}``. The ``scope`` key is the name of a', '        #: blueprint the functions are active for, or ``None`` for all', '        #: requests.', '        #:', '        #: To register a function, use the :meth:`url_defaults`', '        #: decorator.', '        #:', '        #: This data structure is internal. It should not be modified', '        #: directly and its format may change at any time.', '        self.url_default_functions: t.Dict[', '            ft.AppOrBlueprintKey, t.List[ft.URLDefaultCallable]', '        ] = defaultdict(list)', '', '    def __repr__(self) -> str:', '        return f\"<{type(self).__name__} {self.name!r}>\"', '', '    def _check_setup_finished(self, f_name: str) -> None:', '        raise NotImplementedError', '', '    @property', '    def static_folder(self) -> t.Optional[str]:', '        \"\"\"The absolute path to the configured static folder. ``None``', '        if no static folder is set.', '        \"\"\"', '        if self._static_folder is not None:', '            return os.path.join(self.root_path, self._static_folder)', '        else:', '            return None', '', '    @static_folder.setter', '    def static_folder(self, value: t.Optional[t.Union[str, os.PathLike]]) -> None:', '        if value is not None:', '            value = os.fspath(value).rstrip(r\"\\\\/\")', '', '        self._static_folder = value', '', '    @property', '    def has_static_folder(self) -> bool:', '        \"\"\"``True`` if :attr:`static_folder` is set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        return self.static_folder is not None', '', '    @property', '    def static_url_path(self) -> t.Optional[str]:', '        \"\"\"The URL prefix that the static route will be accessible from.', '', '        If it was not configured during init, it is derived from', '        :attr:`static_folder`.', '        \"\"\"', '        if self._static_url_path is not None:', '            return self._static_url_path', '', '        if self.static_folder is not None:', '            basename = os.path.basename(self.static_folder)', '            return f\"/{basename}\".rstrip(\"/\")', '', '        return None', '', '    @static_url_path.setter', '    def static_url_path(self, value: t.Optional[str]) -> None:', '        if value is not None:', '            value = value.rstrip(\"/\")', '', '        self._static_url_path = value', '', '    def get_send_file_max_age(self, filename: t.Optional[str]) -> t.Optional[int]:', '        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache', \"        value for a given file path if it wasn't passed.\", '', '        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from', '        the configuration of :data:`~flask.current_app`. This defaults', '        to ``None``, which tells the browser to use conditional requests', '        instead of a timed cache, which is usually preferable.', '', '        .. versionchanged:: 2.0', '            The default configuration is ``None`` instead of 12 hours.', '', '        .. versionadded:: 0.9', '        \"\"\"', '        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]', '', '        if value is None:', '            return None', '', '        if isinstance(value, timedelta):', '            return int(value.total_seconds())', '', '        return value', '', '    def send_static_file(self, filename: str) -> \"Response\":', '        \"\"\"The view function used to serve files from', '        :attr:`static_folder`. A route is automatically registered for', '        this view at :attr:`static_url_path` if :attr:`static_folder` is', '        set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if not self.has_static_folder:', '            raise RuntimeError(\"\\'static_folder\\' must be set to serve static_files.\")', '', '        # send_file only knows to call get_send_file_max_age on the app,', '        # call it here so it works for blueprints too.', '        max_age = self.get_send_file_max_age(filename)', '        return send_from_directory(', '            t.cast(str, self.static_folder), filename, max_age=max_age', '        )', '', '    @cached_property', '    def jinja_loader(self) -> t.Optional[FileSystemLoader]:', '        \"\"\"The Jinja loader for this object\\'s templates. By default this', '        is a class :class:`jinja2.loaders.FileSystemLoader` to', '        :attr:`template_folder` if it is set.', '', '        .. versionadded:: 0.5', '        \"\"\"', '        if self.template_folder is not None:', '            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))', '        else:', '            return None', '', '    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:', '        \"\"\"Open a resource file relative to :attr:`root_path` for', '        reading.', '', '        For example, if the file ``schema.sql`` is next to the file', '        ``app.py`` where the ``Flask`` app is defined, it can be opened', '        with:', '', '        .. code-block:: python', '', '            with app.open_resource(\"schema.sql\") as f:', '                conn.executescript(f.read())', '', '        :param resource: Path to the resource relative to', '            :attr:`root_path`.', '        :param mode: Open the file in this mode. Only reading is', '            supported, valid values are \"r\" (or \"rt\") and \"rb\".', '        \"\"\"', '        if mode not in {\"r\", \"rt\", \"rb\"}:', '            raise ValueError(\"Resources can only be opened for reading.\")', '', '        return open(os.path.join(self.root_path, resource), mode)', '', '    def _method_route(', '        self,', '        method: str,', '        rule: str,', '        options: dict,', '    ) -> t.Callable[[T_route], T_route]:', '        if \"methods\" in options:', '            raise TypeError(\"Use the \\'route\\' decorator to use the \\'methods\\' argument.\")', '', '        return self.route(rule, methods=[method], **options)', '', '    @setupmethod', '    def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"GET\", rule, options)', '', '    @setupmethod', '    def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"POST\", rule, options)', '', '    @setupmethod', '    def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"PUT\", rule, options)', '', '    @setupmethod', '    def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"DELETE\", rule, options)', '', '    @setupmethod', '    def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.', '', '        .. versionadded:: 2.0', '        \"\"\"', '        return self._method_route(\"PATCH\", rule, options)', '', '    @setupmethod', '    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:', '        \"\"\"Decorate a view function to register it with the given URL', '        rule and options. Calls :meth:`add_url_rule`, which has more', '        details about the implementation.', '', '        .. code-block:: python', '', '            @app.route(\"/\")', '            def index():', '                return \"Hello, World!\"', '', '        See :ref:`url-route-registrations`.', '', '        The endpoint name for the route defaults to the name of the view', \"        function if the ``endpoint`` parameter isn't passed.\", '', '        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and', '        ``OPTIONS`` are added automatically.', '', '        :param rule: The URL rule string.', '        :param options: Extra options passed to the', '            :class:`~werkzeug.routing.Rule` object.', '        \"\"\"', '', '        def decorator(f: T_route) -> T_route:', '            endpoint = options.pop(\"endpoint\", None)', '            self.add_url_rule(rule, endpoint, f, **options)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def add_url_rule(', '        self,', '        rule: str,', '        endpoint: t.Optional[str] = None,', '        view_func: t.Optional[ft.RouteCallable] = None,', '        provide_automatic_options: t.Optional[bool] = None,', '        **options: t.Any,', '    ) -> None:', '        \"\"\"Register a rule for routing incoming requests and building', '        URLs. The :meth:`route` decorator is a shortcut to call this', '        with the ``view_func`` argument. These are equivalent:', '', '        .. code-block:: python', '', '            @app.route(\"/\")', '            def index():', '                ...', '', '        .. code-block:: python', '', '            def index():', '                ...', '', '            app.add_url_rule(\"/\", view_func=index)', '', '        See :ref:`url-route-registrations`.', '', '        The endpoint name for the route defaults to the name of the view', \"        function if the ``endpoint`` parameter isn't passed. An error\", '        will be raised if a function has already been registered for the', '        endpoint.', '', '        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is', '        always added automatically, and ``OPTIONS`` is added', '        automatically by default.', '', '        ``view_func`` does not necessarily need to be passed, but if the', '        rule should participate in routing an endpoint name must be', '        associated with a view function at some point with the', '        :meth:`endpoint` decorator.', '', '        .. code-block:: python', '', '            app.add_url_rule(\"/\", endpoint=\"index\")', '', '            @app.endpoint(\"index\")', '            def index():', '                ...', '', '        If ``view_func`` has a ``required_methods`` attribute, those', '        methods are added to the passed and automatic methods. If it', '        has a ``provide_automatic_methods`` attribute, it is used as the', '        default if the parameter is not passed.', '', '        :param rule: The URL rule string.', '        :param endpoint: The endpoint name to associate with the rule', '            and view function. Used when routing and building URLs.', '            Defaults to ``view_func.__name__``.', '        :param view_func: The view function to associate with the', '            endpoint name.', '        :param provide_automatic_options: Add the ``OPTIONS`` method and', '            respond to ``OPTIONS`` requests automatically.', '        :param options: Extra options passed to the', '            :class:`~werkzeug.routing.Rule` object.', '        \"\"\"', '        raise NotImplementedError', '', '    @setupmethod', '    def endpoint(self, endpoint: str) -> t.Callable[[F], F]:', '        \"\"\"Decorate a view function to register it for the given', '        endpoint. Used if a rule is added without a ``view_func`` with', '        :meth:`add_url_rule`.', '', '        .. code-block:: python', '', '            app.add_url_rule(\"/ex\", endpoint=\"example\")', '', '            @app.endpoint(\"example\")', '            def example():', '                ...', '', '        :param endpoint: The endpoint name to associate with the view', '            function.', '        \"\"\"', '', '        def decorator(f: F) -> F:', '            self.view_functions[endpoint] = f', '            return f', '', '        return decorator', '', '    @setupmethod', '    def before_request(self, f: T_before_request) -> T_before_request:', '        \"\"\"Register a function to run before each request.', '', '        For example, this can be used to open a database connection, or', '        to load the logged in user from the session.', '', '        .. code-block:: python', '', '            @app.before_request', '            def load_user():', '                if \"user_id\" in session:', '                    g.user = db.session.get(session[\"user_id\"])', '', '        The function will be called without any arguments. If it returns', '        a non-``None`` value, the value is handled as if it was the', '        return value from the view, and further request handling is', '        stopped.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes before every request. When used on a blueprint, this executes before', '        every request that the blueprint handles. To register with a blueprint and', '        execute before every request, use :meth:`.Blueprint.before_app_request`.', '        \"\"\"', '        self.before_request_funcs.setdefault(None, []).append(f)', '        return f', '', '    @setupmethod', '    def after_request(self, f: T_after_request) -> T_after_request:', '        \"\"\"Register a function to run after each request to this object.', '', '        The function is called with the response object, and must return', '        a response object. This allows the functions to modify or', '        replace the response before it is sent.', '', '        If a function raises an exception, any remaining', '        ``after_request`` functions will not be called. Therefore, this', '        should not be used for actions that must execute, such as to', '        close resources. Use :meth:`teardown_request` for that.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes after every request. When used on a blueprint, this executes after', '        every request that the blueprint handles. To register with a blueprint and', '        execute after every request, use :meth:`.Blueprint.after_app_request`.', '        \"\"\"', '        self.after_request_funcs.setdefault(None, []).append(f)', '        return f', '', '    @setupmethod', '    def teardown_request(self, f: T_teardown) -> T_teardown:', '        \"\"\"Register a function to be called when the request context is', '        popped. Typically this happens at the end of each request, but', '        contexts may be pushed manually as well during testing.', '', '        .. code-block:: python', '', '            with app.test_request_context():', '                ...', '', '        When the ``with`` block exits (or ``ctx.pop()`` is called), the', '        teardown functions are called just before the request context is', '        made inactive.', '', '        When a teardown function was called because of an unhandled', '        exception it will be passed an error object. If an', '        :meth:`errorhandler` is registered, it will handle the exception', '        and the teardown will not receive it.', '', '        Teardown functions must avoid raising exceptions. If they', '        execute code that might fail they must surround that code with a', '        ``try``/``except`` block and log any errors.', '', '        The return values of teardown functions are ignored.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        executes after every request. When used on a blueprint, this executes after', '        every request that the blueprint handles. To register with a blueprint and', '        execute after every request, use :meth:`.Blueprint.teardown_app_request`.', '        \"\"\"', '        self.teardown_request_funcs.setdefault(None, []).append(f)', '        return f', '', '    @setupmethod', '    def context_processor(', '        self,', '        f: T_template_context_processor,', '    ) -> T_template_context_processor:', '        \"\"\"Registers a template context processor function. These functions run before', '        rendering a template. The keys of the returned dict are added as variables', '        available in the template.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every rendered template. When used on a blueprint, this is called', \"        for templates rendered from the blueprint's views. To register with a blueprint\", '        and affect every template, use :meth:`.Blueprint.app_context_processor`.', '        \"\"\"', '        self.template_context_processors[None].append(f)', '        return f', '', '    @setupmethod', '    def url_value_preprocessor(', '        self,', '        f: T_url_value_preprocessor,', '    ) -> T_url_value_preprocessor:', '        \"\"\"Register a URL value preprocessor function for all view', '        functions in the application. These functions will be called before the', '        :meth:`before_request` functions.', '', '        The function can modify the values captured from the matched url before', '        they are passed to the view. For example, this can be used to pop a', '        common language code value and place it in ``g`` rather than pass it to', '        every view.', '', '        The function is passed the endpoint name and values dict. The return', '        value is ignored.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every request. When used on a blueprint, this is called for', '        requests that the blueprint handles. To register with a blueprint and affect', '        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.', '        \"\"\"', '        self.url_value_preprocessors[None].append(f)', '        return f', '', '    @setupmethod', '    def url_defaults(self, f: T_url_defaults) -> T_url_defaults:', '        \"\"\"Callback function for URL defaults for all view functions of the', \"        application.  It's called with the endpoint and values and should\", '        update the values passed in place.', '', '        This is available on both app and blueprint objects. When used on an app, this', '        is called for every request. When used on a blueprint, this is called for', '        requests that the blueprint handles. To register with a blueprint and affect', '        every request, use :meth:`.Blueprint.app_url_defaults`.', '        \"\"\"', '        self.url_default_functions[None].append(f)', '        return f', '', '    @setupmethod', '    def errorhandler(', '        self, code_or_exception: t.Union[t.Type[Exception], int]', '    ) -> t.Callable[[T_error_handler], T_error_handler]:', '        \"\"\"Register a function to handle errors by code or exception class.', '', '        A decorator that is used to register a function given an', '        error code.  Example::', '', '            @app.errorhandler(404)', '            def page_not_found(error):', \"                return 'This page does not exist', 404\", '', '        You can also register handlers for arbitrary exceptions::', '', '            @app.errorhandler(DatabaseError)', '            def special_exception_handler(error):', \"                return 'Database connection failed', 500\", '', '        This is available on both app and blueprint objects. When used on an app, this', '        can handle errors from every request. When used on a blueprint, this can handle', '        errors from requests that the blueprint handles. To register with a blueprint', '        and affect every request, use :meth:`.Blueprint.app_errorhandler`.', '', '        .. versionadded:: 0.7', '            Use :meth:`register_error_handler` instead of modifying', '            :attr:`error_handler_spec` directly, for application wide error', '            handlers.', '', '        .. versionadded:: 0.7', '           One can now additionally also register custom exception types', '           that do not necessarily have to be a subclass of the', '           :class:`~werkzeug.exceptions.HTTPException` class.', '', '        :param code_or_exception: the code as integer for the handler, or', '                                  an arbitrary exception', '        \"\"\"', '', '        def decorator(f: T_error_handler) -> T_error_handler:', '            self.register_error_handler(code_or_exception, f)', '            return f', '', '        return decorator', '', '    @setupmethod', '    def register_error_handler(', '        self,', '        code_or_exception: t.Union[t.Type[Exception], int],', '        f: ft.ErrorHandlerCallable,', '    ) -> None:', '        \"\"\"Alternative error attach function to the :meth:`errorhandler`', '        decorator that is more straightforward to use for non decorator', '        usage.', '', '        .. versionadded:: 0.7', '        \"\"\"', '        exc_class, code = self._get_exc_class_and_code(code_or_exception)', '        self.error_handler_spec[None][code][exc_class] = f', '', '    @staticmethod', '    def _get_exc_class_and_code(', '        exc_class_or_code: t.Union[t.Type[Exception], int]', '    ) -> t.Tuple[t.Type[Exception], t.Optional[int]]:', '        \"\"\"Get the exception class being handled. For HTTP status codes', '        or ``HTTPException`` subclasses, return both the exception and', '        status code.', '', '        :param exc_class_or_code: Any exception class, or an HTTP status', '            code as an integer.', '        \"\"\"', '        exc_class: t.Type[Exception]', '', '        if isinstance(exc_class_or_code, int):', '            try:', '                exc_class = default_exceptions[exc_class_or_code]', '            except KeyError:', '                raise ValueError(', '                    f\"\\'{exc_class_or_code}\\' is not a recognized HTTP\"', '                    \" error code. Use a subclass of HTTPException with\"', '                    \" that code instead.\"', '                ) from None', '        else:', '            exc_class = exc_class_or_code', '', '        if isinstance(exc_class, Exception):', '            raise TypeError(', '                f\"{exc_class!r} is an instance, not a class. Handlers\"', '                \" can only be registered for Exception classes or HTTP\"', '                \" error codes.\"', '            )', '', '        if not issubclass(exc_class, Exception):', '            raise ValueError(', '                f\"\\'{exc_class.__name__}\\' is not a subclass of Exception.\"', '                \" Handlers can only be registered for Exception classes\"', '                \" or HTTP error codes.\"', '            )', '', '        if issubclass(exc_class, HTTPException):', '            return exc_class, exc_class.code', '        else:', '            return exc_class, None', '', '', 'def _endpoint_from_view_func(view_func: t.Callable) -> str:', '    \"\"\"Internal helper that returns the default endpoint for a given', '    function.  This always is the function name.', '    \"\"\"', '    assert view_func is not None, \"expected view func if endpoint is not provided.\"', '    return view_func.__name__', '', '', 'def _matching_loader_thinks_module_is_package(loader, mod_name):', '    \"\"\"Attempt to figure out if the given name is a package or a module.', '', '    :param: loader: The loader that handled the name.', '    :param mod_name: The name of the package or module.', '    \"\"\"', \"    # Use loader.is_package if it's available.\", '    if hasattr(loader, \"is_package\"):', '        return loader.is_package(mod_name)', '', '    cls = type(loader)', '', \"    # NamespaceLoader doesn't implement is_package, but all names it\", '    # loads must be packages.', '    if cls.__module__ == \"_frozen_importlib\" and cls.__name__ == \"NamespaceLoader\":', '        return True', '', '    # Otherwise we need to fail with an error that explains what went', '    # wrong.', '    raise AttributeError(', '        f\"\\'{cls.__name__}.is_package()\\' must be implemented for PEP 302\"', '        f\" import hooks.\"', '    )', '', '', 'def _path_is_relative_to(path: pathlib.PurePath, base: str) -> bool:', \"    # Path.is_relative_to doesn't exist until Python 3.9\", '    try:', '        path.relative_to(base)', '        return True', '    except ValueError:', '        return False', '', '', 'def _find_package_path(import_name):', '    \"\"\"Find the path that contains the package or module.\"\"\"', '    root_mod_name, _, _ = import_name.partition(\".\")', '', '    try:', '        root_spec = importlib.util.find_spec(root_mod_name)', '', '        if root_spec is None:', '            raise ValueError(\"not found\")', '    # ImportError: the machinery told us it does not exist', '    # ValueError:', '    #    - the module name was invalid', '    #    - the module name is __main__', '    #    - *we* raised `ValueError` due to `root_spec` being `None`', '    except (ImportError, ValueError):', '        pass  # handled below', '    else:', '        # namespace package', '        if root_spec.origin in {\"namespace\", None}:', '            package_spec = importlib.util.find_spec(import_name)', '            if package_spec is not None and package_spec.submodule_search_locations:', '                # Pick the path in the namespace that contains the submodule.', '                package_path = pathlib.Path(', '                    os.path.commonpath(package_spec.submodule_search_locations)', '                )', '                search_locations = (', '                    location', '                    for location in root_spec.submodule_search_locations', '                    if _path_is_relative_to(package_path, location)', '                )', '            else:', '                # Pick the first path.', '                search_locations = iter(root_spec.submodule_search_locations)', '            return os.path.dirname(next(search_locations))', '        # a package (with __init__.py)', '        elif root_spec.submodule_search_locations:', '            return os.path.dirname(os.path.dirname(root_spec.origin))', '        # just a normal module', '        else:', '            return os.path.dirname(root_spec.origin)', '', '    # we were unable to find the `package_path` using PEP 451 loaders', '    loader = pkgutil.get_loader(root_mod_name)', '', '    if loader is None or root_mod_name == \"__main__\":', '        # import name is not found, or interactive/main module', '        return os.getcwd()', '', '    if hasattr(loader, \"get_filename\"):', '        filename = loader.get_filename(root_mod_name)', '    elif hasattr(loader, \"archive\"):', \"        # zipimporter's loader.archive points to the .egg or .zip file.\", '        filename = loader.archive', '    else:', '        # At least one loader is missing both get_filename and archive:', \"        # Google App Engine's HardenedModulesHook, use __file__.\", '        filename = importlib.import_module(root_mod_name).__file__', '', '    package_path = os.path.abspath(os.path.dirname(filename))', '', '    # If the imported name is a package, filename is currently pointing', '    # to the root of the package, need to get the current directory.', '    if _matching_loader_thinks_module_is_package(loader, root_mod_name):', '        package_path = os.path.dirname(package_path)', '', '    return package_path', '', '', 'def find_package(import_name: str):', '    \"\"\"Find the prefix that a package is installed under, and the path', '    that it would be imported from.', '', '    The prefix is the directory containing the standard directory', '    hierarchy (lib, bin, etc.). If the package is not installed to the', '    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),', '    ``None`` is returned.', '', '    The path is the entry in :attr:`sys.path` that contains the package', \"    for import. If the package is not installed, it's assumed that the\", '    package was imported from the current working directory.', '    \"\"\"', '    package_path = _find_package_path(import_name)', '    py_prefix = os.path.abspath(sys.prefix)', '', '    # installed to the system', '    if _path_is_relative_to(pathlib.PurePath(package_path), py_prefix):', '        return py_prefix, package_path', '', '    site_parent, site_folder = os.path.split(package_path)', '', '    # installed to a virtualenv', '    if site_folder.lower() == \"site-packages\":', '        parent, folder = os.path.split(site_parent)', '', '        # Windows (prefix/lib/site-packages)', '        if folder.lower() == \"lib\":', '            return parent, package_path', '', '        # Unix (prefix/lib/pythonX.Y/site-packages)', '        if os.path.basename(parent).lower() == \"lib\":', '            return os.path.dirname(parent), package_path', '', '        # something else (prefix/site-packages)', '        return site_parent, package_path', '', '    # not installed', '    return None, package_path']}, '__main__.py': {'classes': [], 'functions': [], 'text': ['from .cli import main', '', 'main()']}, 'helpers.py': {'classes': [{'name': 'locked_cached_property', 'start_line': 611, 'end_line': 654, 'text': ['class locked_cached_property(werkzeug.utils.cached_property):', '    \"\"\"A :func:`property` that is only evaluated once. Like', '    :class:`werkzeug.utils.cached_property` except access uses a lock', '    for thread safety.', '', '    .. deprecated:: 2.3', '        Will be removed in Flask 2.4. Use a lock inside the decorated function if', '        locking is needed.', '', '    .. versionchanged:: 2.0', \"        Inherits from Werkzeug's ``cached_property`` (and ``property``).\", '    \"\"\"', '', '    def __init__(', '        self,', '        fget: t.Callable[[t.Any], t.Any],', '        name: t.Optional[str] = None,', '        doc: t.Optional[str] = None,', '    ) -> None:', '        import warnings', '', '        warnings.warn(', '            \"\\'locked_cached_property\\' is deprecated and will be removed in Flask 2.4.\"', '            \" Use a lock inside the decorated function if locking is needed.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        super().__init__(fget, name=name, doc=doc)', '        self.lock = RLock()', '', '    def __get__(self, obj: object, type: type = None) -> t.Any:  # type: ignore', '        if obj is None:', '            return self', '', '        with self.lock:', '            return super().__get__(obj, type=type)', '', '    def __set__(self, obj: object, value: t.Any) -> None:', '        with self.lock:', '            super().__set__(obj, value)', '', '    def __delete__(self, obj: object) -> None:', '        with self.lock:', '            super().__delete__(obj)'], 'methods': [{'name': '__init__', 'start_line': 624, 'end_line': 639, 'text': ['    def __init__(', '        self,', '        fget: t.Callable[[t.Any], t.Any],', '        name: t.Optional[str] = None,', '        doc: t.Optional[str] = None,', '    ) -> None:', '        import warnings', '', '        warnings.warn(', '            \"\\'locked_cached_property\\' is deprecated and will be removed in Flask 2.4.\"', '            \" Use a lock inside the decorated function if locking is needed.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        super().__init__(fget, name=name, doc=doc)', '        self.lock = RLock()']}, {'name': '__get__', 'start_line': 641, 'end_line': 646, 'text': ['    def __get__(self, obj: object, type: type = None) -> t.Any:  # type: ignore', '        if obj is None:', '            return self', '', '        with self.lock:', '            return super().__get__(obj, type=type)']}, {'name': '__set__', 'start_line': 648, 'end_line': 650, 'text': ['    def __set__(self, obj: object, value: t.Any) -> None:', '        with self.lock:', '            super().__set__(obj, value)']}, {'name': '__delete__', 'start_line': 652, 'end_line': 654, 'text': ['    def __delete__(self, obj: object) -> None:', '        with self.lock:', '            super().__delete__(obj)']}]}], 'functions': [{'name': 'get_debug_flag', 'start_line': 28, 'end_line': 33, 'text': ['def get_debug_flag() -> bool:', '    \"\"\"Get whether debug mode should be enabled for the app, indicated by the', '    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.', '    \"\"\"', '    val = os.environ.get(\"FLASK_DEBUG\")', '    return bool(val and val.lower() not in {\"0\", \"false\", \"no\"})']}, {'name': 'get_load_dotenv', 'start_line': 36, 'end_line': 48, 'text': ['def get_load_dotenv(default: bool = True) -> bool:', '    \"\"\"Get whether the user has disabled loading default dotenv files by', '    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load', '    the files.', '', \"    :param default: What to return if the env var isn't set.\", '    \"\"\"', '    val = os.environ.get(\"FLASK_SKIP_DOTENV\")', '', '    if not val:', '        return default', '', '    return val.lower() in (\"0\", \"false\", \"no\")']}, {'name': 'stream_with_context', 'start_line': 51, 'end_line': 127, 'text': ['def stream_with_context(', '    generator_or_function: t.Union[', '        t.Iterator[t.AnyStr], t.Callable[..., t.Iterator[t.AnyStr]]', '    ]', ') -> t.Iterator[t.AnyStr]:', '    \"\"\"Request contexts disappear when the response is started on the server.', '    This is done for efficiency reasons and to make it less likely to encounter', '    memory leaks with badly written WSGI middlewares.  The downside is that if', '    you are using streamed responses, the generator cannot access request bound', '    information any more.', '', '    This function however can help you keep the context around for longer::', '', '        from flask import stream_with_context, request, Response', '', \"        @app.route('/stream')\", '        def streamed_response():', '            @stream_with_context', '            def generate():', \"                yield 'Hello '\", \"                yield request.args['name']\", \"                yield '!'\", '            return Response(generate())', '', '    Alternatively it can also be used around a specific generator::', '', '        from flask import stream_with_context, request, Response', '', \"        @app.route('/stream')\", '        def streamed_response():', '            def generate():', \"                yield 'Hello '\", \"                yield request.args['name']\", \"                yield '!'\", '            return Response(stream_with_context(generate()))', '', '    .. versionadded:: 0.9', '    \"\"\"', '    try:', '        gen = iter(generator_or_function)  # type: ignore', '    except TypeError:', '', '        def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:', '            gen = generator_or_function(*args, **kwargs)  # type: ignore', '            return stream_with_context(gen)', '', '        return update_wrapper(decorator, generator_or_function)  # type: ignore', '', '    def generator() -> t.Generator:', '        ctx = _cv_request.get(None)', '        if ctx is None:', '            raise RuntimeError(', '                \"\\'stream_with_context\\' can only be used when a request\"', '                \" context is active, such as in a view function.\"', '            )', '        with ctx:', \"            # Dummy sentinel.  Has to be inside the context block or we're\", '            # not actually keeping the context around.', '            yield None', '', '            # The try/finally is here so that if someone passes a WSGI level', \"            # iterator in we're still running the cleanup logic.  Generators\", \"            # don't need that because they are closed on their destruction\", '            # automatically.', '            try:', '                yield from gen', '            finally:', '                if hasattr(gen, \"close\"):', '                    gen.close()', '', '    # The trick is to start the generator.  Then the code execution runs until', '    # the first dummy None is yielded at which point the context was already', '    # pushed.  This item is discarded.  Then when the iteration continues the', '    # real generator is executed.', '    wrapped_g = generator()', '    next(wrapped_g)', '    return wrapped_g']}, {'name': 'make_response', 'start_line': 130, 'end_line': 176, 'text': ['def make_response(*args: t.Any) -> \"Response\":', '    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because', '    views do not have to return response objects but can return a value that', '    is converted into a response object by Flask itself, it becomes tricky to', '    add headers to it.  This function can be called instead of using a return', '    and you will get a response object which you can use to attach headers.', '', '    If view looked like this and you want to add a new header::', '', '        def index():', \"            return render_template('index.html', foo=42)\", '', '    You can now do something like this::', '', '        def index():', \"            response = make_response(render_template('index.html', foo=42))\", \"            response.headers['X-Parachutes'] = 'parachutes are cool'\", '            return response', '', '    This function accepts the very same arguments you can return from a', '    view function.  This for example creates a response with a 404 error', '    code::', '', \"        response = make_response(render_template('not_found.html'), 404)\", '', '    The other use case of this function is to force the return value of a', '    view function into a response which is helpful with view', '    decorators::', '', '        response = make_response(view_function())', \"        response.headers['X-Parachutes'] = 'parachutes are cool'\", '', '    Internally this function does the following things:', '', '    -   if no arguments are passed, it creates a new response argument', '    -   if one argument is passed, :meth:`flask.Flask.make_response`', '        is invoked with it.', '    -   if more than one argument is passed, the arguments are passed', '        to the :meth:`flask.Flask.make_response` function as tuple.', '', '    .. versionadded:: 0.6', '    \"\"\"', '    if not args:', '        return current_app.response_class()', '    if len(args) == 1:', '        args = args[0]', '    return current_app.make_response(args)  # type: ignore']}, {'name': 'url_for', 'start_line': 179, 'end_line': 230, 'text': ['def url_for(', '    endpoint: str,', '    *,', '    _anchor: t.Optional[str] = None,', '    _method: t.Optional[str] = None,', '    _scheme: t.Optional[str] = None,', '    _external: t.Optional[bool] = None,', '    **values: t.Any,', ') -> str:', '    \"\"\"Generate a URL to the given endpoint with the given values.', '', '    This requires an active request or application context, and calls', '    :meth:`current_app.url_for() <flask.Flask.url_for>`. See that method', '    for full documentation.', '', '    :param endpoint: The endpoint name associated with the URL to', '        generate. If this starts with a ``.``, the current blueprint', '        name (if any) will be used.', '    :param _anchor: If given, append this as ``#anchor`` to the URL.', '    :param _method: If given, generate the URL associated with this', '        method for the endpoint.', '    :param _scheme: If given, the URL will have this scheme if it is', '        external.', '    :param _external: If given, prefer the URL to be internal (False) or', '        require it to be external (True). External URLs include the', '        scheme and domain. When not in an active request, URLs are', '        external by default.', '    :param values: Values to use for the variable parts of the URL rule.', '        Unknown keys are appended as query string arguments, like', '        ``?a=b&c=d``.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.url_for``, allowing an app to override the', '        behavior.', '', '    .. versionchanged:: 0.10', '       The ``_scheme`` parameter was added.', '', '    .. versionchanged:: 0.9', '       The ``_anchor`` and ``_method`` parameters were added.', '', '    .. versionchanged:: 0.9', '       Calls ``app.handle_url_build_error`` on build errors.', '    \"\"\"', '    return current_app.url_for(', '        endpoint,', '        _anchor=_anchor,', '        _method=_method,', '        _scheme=_scheme,', '        _external=_external,', '        **values,', '    )']}, {'name': 'redirect', 'start_line': 233, 'end_line': 254, 'text': ['def redirect(', '    location: str, code: int = 302, Response: t.Optional[t.Type[\"BaseResponse\"]] = None', ') -> \"BaseResponse\":', '    \"\"\"Create a redirect response object.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`~flask.Flask.redirect` method, otherwise it will use', '    :func:`werkzeug.utils.redirect`.', '', '    :param location: The URL to redirect to.', '    :param code: The status code for the redirect.', '    :param Response: The response class to use. Not used when', '        ``current_app`` is active, which uses ``app.response_class``.', '', '    .. versionadded:: 2.2', '        Calls ``current_app.redirect`` if available instead of always', \"        using Werkzeug's default ``redirect``.\", '    \"\"\"', '    if current_app:', '        return current_app.redirect(location, code=code)', '', '    return _wz_redirect(location, code=code, Response=Response)']}, {'name': 'abort', 'start_line': 257, 'end_line': 279, 'text': ['def abort(', '    code: t.Union[int, \"BaseResponse\"], *args: t.Any, **kwargs: t.Any', ') -> \"te.NoReturn\":', '    \"\"\"Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given', '    status code.', '', '    If :data:`~flask.current_app` is available, it will call its', '    :attr:`~flask.Flask.aborter` object, otherwise it will use', '    :func:`werkzeug.exceptions.abort`.', '', '    :param code: The status code for the exception, which must be', '        registered in ``app.aborter``.', '    :param args: Passed to the exception.', '    :param kwargs: Passed to the exception.', '', '    .. versionadded:: 2.2', '        Calls ``current_app.aborter`` if available instead of always', \"        using Werkzeug's default ``abort``.\", '    \"\"\"', '    if current_app:', '        current_app.aborter(code, *args, **kwargs)', '', '    _wz_abort(code, *args, **kwargs)']}, {'name': 'get_template_attribute', 'start_line': 282, 'end_line': 301, 'text': ['def get_template_attribute(template_name: str, attribute: str) -> t.Any:', '    \"\"\"Loads a macro (or variable) a template exports.  This can be used to', '    invoke a macro from within Python code.  If you for example have a', '    template named :file:`_cider.html` with the following contents:', '', '    .. sourcecode:: html+jinja', '', '       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}', '', '    You can access this from Python code like this::', '', \"        hello = get_template_attribute('_cider.html', 'hello')\", \"        return hello('World')\", '', '    .. versionadded:: 0.2', '', '    :param template_name: the name of the template', '    :param attribute: the name of the variable of macro to access', '    \"\"\"', '    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)']}, {'name': 'flash', 'start_line': 304, 'end_line': 333, 'text': ['def flash(message: str, category: str = \"message\") -> None:', '    \"\"\"Flashes a message to the next request.  In order to remove the', '    flashed message from the session and to display it to the user,', '    the template has to call :func:`get_flashed_messages`.', '', '    .. versionchanged:: 0.3', '       `category` parameter added.', '', '    :param message: the message to be flashed.', '    :param category: the category for the message.  The following values', \"                     are recommended: ``'message'`` for any kind of message,\", \"                     ``'error'`` for errors, ``'info'`` for information\", \"                     messages and ``'warning'`` for warnings.  However any\", '                     kind of string can be used as category.', '    \"\"\"', '    # Original implementation:', '    #', \"    #     session.setdefault('_flashes', []).append((category, message))\", '    #', '    # This assumed that changes made to mutable structures in the session are', '    # always in sync with the session object, which is not true for session', '    # implementations that use external storage for keeping their keys/values.', '    flashes = session.get(\"_flashes\", [])', '    flashes.append((category, message))', '    session[\"_flashes\"] = flashes', '    message_flashed.send(', '        current_app._get_current_object(),  # type: ignore', '        message=message,', '        category=category,', '    )']}, {'name': 'get_flashed_messages', 'start_line': 336, 'end_line': 375, 'text': ['def get_flashed_messages(', '    with_categories: bool = False, category_filter: t.Iterable[str] = ()', ') -> t.Union[t.List[str], t.List[t.Tuple[str, str]]]:', '    \"\"\"Pulls all flashed messages from the session and returns them.', '    Further calls in the same request to the function will return', '    the same messages.  By default just the messages are returned,', '    but when `with_categories` is set to ``True``, the return value will', '    be a list of tuples in the form ``(category, message)`` instead.', '', '    Filter the flashed messages to one or more categories by providing those', '    categories in `category_filter`.  This allows rendering categories in', '    separate html blocks.  The `with_categories` and `category_filter`', '    arguments are distinct:', '', '    * `with_categories` controls whether categories are returned with message', '      text (``True`` gives a tuple, where ``False`` gives just the message text).', '    * `category_filter` filters the messages down to only those matching the', '      provided categories.', '', '    See :doc:`/patterns/flashing` for examples.', '', '    .. versionchanged:: 0.3', '       `with_categories` parameter added.', '', '    .. versionchanged:: 0.9', '        `category_filter` parameter added.', '', '    :param with_categories: set to ``True`` to also receive categories.', '    :param category_filter: filter of categories to limit return values.  Only', '                            categories in the list will be returned.', '    \"\"\"', '    flashes = request_ctx.flashes', '    if flashes is None:', '        flashes = session.pop(\"_flashes\") if \"_flashes\" in session else []', '        request_ctx.flashes = flashes', '    if category_filter:', '        flashes = list(filter(lambda f: f[0] in category_filter, flashes))', '    if not with_categories:', '        return [x[1] for x in flashes]', '    return flashes']}, {'name': '_prepare_send_file_kwargs', 'start_line': 378, 'end_line': 388, 'text': ['def _prepare_send_file_kwargs(**kwargs: t.Any) -> t.Dict[str, t.Any]:', '    if kwargs.get(\"max_age\") is None:', '        kwargs[\"max_age\"] = current_app.get_send_file_max_age', '', '    kwargs.update(', '        environ=request.environ,', '        use_x_sendfile=current_app.config[\"USE_X_SENDFILE\"],', '        response_class=current_app.response_class,', '        _root_path=current_app.root_path,  # type: ignore', '    )', '    return kwargs']}, {'name': 'send_file', 'start_line': 391, 'end_line': 516, 'text': ['def send_file(', '    path_or_file: t.Union[os.PathLike, str, t.BinaryIO],', '    mimetype: t.Optional[str] = None,', '    as_attachment: bool = False,', '    download_name: t.Optional[str] = None,', '    conditional: bool = True,', '    etag: t.Union[bool, str] = True,', '    last_modified: t.Optional[t.Union[datetime, int, float]] = None,', '    max_age: t.Optional[', '        t.Union[int, t.Callable[[t.Optional[str]], t.Optional[int]]]', '    ] = None,', ') -> \"Response\":', '    \"\"\"Send the contents of a file to the client.', '', '    The first argument can be a file path or a file-like object. Paths', '    are preferred in most cases because Werkzeug can manage the file and', '    get extra information from the path. Passing a file-like object', '    requires that the file is opened in binary mode, and is mostly', '    useful when building a file in memory with :class:`io.BytesIO`.', '', '    Never pass file paths provided by a user. The path is assumed to be', \"    trusted, so a user could craft a path to access a file you didn't\", '    intend. Use :func:`send_from_directory` to safely serve', '    user-requested paths from within a directory.', '', '    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is', \"    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,\", '    if the HTTP server supports ``X-Sendfile``, configuring Flask with', '    ``USE_X_SENDFILE = True`` will tell the server to send the given', '    path, which is much more efficient than reading it in Python.', '', '    :param path_or_file: The path to the file to send, relative to the', '        current working directory if a relative path is given.', '        Alternatively, a file-like object opened in binary mode. Make', '        sure the file pointer is seeked to the start of the data.', '    :param mimetype: The MIME type to send for the file. If not', '        provided, it will try to detect it from the file name.', '    :param as_attachment: Indicate to a browser that it should offer to', '        save the file instead of displaying it.', '    :param download_name: The default name browsers will use when saving', '        the file. Defaults to the passed file name.', '    :param conditional: Enable conditional and range responses based on', '        request headers. Requires passing a file path and ``environ``.', '    :param etag: Calculate an ETag for the file, which requires passing', '        a file path. Can also be a string to use instead.', '    :param last_modified: The last modified time to send for the file,', '        in seconds. If not provided, it will try to detect it from the', '        file path.', '    :param max_age: How long the client should cache the file, in', '        seconds. If set, ``Cache-Control`` will be ``public``, otherwise', '        it will be ``no-cache`` to prefer conditional caching.', '', '    .. versionchanged:: 2.0', '        ``download_name`` replaces the ``attachment_filename``', '        parameter. If ``as_attachment=False``, it is passed with', '        ``Content-Disposition: inline`` instead.', '', '    .. versionchanged:: 2.0', '        ``max_age`` replaces the ``cache_timeout`` parameter.', '        ``conditional`` is enabled and ``max_age`` is not set by', '        default.', '', '    .. versionchanged:: 2.0', '        ``etag`` replaces the ``add_etags`` parameter. It can be a', '        string to use instead of generating one.', '', '    .. versionchanged:: 2.0', '        Passing a file-like object that inherits from', '        :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather', '        than sending an empty file.', '', '    .. versionadded:: 2.0', '        Moved the implementation to Werkzeug. This is now a wrapper to', '        pass some Flask-specific arguments.', '', '    .. versionchanged:: 1.1', '        ``filename`` may be a :class:`~os.PathLike` object.', '', '    .. versionchanged:: 1.1', '        Passing a :class:`~io.BytesIO` object supports range requests.', '', '    .. versionchanged:: 1.0.3', '        Filenames are encoded with ASCII instead of Latin-1 for broader', '        compatibility with WSGI servers.', '', '    .. versionchanged:: 1.0', '        UTF-8 filenames as specified in :rfc:`2231` are supported.', '', '    .. versionchanged:: 0.12', '        The filename is no longer automatically inferred from file', '        objects. If you want to use automatic MIME and etag support,', '        pass a filename via ``filename_or_fp`` or', '        ``attachment_filename``.', '', '    .. versionchanged:: 0.12', '        ``attachment_filename`` is preferred over ``filename`` for MIME', '        detection.', '', '    .. versionchanged:: 0.9', '        ``cache_timeout`` defaults to', '        :meth:`Flask.get_send_file_max_age`.', '', '    .. versionchanged:: 0.7', '        MIME guessing and etag support for file-like objects was', '        deprecated because it was unreliable. Pass a filename if you are', '        able to, otherwise attach an etag yourself.', '', '    .. versionchanged:: 0.5', '        The ``add_etags``, ``cache_timeout`` and ``conditional``', '        parameters were added. The default behavior is to add etags.', '', '    .. versionadded:: 0.2', '    \"\"\"', '    return werkzeug.utils.send_file(  # type: ignore[return-value]', '        **_prepare_send_file_kwargs(', '            path_or_file=path_or_file,', '            environ=request.environ,', '            mimetype=mimetype,', '            as_attachment=as_attachment,', '            download_name=download_name,', '            conditional=conditional,', '            etag=etag,', '            last_modified=last_modified,', '            max_age=max_age,', '        )', '    )']}, {'name': 'send_from_directory', 'start_line': 519, 'end_line': 559, 'text': ['def send_from_directory(', '    directory: t.Union[os.PathLike, str],', '    path: t.Union[os.PathLike, str],', '    **kwargs: t.Any,', ') -> \"Response\":', '    \"\"\"Send a file from within a directory using :func:`send_file`.', '', '    .. code-block:: python', '', '        @app.route(\"/uploads/<path:name>\")', '        def download_file(name):', '            return send_from_directory(', \"                app.config['UPLOAD_FOLDER'], name, as_attachment=True\", '            )', '', '    This is a secure way to serve files from a folder, such as static', '    files or uploads. Uses :func:`~werkzeug.security.safe_join` to', '    ensure the path coming from the client is not maliciously crafted to', '    point outside the specified directory.', '', '    If the final path does not point to an existing regular file,', '    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.', '', '    :param directory: The directory that ``path`` must be located under,', \"        relative to the current application's root path.\", '    :param path: The path to the file to send, relative to', '        ``directory``.', '    :param kwargs: Arguments to pass to :func:`send_file`.', '', '    .. versionchanged:: 2.0', '        ``path`` replaces the ``filename`` parameter.', '', '    .. versionadded:: 2.0', '        Moved the implementation to Werkzeug. This is now a wrapper to', '        pass some Flask-specific arguments.', '', '    .. versionadded:: 0.5', '    \"\"\"', '    return werkzeug.utils.send_from_directory(  # type: ignore[return-value]', '        directory, path, **_prepare_send_file_kwargs(**kwargs)', '    )']}, {'name': 'get_root_path', 'start_line': 562, 'end_line': 608, 'text': ['def get_root_path(import_name: str) -> str:', '    \"\"\"Find the root path of a package, or the path that contains a', '    module. If it cannot be found, returns the current working', '    directory.', '', '    Not to be confused with the value returned by :func:`find_package`.', '', '    :meta private:', '    \"\"\"', '    # Module already imported and has a file attribute. Use that first.', '    mod = sys.modules.get(import_name)', '', '    if mod is not None and hasattr(mod, \"__file__\") and mod.__file__ is not None:', '        return os.path.dirname(os.path.abspath(mod.__file__))', '', '    # Next attempt: check the loader.', '    loader = pkgutil.get_loader(import_name)', '', \"    # Loader does not exist or we're referring to an unloaded main\", '    # module or a main module without path (interactive sessions), go', '    # with the current working directory.', '    if loader is None or import_name == \"__main__\":', '        return os.getcwd()', '', '    if hasattr(loader, \"get_filename\"):', '        filepath = loader.get_filename(import_name)', '    else:', '        # Fall back to imports.', '        __import__(import_name)', '        mod = sys.modules[import_name]', '        filepath = getattr(mod, \"__file__\", None)', '', \"        # If we don't have a file path it might be because it is a\", '        # namespace package. In this case pick the root path from the', '        # first module that is contained in the package.', '        if filepath is None:', '            raise RuntimeError(', '                \"No root path can be found for the provided module\"', '                f\" {import_name!r}. This can happen because the module\"', '                \" came from an import hook that does not provide file\"', '                \" name information or because it\\'s a namespace package.\"', '                \" In this case the root path needs to be explicitly\"', '                \" provided.\"', '            )', '', '    # filepath is import_name.py for a module, or __init__.py for a package.', '    return os.path.dirname(os.path.abspath(filepath))']}, {'name': 'is_ip', 'start_line': 657, 'end_line': 674, 'text': ['def is_ip(value: str) -> bool:', '    \"\"\"Determine if the given string is an IP address.', '', '    :param value: value to check', '    :type value: str', '', '    :return: True if string is an IP address', '    :rtype: bool', '    \"\"\"', '    for family in (socket.AF_INET, socket.AF_INET6):', '        try:', '            socket.inet_pton(family, value)', '        except OSError:', '            pass', '        else:', '            return True', '', '    return False']}, {'name': '_split_blueprint_path', 'start_line': 678, 'end_line': 684, 'text': ['def _split_blueprint_path(name: str) -> t.List[str]:', '    out: t.List[str] = [name]', '', '    if \".\" in name:', '        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))', '', '    return out']}, {'name': 'generator', 'start_line': 99, 'end_line': 119, 'text': ['    def generator() -> t.Generator:', '        ctx = _cv_request.get(None)', '        if ctx is None:', '            raise RuntimeError(', '                \"\\'stream_with_context\\' can only be used when a request\"', '                \" context is active, such as in a view function.\"', '            )', '        with ctx:', \"            # Dummy sentinel.  Has to be inside the context block or we're\", '            # not actually keeping the context around.', '            yield None', '', '            # The try/finally is here so that if someone passes a WSGI level', \"            # iterator in we're still running the cleanup logic.  Generators\", \"            # don't need that because they are closed on their destruction\", '            # automatically.', '            try:', '                yield from gen', '            finally:', '                if hasattr(gen, \"close\"):', '                    gen.close()']}, {'name': 'decorator', 'start_line': 93, 'end_line': 95, 'text': ['        def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:', '            gen = generator_or_function(*args, **kwargs)  # type: ignore', '            return stream_with_context(gen)']}], 'text': ['import os', 'import pkgutil', 'import socket', 'import sys', 'import typing as t', 'from datetime import datetime', 'from functools import lru_cache', 'from functools import update_wrapper', 'from threading import RLock', '', 'import werkzeug.utils', 'from werkzeug.exceptions import abort as _wz_abort', 'from werkzeug.utils import redirect as _wz_redirect', '', 'from .globals import _cv_request', 'from .globals import current_app', 'from .globals import request', 'from .globals import request_ctx', 'from .globals import session', 'from .signals import message_flashed', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from werkzeug.wrappers import Response as BaseResponse', '    from .wrappers import Response', '    import typing_extensions as te', '', '', 'def get_debug_flag() -> bool:', '    \"\"\"Get whether debug mode should be enabled for the app, indicated by the', '    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.', '    \"\"\"', '    val = os.environ.get(\"FLASK_DEBUG\")', '    return bool(val and val.lower() not in {\"0\", \"false\", \"no\"})', '', '', 'def get_load_dotenv(default: bool = True) -> bool:', '    \"\"\"Get whether the user has disabled loading default dotenv files by', '    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load', '    the files.', '', \"    :param default: What to return if the env var isn't set.\", '    \"\"\"', '    val = os.environ.get(\"FLASK_SKIP_DOTENV\")', '', '    if not val:', '        return default', '', '    return val.lower() in (\"0\", \"false\", \"no\")', '', '', 'def stream_with_context(', '    generator_or_function: t.Union[', '        t.Iterator[t.AnyStr], t.Callable[..., t.Iterator[t.AnyStr]]', '    ]', ') -> t.Iterator[t.AnyStr]:', '    \"\"\"Request contexts disappear when the response is started on the server.', '    This is done for efficiency reasons and to make it less likely to encounter', '    memory leaks with badly written WSGI middlewares.  The downside is that if', '    you are using streamed responses, the generator cannot access request bound', '    information any more.', '', '    This function however can help you keep the context around for longer::', '', '        from flask import stream_with_context, request, Response', '', \"        @app.route('/stream')\", '        def streamed_response():', '            @stream_with_context', '            def generate():', \"                yield 'Hello '\", \"                yield request.args['name']\", \"                yield '!'\", '            return Response(generate())', '', '    Alternatively it can also be used around a specific generator::', '', '        from flask import stream_with_context, request, Response', '', \"        @app.route('/stream')\", '        def streamed_response():', '            def generate():', \"                yield 'Hello '\", \"                yield request.args['name']\", \"                yield '!'\", '            return Response(stream_with_context(generate()))', '', '    .. versionadded:: 0.9', '    \"\"\"', '    try:', '        gen = iter(generator_or_function)  # type: ignore', '    except TypeError:', '', '        def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:', '            gen = generator_or_function(*args, **kwargs)  # type: ignore', '            return stream_with_context(gen)', '', '        return update_wrapper(decorator, generator_or_function)  # type: ignore', '', '    def generator() -> t.Generator:', '        ctx = _cv_request.get(None)', '        if ctx is None:', '            raise RuntimeError(', '                \"\\'stream_with_context\\' can only be used when a request\"', '                \" context is active, such as in a view function.\"', '            )', '        with ctx:', \"            # Dummy sentinel.  Has to be inside the context block or we're\", '            # not actually keeping the context around.', '            yield None', '', '            # The try/finally is here so that if someone passes a WSGI level', \"            # iterator in we're still running the cleanup logic.  Generators\", \"            # don't need that because they are closed on their destruction\", '            # automatically.', '            try:', '                yield from gen', '            finally:', '                if hasattr(gen, \"close\"):', '                    gen.close()', '', '    # The trick is to start the generator.  Then the code execution runs until', '    # the first dummy None is yielded at which point the context was already', '    # pushed.  This item is discarded.  Then when the iteration continues the', '    # real generator is executed.', '    wrapped_g = generator()', '    next(wrapped_g)', '    return wrapped_g', '', '', 'def make_response(*args: t.Any) -> \"Response\":', '    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because', '    views do not have to return response objects but can return a value that', '    is converted into a response object by Flask itself, it becomes tricky to', '    add headers to it.  This function can be called instead of using a return', '    and you will get a response object which you can use to attach headers.', '', '    If view looked like this and you want to add a new header::', '', '        def index():', \"            return render_template('index.html', foo=42)\", '', '    You can now do something like this::', '', '        def index():', \"            response = make_response(render_template('index.html', foo=42))\", \"            response.headers['X-Parachutes'] = 'parachutes are cool'\", '            return response', '', '    This function accepts the very same arguments you can return from a', '    view function.  This for example creates a response with a 404 error', '    code::', '', \"        response = make_response(render_template('not_found.html'), 404)\", '', '    The other use case of this function is to force the return value of a', '    view function into a response which is helpful with view', '    decorators::', '', '        response = make_response(view_function())', \"        response.headers['X-Parachutes'] = 'parachutes are cool'\", '', '    Internally this function does the following things:', '', '    -   if no arguments are passed, it creates a new response argument', '    -   if one argument is passed, :meth:`flask.Flask.make_response`', '        is invoked with it.', '    -   if more than one argument is passed, the arguments are passed', '        to the :meth:`flask.Flask.make_response` function as tuple.', '', '    .. versionadded:: 0.6', '    \"\"\"', '    if not args:', '        return current_app.response_class()', '    if len(args) == 1:', '        args = args[0]', '    return current_app.make_response(args)  # type: ignore', '', '', 'def url_for(', '    endpoint: str,', '    *,', '    _anchor: t.Optional[str] = None,', '    _method: t.Optional[str] = None,', '    _scheme: t.Optional[str] = None,', '    _external: t.Optional[bool] = None,', '    **values: t.Any,', ') -> str:', '    \"\"\"Generate a URL to the given endpoint with the given values.', '', '    This requires an active request or application context, and calls', '    :meth:`current_app.url_for() <flask.Flask.url_for>`. See that method', '    for full documentation.', '', '    :param endpoint: The endpoint name associated with the URL to', '        generate. If this starts with a ``.``, the current blueprint', '        name (if any) will be used.', '    :param _anchor: If given, append this as ``#anchor`` to the URL.', '    :param _method: If given, generate the URL associated with this', '        method for the endpoint.', '    :param _scheme: If given, the URL will have this scheme if it is', '        external.', '    :param _external: If given, prefer the URL to be internal (False) or', '        require it to be external (True). External URLs include the', '        scheme and domain. When not in an active request, URLs are', '        external by default.', '    :param values: Values to use for the variable parts of the URL rule.', '        Unknown keys are appended as query string arguments, like', '        ``?a=b&c=d``.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.url_for``, allowing an app to override the', '        behavior.', '', '    .. versionchanged:: 0.10', '       The ``_scheme`` parameter was added.', '', '    .. versionchanged:: 0.9', '       The ``_anchor`` and ``_method`` parameters were added.', '', '    .. versionchanged:: 0.9', '       Calls ``app.handle_url_build_error`` on build errors.', '    \"\"\"', '    return current_app.url_for(', '        endpoint,', '        _anchor=_anchor,', '        _method=_method,', '        _scheme=_scheme,', '        _external=_external,', '        **values,', '    )', '', '', 'def redirect(', '    location: str, code: int = 302, Response: t.Optional[t.Type[\"BaseResponse\"]] = None', ') -> \"BaseResponse\":', '    \"\"\"Create a redirect response object.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`~flask.Flask.redirect` method, otherwise it will use', '    :func:`werkzeug.utils.redirect`.', '', '    :param location: The URL to redirect to.', '    :param code: The status code for the redirect.', '    :param Response: The response class to use. Not used when', '        ``current_app`` is active, which uses ``app.response_class``.', '', '    .. versionadded:: 2.2', '        Calls ``current_app.redirect`` if available instead of always', \"        using Werkzeug's default ``redirect``.\", '    \"\"\"', '    if current_app:', '        return current_app.redirect(location, code=code)', '', '    return _wz_redirect(location, code=code, Response=Response)', '', '', 'def abort(', '    code: t.Union[int, \"BaseResponse\"], *args: t.Any, **kwargs: t.Any', ') -> \"te.NoReturn\":', '    \"\"\"Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given', '    status code.', '', '    If :data:`~flask.current_app` is available, it will call its', '    :attr:`~flask.Flask.aborter` object, otherwise it will use', '    :func:`werkzeug.exceptions.abort`.', '', '    :param code: The status code for the exception, which must be', '        registered in ``app.aborter``.', '    :param args: Passed to the exception.', '    :param kwargs: Passed to the exception.', '', '    .. versionadded:: 2.2', '        Calls ``current_app.aborter`` if available instead of always', \"        using Werkzeug's default ``abort``.\", '    \"\"\"', '    if current_app:', '        current_app.aborter(code, *args, **kwargs)', '', '    _wz_abort(code, *args, **kwargs)', '', '', 'def get_template_attribute(template_name: str, attribute: str) -> t.Any:', '    \"\"\"Loads a macro (or variable) a template exports.  This can be used to', '    invoke a macro from within Python code.  If you for example have a', '    template named :file:`_cider.html` with the following contents:', '', '    .. sourcecode:: html+jinja', '', '       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}', '', '    You can access this from Python code like this::', '', \"        hello = get_template_attribute('_cider.html', 'hello')\", \"        return hello('World')\", '', '    .. versionadded:: 0.2', '', '    :param template_name: the name of the template', '    :param attribute: the name of the variable of macro to access', '    \"\"\"', '    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)', '', '', 'def flash(message: str, category: str = \"message\") -> None:', '    \"\"\"Flashes a message to the next request.  In order to remove the', '    flashed message from the session and to display it to the user,', '    the template has to call :func:`get_flashed_messages`.', '', '    .. versionchanged:: 0.3', '       `category` parameter added.', '', '    :param message: the message to be flashed.', '    :param category: the category for the message.  The following values', \"                     are recommended: ``'message'`` for any kind of message,\", \"                     ``'error'`` for errors, ``'info'`` for information\", \"                     messages and ``'warning'`` for warnings.  However any\", '                     kind of string can be used as category.', '    \"\"\"', '    # Original implementation:', '    #', \"    #     session.setdefault('_flashes', []).append((category, message))\", '    #', '    # This assumed that changes made to mutable structures in the session are', '    # always in sync with the session object, which is not true for session', '    # implementations that use external storage for keeping their keys/values.', '    flashes = session.get(\"_flashes\", [])', '    flashes.append((category, message))', '    session[\"_flashes\"] = flashes', '    message_flashed.send(', '        current_app._get_current_object(),  # type: ignore', '        message=message,', '        category=category,', '    )', '', '', 'def get_flashed_messages(', '    with_categories: bool = False, category_filter: t.Iterable[str] = ()', ') -> t.Union[t.List[str], t.List[t.Tuple[str, str]]]:', '    \"\"\"Pulls all flashed messages from the session and returns them.', '    Further calls in the same request to the function will return', '    the same messages.  By default just the messages are returned,', '    but when `with_categories` is set to ``True``, the return value will', '    be a list of tuples in the form ``(category, message)`` instead.', '', '    Filter the flashed messages to one or more categories by providing those', '    categories in `category_filter`.  This allows rendering categories in', '    separate html blocks.  The `with_categories` and `category_filter`', '    arguments are distinct:', '', '    * `with_categories` controls whether categories are returned with message', '      text (``True`` gives a tuple, where ``False`` gives just the message text).', '    * `category_filter` filters the messages down to only those matching the', '      provided categories.', '', '    See :doc:`/patterns/flashing` for examples.', '', '    .. versionchanged:: 0.3', '       `with_categories` parameter added.', '', '    .. versionchanged:: 0.9', '        `category_filter` parameter added.', '', '    :param with_categories: set to ``True`` to also receive categories.', '    :param category_filter: filter of categories to limit return values.  Only', '                            categories in the list will be returned.', '    \"\"\"', '    flashes = request_ctx.flashes', '    if flashes is None:', '        flashes = session.pop(\"_flashes\") if \"_flashes\" in session else []', '        request_ctx.flashes = flashes', '    if category_filter:', '        flashes = list(filter(lambda f: f[0] in category_filter, flashes))', '    if not with_categories:', '        return [x[1] for x in flashes]', '    return flashes', '', '', 'def _prepare_send_file_kwargs(**kwargs: t.Any) -> t.Dict[str, t.Any]:', '    if kwargs.get(\"max_age\") is None:', '        kwargs[\"max_age\"] = current_app.get_send_file_max_age', '', '    kwargs.update(', '        environ=request.environ,', '        use_x_sendfile=current_app.config[\"USE_X_SENDFILE\"],', '        response_class=current_app.response_class,', '        _root_path=current_app.root_path,  # type: ignore', '    )', '    return kwargs', '', '', 'def send_file(', '    path_or_file: t.Union[os.PathLike, str, t.BinaryIO],', '    mimetype: t.Optional[str] = None,', '    as_attachment: bool = False,', '    download_name: t.Optional[str] = None,', '    conditional: bool = True,', '    etag: t.Union[bool, str] = True,', '    last_modified: t.Optional[t.Union[datetime, int, float]] = None,', '    max_age: t.Optional[', '        t.Union[int, t.Callable[[t.Optional[str]], t.Optional[int]]]', '    ] = None,', ') -> \"Response\":', '    \"\"\"Send the contents of a file to the client.', '', '    The first argument can be a file path or a file-like object. Paths', '    are preferred in most cases because Werkzeug can manage the file and', '    get extra information from the path. Passing a file-like object', '    requires that the file is opened in binary mode, and is mostly', '    useful when building a file in memory with :class:`io.BytesIO`.', '', '    Never pass file paths provided by a user. The path is assumed to be', \"    trusted, so a user could craft a path to access a file you didn't\", '    intend. Use :func:`send_from_directory` to safely serve', '    user-requested paths from within a directory.', '', '    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is', \"    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,\", '    if the HTTP server supports ``X-Sendfile``, configuring Flask with', '    ``USE_X_SENDFILE = True`` will tell the server to send the given', '    path, which is much more efficient than reading it in Python.', '', '    :param path_or_file: The path to the file to send, relative to the', '        current working directory if a relative path is given.', '        Alternatively, a file-like object opened in binary mode. Make', '        sure the file pointer is seeked to the start of the data.', '    :param mimetype: The MIME type to send for the file. If not', '        provided, it will try to detect it from the file name.', '    :param as_attachment: Indicate to a browser that it should offer to', '        save the file instead of displaying it.', '    :param download_name: The default name browsers will use when saving', '        the file. Defaults to the passed file name.', '    :param conditional: Enable conditional and range responses based on', '        request headers. Requires passing a file path and ``environ``.', '    :param etag: Calculate an ETag for the file, which requires passing', '        a file path. Can also be a string to use instead.', '    :param last_modified: The last modified time to send for the file,', '        in seconds. If not provided, it will try to detect it from the', '        file path.', '    :param max_age: How long the client should cache the file, in', '        seconds. If set, ``Cache-Control`` will be ``public``, otherwise', '        it will be ``no-cache`` to prefer conditional caching.', '', '    .. versionchanged:: 2.0', '        ``download_name`` replaces the ``attachment_filename``', '        parameter. If ``as_attachment=False``, it is passed with', '        ``Content-Disposition: inline`` instead.', '', '    .. versionchanged:: 2.0', '        ``max_age`` replaces the ``cache_timeout`` parameter.', '        ``conditional`` is enabled and ``max_age`` is not set by', '        default.', '', '    .. versionchanged:: 2.0', '        ``etag`` replaces the ``add_etags`` parameter. It can be a', '        string to use instead of generating one.', '', '    .. versionchanged:: 2.0', '        Passing a file-like object that inherits from', '        :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather', '        than sending an empty file.', '', '    .. versionadded:: 2.0', '        Moved the implementation to Werkzeug. This is now a wrapper to', '        pass some Flask-specific arguments.', '', '    .. versionchanged:: 1.1', '        ``filename`` may be a :class:`~os.PathLike` object.', '', '    .. versionchanged:: 1.1', '        Passing a :class:`~io.BytesIO` object supports range requests.', '', '    .. versionchanged:: 1.0.3', '        Filenames are encoded with ASCII instead of Latin-1 for broader', '        compatibility with WSGI servers.', '', '    .. versionchanged:: 1.0', '        UTF-8 filenames as specified in :rfc:`2231` are supported.', '', '    .. versionchanged:: 0.12', '        The filename is no longer automatically inferred from file', '        objects. If you want to use automatic MIME and etag support,', '        pass a filename via ``filename_or_fp`` or', '        ``attachment_filename``.', '', '    .. versionchanged:: 0.12', '        ``attachment_filename`` is preferred over ``filename`` for MIME', '        detection.', '', '    .. versionchanged:: 0.9', '        ``cache_timeout`` defaults to', '        :meth:`Flask.get_send_file_max_age`.', '', '    .. versionchanged:: 0.7', '        MIME guessing and etag support for file-like objects was', '        deprecated because it was unreliable. Pass a filename if you are', '        able to, otherwise attach an etag yourself.', '', '    .. versionchanged:: 0.5', '        The ``add_etags``, ``cache_timeout`` and ``conditional``', '        parameters were added. The default behavior is to add etags.', '', '    .. versionadded:: 0.2', '    \"\"\"', '    return werkzeug.utils.send_file(  # type: ignore[return-value]', '        **_prepare_send_file_kwargs(', '            path_or_file=path_or_file,', '            environ=request.environ,', '            mimetype=mimetype,', '            as_attachment=as_attachment,', '            download_name=download_name,', '            conditional=conditional,', '            etag=etag,', '            last_modified=last_modified,', '            max_age=max_age,', '        )', '    )', '', '', 'def send_from_directory(', '    directory: t.Union[os.PathLike, str],', '    path: t.Union[os.PathLike, str],', '    **kwargs: t.Any,', ') -> \"Response\":', '    \"\"\"Send a file from within a directory using :func:`send_file`.', '', '    .. code-block:: python', '', '        @app.route(\"/uploads/<path:name>\")', '        def download_file(name):', '            return send_from_directory(', \"                app.config['UPLOAD_FOLDER'], name, as_attachment=True\", '            )', '', '    This is a secure way to serve files from a folder, such as static', '    files or uploads. Uses :func:`~werkzeug.security.safe_join` to', '    ensure the path coming from the client is not maliciously crafted to', '    point outside the specified directory.', '', '    If the final path does not point to an existing regular file,', '    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.', '', '    :param directory: The directory that ``path`` must be located under,', \"        relative to the current application's root path.\", '    :param path: The path to the file to send, relative to', '        ``directory``.', '    :param kwargs: Arguments to pass to :func:`send_file`.', '', '    .. versionchanged:: 2.0', '        ``path`` replaces the ``filename`` parameter.', '', '    .. versionadded:: 2.0', '        Moved the implementation to Werkzeug. This is now a wrapper to', '        pass some Flask-specific arguments.', '', '    .. versionadded:: 0.5', '    \"\"\"', '    return werkzeug.utils.send_from_directory(  # type: ignore[return-value]', '        directory, path, **_prepare_send_file_kwargs(**kwargs)', '    )', '', '', 'def get_root_path(import_name: str) -> str:', '    \"\"\"Find the root path of a package, or the path that contains a', '    module. If it cannot be found, returns the current working', '    directory.', '', '    Not to be confused with the value returned by :func:`find_package`.', '', '    :meta private:', '    \"\"\"', '    # Module already imported and has a file attribute. Use that first.', '    mod = sys.modules.get(import_name)', '', '    if mod is not None and hasattr(mod, \"__file__\") and mod.__file__ is not None:', '        return os.path.dirname(os.path.abspath(mod.__file__))', '', '    # Next attempt: check the loader.', '    loader = pkgutil.get_loader(import_name)', '', \"    # Loader does not exist or we're referring to an unloaded main\", '    # module or a main module without path (interactive sessions), go', '    # with the current working directory.', '    if loader is None or import_name == \"__main__\":', '        return os.getcwd()', '', '    if hasattr(loader, \"get_filename\"):', '        filepath = loader.get_filename(import_name)', '    else:', '        # Fall back to imports.', '        __import__(import_name)', '        mod = sys.modules[import_name]', '        filepath = getattr(mod, \"__file__\", None)', '', \"        # If we don't have a file path it might be because it is a\", '        # namespace package. In this case pick the root path from the', '        # first module that is contained in the package.', '        if filepath is None:', '            raise RuntimeError(', '                \"No root path can be found for the provided module\"', '                f\" {import_name!r}. This can happen because the module\"', '                \" came from an import hook that does not provide file\"', '                \" name information or because it\\'s a namespace package.\"', '                \" In this case the root path needs to be explicitly\"', '                \" provided.\"', '            )', '', '    # filepath is import_name.py for a module, or __init__.py for a package.', '    return os.path.dirname(os.path.abspath(filepath))', '', '', 'class locked_cached_property(werkzeug.utils.cached_property):', '    \"\"\"A :func:`property` that is only evaluated once. Like', '    :class:`werkzeug.utils.cached_property` except access uses a lock', '    for thread safety.', '', '    .. deprecated:: 2.3', '        Will be removed in Flask 2.4. Use a lock inside the decorated function if', '        locking is needed.', '', '    .. versionchanged:: 2.0', \"        Inherits from Werkzeug's ``cached_property`` (and ``property``).\", '    \"\"\"', '', '    def __init__(', '        self,', '        fget: t.Callable[[t.Any], t.Any],', '        name: t.Optional[str] = None,', '        doc: t.Optional[str] = None,', '    ) -> None:', '        import warnings', '', '        warnings.warn(', '            \"\\'locked_cached_property\\' is deprecated and will be removed in Flask 2.4.\"', '            \" Use a lock inside the decorated function if locking is needed.\",', '            DeprecationWarning,', '            stacklevel=2,', '        )', '        super().__init__(fget, name=name, doc=doc)', '        self.lock = RLock()', '', '    def __get__(self, obj: object, type: type = None) -> t.Any:  # type: ignore', '        if obj is None:', '            return self', '', '        with self.lock:', '            return super().__get__(obj, type=type)', '', '    def __set__(self, obj: object, value: t.Any) -> None:', '        with self.lock:', '            super().__set__(obj, value)', '', '    def __delete__(self, obj: object) -> None:', '        with self.lock:', '            super().__delete__(obj)', '', '', 'def is_ip(value: str) -> bool:', '    \"\"\"Determine if the given string is an IP address.', '', '    :param value: value to check', '    :type value: str', '', '    :return: True if string is an IP address', '    :rtype: bool', '    \"\"\"', '    for family in (socket.AF_INET, socket.AF_INET6):', '        try:', '            socket.inet_pton(family, value)', '        except OSError:', '            pass', '        else:', '            return True', '', '    return False', '', '', '@lru_cache(maxsize=None)', 'def _split_blueprint_path(name: str) -> t.List[str]:', '    out: t.List[str] = [name]', '', '    if \".\" in name:', '        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))', '', '    return out']}, 'debughelpers.py': {'classes': [{'name': 'UnexpectedUnicodeError', 'start_line': 8, 'end_line': 11, 'text': ['class UnexpectedUnicodeError(AssertionError, UnicodeError):', '    \"\"\"Raised in places where we want some better error reporting for', '    unexpected unicode or binary data.', '    \"\"\"'], 'methods': []}, {'name': 'DebugFilesKeyError', 'start_line': 14, 'end_line': 38, 'text': ['class DebugFilesKeyError(KeyError, AssertionError):', '    \"\"\"Raised from request.files during debugging.  The idea is that it can', '    provide a better error message than just a generic KeyError/BadRequest.', '    \"\"\"', '', '    def __init__(self, request, key):', '        form_matches = request.form.getlist(key)', '        buf = [', '            f\"You tried to access the file {key!r} in the request.files\"', '            \" dictionary but it does not exist. The mimetype for the\"', '            f\" request is {request.mimetype!r} instead of\"', '            \" \\'multipart/form-data\\' which means that no file contents\"', '            \" were transmitted. To fix this error you should provide\"', '            \\' enctype=\"multipart/form-data\" in your form.\\'', '        ]', '        if form_matches:', '            names = \", \".join(repr(x) for x in form_matches)', '            buf.append(', '                \"\\\\n\\\\nThe browser instead transmitted some file names. \"', '                f\"This was submitted: {names}\"', '            )', '        self.msg = \"\".join(buf)', '', '    def __str__(self):', '        return self.msg'], 'methods': [{'name': '__init__', 'start_line': 19, 'end_line': 35, 'text': ['    def __init__(self, request, key):', '        form_matches = request.form.getlist(key)', '        buf = [', '            f\"You tried to access the file {key!r} in the request.files\"', '            \" dictionary but it does not exist. The mimetype for the\"', '            f\" request is {request.mimetype!r} instead of\"', '            \" \\'multipart/form-data\\' which means that no file contents\"', '            \" were transmitted. To fix this error you should provide\"', '            \\' enctype=\"multipart/form-data\" in your form.\\'', '        ]', '        if form_matches:', '            names = \", \".join(repr(x) for x in form_matches)', '            buf.append(', '                \"\\\\n\\\\nThe browser instead transmitted some file names. \"', '                f\"This was submitted: {names}\"', '            )', '        self.msg = \"\".join(buf)']}, {'name': '__str__', 'start_line': 37, 'end_line': 38, 'text': ['    def __str__(self):', '        return self.msg']}]}, {'name': 'FormDataRoutingRedirect', 'start_line': 41, 'end_line': 68, 'text': ['class FormDataRoutingRedirect(AssertionError):', '    \"\"\"This exception is raised in debug mode if a routing redirect', '    would cause the browser to drop the method or body. This happens', '    when method is not GET, HEAD or OPTIONS and the status code is not', '    307 or 308.', '    \"\"\"', '', '    def __init__(self, request):', '        exc = request.routing_exception', '        buf = [', '            f\"A request was sent to \\'{request.url}\\', but routing issued\"', '            f\" a redirect to the canonical URL \\'{exc.new_url}\\'.\"', '        ]', '', '        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:', '            buf.append(', '                \" The URL was defined with a trailing slash. Flask\"', '                \" will redirect to the URL with a trailing slash if it\"', '                \" was accessed without one.\"', '            )', '', '        buf.append(', '            \" Send requests to the canonical URL, or use 307 or 308 for\"', '            \" routing redirects. Otherwise, browsers will drop form\"', '            \" data.\\\\n\\\\n\"', '            \"This exception is only raised in debug mode.\"', '        )', '        super().__init__(\"\".join(buf))'], 'methods': [{'name': '__init__', 'start_line': 48, 'end_line': 68, 'text': ['    def __init__(self, request):', '        exc = request.routing_exception', '        buf = [', '            f\"A request was sent to \\'{request.url}\\', but routing issued\"', '            f\" a redirect to the canonical URL \\'{exc.new_url}\\'.\"', '        ]', '', '        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:', '            buf.append(', '                \" The URL was defined with a trailing slash. Flask\"', '                \" will redirect to the URL with a trailing slash if it\"', '                \" was accessed without one.\"', '            )', '', '        buf.append(', '            \" Send requests to the canonical URL, or use 307 or 308 for\"', '            \" routing redirects. Otherwise, browsers will drop form\"', '            \" data.\\\\n\\\\n\"', '            \"This exception is only raised in debug mode.\"', '        )', '        super().__init__(\"\".join(buf))']}]}, {'name': 'newcls', 'start_line': 80, 'end_line': 90, 'text': ['    class newcls(oldcls):', '        def __getitem__(self, key):', '            try:', '                return super().__getitem__(key)', '            except KeyError as e:', '                if key not in request.form:', '                    raise', '', '                raise DebugFilesKeyError(request, key).with_traceback(', '                    e.__traceback__', '                ) from None'], 'methods': [{'name': '__getitem__', 'start_line': 81, 'end_line': 90, 'text': ['        def __getitem__(self, key):', '            try:', '                return super().__getitem__(key)', '            except KeyError as e:', '                if key not in request.form:', '                    raise', '', '                raise DebugFilesKeyError(request, key).with_traceback(', '                    e.__traceback__', '                ) from None']}]}], 'functions': [{'name': 'attach_enctype_error_multidict', 'start_line': 71, 'end_line': 94, 'text': ['def attach_enctype_error_multidict(request):', '    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error', '    about ``enctype=multipart/form-data``.', '', '    :param request: The request to patch.', '    :meta private:', '    \"\"\"', '    oldcls = request.files.__class__', '', '    class newcls(oldcls):', '        def __getitem__(self, key):', '            try:', '                return super().__getitem__(key)', '            except KeyError as e:', '                if key not in request.form:', '                    raise', '', '                raise DebugFilesKeyError(request, key).with_traceback(', '                    e.__traceback__', '                ) from None', '', '    newcls.__name__ = oldcls.__name__', '    newcls.__module__ = oldcls.__module__', '    request.files.__class__ = newcls']}, {'name': '_dump_loader_info', 'start_line': 97, 'end_line': 111, 'text': ['def _dump_loader_info(loader) -> t.Generator:', '    yield f\"class: {type(loader).__module__}.{type(loader).__name__}\"', '    for key, value in sorted(loader.__dict__.items()):', '        if key.startswith(\"_\"):', '            continue', '        if isinstance(value, (tuple, list)):', '            if not all(isinstance(x, str) for x in value):', '                continue', '            yield f\"{key}:\"', '            for item in value:', '                yield f\"  - {item}\"', '            continue', '        elif not isinstance(value, (str, int, float, bool)):', '            continue', '        yield f\"{key}: {value!r}\"']}, {'name': 'explain_template_loading_attempts', 'start_line': 114, 'end_line': 158, 'text': ['def explain_template_loading_attempts(app: Flask, template, attempts) -> None:', '    \"\"\"This should help developers understand what failed\"\"\"', '    info = [f\"Locating template {template!r}:\"]', '    total_found = 0', '    blueprint = None', '    if request_ctx and request_ctx.request.blueprint is not None:', '        blueprint = request_ctx.request.blueprint', '', '    for idx, (loader, srcobj, triple) in enumerate(attempts):', '        if isinstance(srcobj, Flask):', '            src_info = f\"application {srcobj.import_name!r}\"', '        elif isinstance(srcobj, Blueprint):', '            src_info = f\"blueprint {srcobj.name!r} ({srcobj.import_name})\"', '        else:', '            src_info = repr(srcobj)', '', '        info.append(f\"{idx + 1:5}: trying loader of {src_info}\")', '', '        for line in _dump_loader_info(loader):', '            info.append(f\"       {line}\")', '', '        if triple is None:', '            detail = \"no match\"', '        else:', '            detail = f\"found ({triple[1] or \\'<string>\\'!r})\"', '            total_found += 1', '        info.append(f\"       -> {detail}\")', '', '    seems_fishy = False', '    if total_found == 0:', '        info.append(\"Error: the template could not be found.\")', '        seems_fishy = True', '    elif total_found > 1:', '        info.append(\"Warning: multiple loaders returned a match for the template.\")', '        seems_fishy = True', '', '    if blueprint is not None and seems_fishy:', '        info.append(', '            \"  The template was looked up from an endpoint that belongs\"', '            f\" to the blueprint {blueprint!r}.\"', '        )', '        info.append(\"  Maybe you did not place a template in the right folder?\")', '        info.append(\"  See https://flask.palletsprojects.com/blueprints/#templates\")', '', '    app.logger.info(\"\\\\n\".join(info))']}], 'text': ['import typing as t', '', 'from .app import Flask', 'from .blueprints import Blueprint', 'from .globals import request_ctx', '', '', 'class UnexpectedUnicodeError(AssertionError, UnicodeError):', '    \"\"\"Raised in places where we want some better error reporting for', '    unexpected unicode or binary data.', '    \"\"\"', '', '', 'class DebugFilesKeyError(KeyError, AssertionError):', '    \"\"\"Raised from request.files during debugging.  The idea is that it can', '    provide a better error message than just a generic KeyError/BadRequest.', '    \"\"\"', '', '    def __init__(self, request, key):', '        form_matches = request.form.getlist(key)', '        buf = [', '            f\"You tried to access the file {key!r} in the request.files\"', '            \" dictionary but it does not exist. The mimetype for the\"', '            f\" request is {request.mimetype!r} instead of\"', '            \" \\'multipart/form-data\\' which means that no file contents\"', '            \" were transmitted. To fix this error you should provide\"', '            \\' enctype=\"multipart/form-data\" in your form.\\'', '        ]', '        if form_matches:', '            names = \", \".join(repr(x) for x in form_matches)', '            buf.append(', '                \"\\\\n\\\\nThe browser instead transmitted some file names. \"', '                f\"This was submitted: {names}\"', '            )', '        self.msg = \"\".join(buf)', '', '    def __str__(self):', '        return self.msg', '', '', 'class FormDataRoutingRedirect(AssertionError):', '    \"\"\"This exception is raised in debug mode if a routing redirect', '    would cause the browser to drop the method or body. This happens', '    when method is not GET, HEAD or OPTIONS and the status code is not', '    307 or 308.', '    \"\"\"', '', '    def __init__(self, request):', '        exc = request.routing_exception', '        buf = [', '            f\"A request was sent to \\'{request.url}\\', but routing issued\"', '            f\" a redirect to the canonical URL \\'{exc.new_url}\\'.\"', '        ]', '', '        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:', '            buf.append(', '                \" The URL was defined with a trailing slash. Flask\"', '                \" will redirect to the URL with a trailing slash if it\"', '                \" was accessed without one.\"', '            )', '', '        buf.append(', '            \" Send requests to the canonical URL, or use 307 or 308 for\"', '            \" routing redirects. Otherwise, browsers will drop form\"', '            \" data.\\\\n\\\\n\"', '            \"This exception is only raised in debug mode.\"', '        )', '        super().__init__(\"\".join(buf))', '', '', 'def attach_enctype_error_multidict(request):', '    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error', '    about ``enctype=multipart/form-data``.', '', '    :param request: The request to patch.', '    :meta private:', '    \"\"\"', '    oldcls = request.files.__class__', '', '    class newcls(oldcls):', '        def __getitem__(self, key):', '            try:', '                return super().__getitem__(key)', '            except KeyError as e:', '                if key not in request.form:', '                    raise', '', '                raise DebugFilesKeyError(request, key).with_traceback(', '                    e.__traceback__', '                ) from None', '', '    newcls.__name__ = oldcls.__name__', '    newcls.__module__ = oldcls.__module__', '    request.files.__class__ = newcls', '', '', 'def _dump_loader_info(loader) -> t.Generator:', '    yield f\"class: {type(loader).__module__}.{type(loader).__name__}\"', '    for key, value in sorted(loader.__dict__.items()):', '        if key.startswith(\"_\"):', '            continue', '        if isinstance(value, (tuple, list)):', '            if not all(isinstance(x, str) for x in value):', '                continue', '            yield f\"{key}:\"', '            for item in value:', '                yield f\"  - {item}\"', '            continue', '        elif not isinstance(value, (str, int, float, bool)):', '            continue', '        yield f\"{key}: {value!r}\"', '', '', 'def explain_template_loading_attempts(app: Flask, template, attempts) -> None:', '    \"\"\"This should help developers understand what failed\"\"\"', '    info = [f\"Locating template {template!r}:\"]', '    total_found = 0', '    blueprint = None', '    if request_ctx and request_ctx.request.blueprint is not None:', '        blueprint = request_ctx.request.blueprint', '', '    for idx, (loader, srcobj, triple) in enumerate(attempts):', '        if isinstance(srcobj, Flask):', '            src_info = f\"application {srcobj.import_name!r}\"', '        elif isinstance(srcobj, Blueprint):', '            src_info = f\"blueprint {srcobj.name!r} ({srcobj.import_name})\"', '        else:', '            src_info = repr(srcobj)', '', '        info.append(f\"{idx + 1:5}: trying loader of {src_info}\")', '', '        for line in _dump_loader_info(loader):', '            info.append(f\"       {line}\")', '', '        if triple is None:', '            detail = \"no match\"', '        else:', '            detail = f\"found ({triple[1] or \\'<string>\\'!r})\"', '            total_found += 1', '        info.append(f\"       -> {detail}\")', '', '    seems_fishy = False', '    if total_found == 0:', '        info.append(\"Error: the template could not be found.\")', '        seems_fishy = True', '    elif total_found > 1:', '        info.append(\"Warning: multiple loaders returned a match for the template.\")', '        seems_fishy = True', '', '    if blueprint is not None and seems_fishy:', '        info.append(', '            \"  The template was looked up from an endpoint that belongs\"', '            f\" to the blueprint {blueprint!r}.\"', '        )', '        info.append(\"  Maybe you did not place a template in the right folder?\")', '        info.append(\"  See https://flask.palletsprojects.com/blueprints/#templates\")', '', '    app.logger.info(\"\\\\n\".join(info))']}, 'ctx.py': {'classes': [{'name': '_AppCtxGlobals', 'start_line': 25, 'end_line': 110, 'text': ['class _AppCtxGlobals:', '    \"\"\"A plain object. Used as a namespace for storing data during an', '    application context.', '', '    Creating an app context automatically creates this object, which is', '    made available as the :data:`g` proxy.', '', \"    .. describe:: 'key' in g\", '', '        Check whether an attribute is present.', '', '        .. versionadded:: 0.10', '', '    .. describe:: iter(g)', '', '        Return an iterator over the attribute names.', '', '        .. versionadded:: 0.10', '    \"\"\"', '', '    # Define attr methods to let mypy know this is a namespace object', '    # that has arbitrary attributes.', '', '    def __getattr__(self, name: str) -> t.Any:', '        try:', '            return self.__dict__[name]', '        except KeyError:', '            raise AttributeError(name) from None', '', '    def __setattr__(self, name: str, value: t.Any) -> None:', '        self.__dict__[name] = value', '', '    def __delattr__(self, name: str) -> None:', '        try:', '            del self.__dict__[name]', '        except KeyError:', '            raise AttributeError(name) from None', '', '    def get(self, name: str, default: t.Optional[t.Any] = None) -> t.Any:', '        \"\"\"Get an attribute by name, or a default value. Like', '        :meth:`dict.get`.', '', '        :param name: Name of attribute to get.', '        :param default: Value to return if the attribute is not present.', '', '        .. versionadded:: 0.10', '        \"\"\"', '        return self.__dict__.get(name, default)', '', '    def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:', '        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.', '', '        :param name: Name of attribute to pop.', '        :param default: Value to return if the attribute is not present,', '            instead of raising a ``KeyError``.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        if default is _sentinel:', '            return self.__dict__.pop(name)', '        else:', '            return self.__dict__.pop(name, default)', '', '    def setdefault(self, name: str, default: t.Any = None) -> t.Any:', '        \"\"\"Get the value of an attribute if it is present, otherwise', '        set and return a default value. Like :meth:`dict.setdefault`.', '', '        :param name: Name of attribute to get.', '        :param default: Value to set and return if the attribute is not', '            present.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        return self.__dict__.setdefault(name, default)', '', '    def __contains__(self, item: str) -> bool:', '        return item in self.__dict__', '', '    def __iter__(self) -> t.Iterator[str]:', '        return iter(self.__dict__)', '', '    def __repr__(self) -> str:', '        ctx = _cv_app.get(None)', '        if ctx is not None:', '            return f\"<flask.g of \\'{ctx.app.name}\\'>\"', '        return object.__repr__(self)'], 'methods': [{'name': '__getattr__', 'start_line': 48, 'end_line': 52, 'text': ['    def __getattr__(self, name: str) -> t.Any:', '        try:', '            return self.__dict__[name]', '        except KeyError:', '            raise AttributeError(name) from None']}, {'name': '__setattr__', 'start_line': 54, 'end_line': 55, 'text': ['    def __setattr__(self, name: str, value: t.Any) -> None:', '        self.__dict__[name] = value']}, {'name': '__delattr__', 'start_line': 57, 'end_line': 61, 'text': ['    def __delattr__(self, name: str) -> None:', '        try:', '            del self.__dict__[name]', '        except KeyError:', '            raise AttributeError(name) from None']}, {'name': 'get', 'start_line': 63, 'end_line': 72, 'text': ['    def get(self, name: str, default: t.Optional[t.Any] = None) -> t.Any:', '        \"\"\"Get an attribute by name, or a default value. Like', '        :meth:`dict.get`.', '', '        :param name: Name of attribute to get.', '        :param default: Value to return if the attribute is not present.', '', '        .. versionadded:: 0.10', '        \"\"\"', '        return self.__dict__.get(name, default)']}, {'name': 'pop', 'start_line': 74, 'end_line': 86, 'text': ['    def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:', '        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.', '', '        :param name: Name of attribute to pop.', '        :param default: Value to return if the attribute is not present,', '            instead of raising a ``KeyError``.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        if default is _sentinel:', '            return self.__dict__.pop(name)', '        else:', '            return self.__dict__.pop(name, default)']}, {'name': 'setdefault', 'start_line': 88, 'end_line': 98, 'text': ['    def setdefault(self, name: str, default: t.Any = None) -> t.Any:', '        \"\"\"Get the value of an attribute if it is present, otherwise', '        set and return a default value. Like :meth:`dict.setdefault`.', '', '        :param name: Name of attribute to get.', '        :param default: Value to set and return if the attribute is not', '            present.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        return self.__dict__.setdefault(name, default)']}, {'name': '__contains__', 'start_line': 100, 'end_line': 101, 'text': ['    def __contains__(self, item: str) -> bool:', '        return item in self.__dict__']}, {'name': '__iter__', 'start_line': 103, 'end_line': 104, 'text': ['    def __iter__(self) -> t.Iterator[str]:', '        return iter(self.__dict__)']}, {'name': '__repr__', 'start_line': 106, 'end_line': 110, 'text': ['    def __repr__(self) -> str:', '        ctx = _cv_app.get(None)', '        if ctx is not None:', '            return f\"<flask.g of \\'{ctx.app.name}\\'>\"', '        return object.__repr__(self)']}]}, {'name': 'AppContext', 'start_line': 229, 'end_line': 275, 'text': ['class AppContext:', '    \"\"\"The app context contains application-specific information. An app', '    context is created and pushed at the beginning of each request if', '    one is not already active. An app context is also pushed when', '    running CLI commands.', '    \"\"\"', '', '    def __init__(self, app: \"Flask\") -> None:', '        self.app = app', '        self.url_adapter = app.create_url_adapter(None)', '        self.g: _AppCtxGlobals = app.app_ctx_globals_class()', '        self._cv_tokens: t.List[contextvars.Token] = []', '', '    def push(self) -> None:', '        \"\"\"Binds the app context to the current context.\"\"\"', '        self._cv_tokens.append(_cv_app.set(self))', '        appcontext_pushed.send(self.app)', '', '    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore', '        \"\"\"Pops the app context.\"\"\"', '        try:', '            if len(self._cv_tokens) == 1:', '                if exc is _sentinel:', '                    exc = sys.exc_info()[1]', '                self.app.do_teardown_appcontext(exc)', '        finally:', '            ctx = _cv_app.get()', '            _cv_app.reset(self._cv_tokens.pop())', '', '        if ctx is not self:', '            raise AssertionError(', '                f\"Popped wrong app context. ({ctx!r} instead of {self!r})\"', '            )', '', '        appcontext_popped.send(self.app)', '', '    def __enter__(self) -> \"AppContext\":', '        self.push()', '        return self', '', '    def __exit__(', '        self,', '        exc_type: t.Optional[type],', '        exc_value: t.Optional[BaseException],', '        tb: t.Optional[TracebackType],', '    ) -> None:', '        self.pop(exc_value)'], 'methods': [{'name': '__init__', 'start_line': 236, 'end_line': 240, 'text': ['    def __init__(self, app: \"Flask\") -> None:', '        self.app = app', '        self.url_adapter = app.create_url_adapter(None)', '        self.g: _AppCtxGlobals = app.app_ctx_globals_class()', '        self._cv_tokens: t.List[contextvars.Token] = []']}, {'name': 'push', 'start_line': 242, 'end_line': 245, 'text': ['    def push(self) -> None:', '        \"\"\"Binds the app context to the current context.\"\"\"', '        self._cv_tokens.append(_cv_app.set(self))', '        appcontext_pushed.send(self.app)']}, {'name': 'pop', 'start_line': 247, 'end_line': 263, 'text': ['    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore', '        \"\"\"Pops the app context.\"\"\"', '        try:', '            if len(self._cv_tokens) == 1:', '                if exc is _sentinel:', '                    exc = sys.exc_info()[1]', '                self.app.do_teardown_appcontext(exc)', '        finally:', '            ctx = _cv_app.get()', '            _cv_app.reset(self._cv_tokens.pop())', '', '        if ctx is not self:', '            raise AssertionError(', '                f\"Popped wrong app context. ({ctx!r} instead of {self!r})\"', '            )', '', '        appcontext_popped.send(self.app)']}, {'name': '__enter__', 'start_line': 265, 'end_line': 267, 'text': ['    def __enter__(self) -> \"AppContext\":', '        self.push()', '        return self']}, {'name': '__exit__', 'start_line': 269, 'end_line': 275, 'text': ['    def __exit__(', '        self,', '        exc_type: t.Optional[type],', '        exc_value: t.Optional[BaseException],', '        tb: t.Optional[TracebackType],', '    ) -> None:', '        self.pop(exc_value)']}]}, {'name': 'RequestContext', 'start_line': 278, 'end_line': 438, 'text': ['class RequestContext:', '    \"\"\"The request context contains per-request information. The Flask', '    app creates and pushes it at the beginning of the request, then pops', '    it at the end of the request. It will create the URL adapter and', '    request object for the WSGI environment provided.', '', '    Do not attempt to use this class directly, instead use', '    :meth:`~flask.Flask.test_request_context` and', '    :meth:`~flask.Flask.request_context` to create this object.', '', '    When the request context is popped, it will evaluate all the', '    functions registered on the application for teardown execution', '    (:meth:`~flask.Flask.teardown_request`).', '', '    The request context is automatically popped at the end of the', '    request. When using the interactive debugger, the context will be', '    restored so ``request`` is still accessible. Similarly, the test', '    client can preserve the context after the request ends. However,', '    teardown functions may already have closed some resources such as', '    database connections.', '    \"\"\"', '', '    def __init__(', '        self,', '        app: \"Flask\",', '        environ: dict,', '        request: t.Optional[\"Request\"] = None,', '        session: t.Optional[\"SessionMixin\"] = None,', '    ) -> None:', '        self.app = app', '        if request is None:', '            request = app.request_class(environ)', '            request.json_module = app.json', '        self.request: Request = request', '        self.url_adapter = None', '        try:', '            self.url_adapter = app.create_url_adapter(self.request)', '        except HTTPException as e:', '            self.request.routing_exception = e', '        self.flashes: t.Optional[t.List[t.Tuple[str, str]]] = None', '        self.session: t.Optional[\"SessionMixin\"] = session', '        # Functions that should be executed after the request on the response', '        # object.  These will be called before the regular \"after_request\"', '        # functions.', '        self._after_request_functions: t.List[ft.AfterRequestCallable] = []', '', '        self._cv_tokens: t.List[t.Tuple[contextvars.Token, t.Optional[AppContext]]] = []', '', '    def copy(self) -> \"RequestContext\":', '        \"\"\"Creates a copy of this request context with the same request object.', '        This can be used to move a request context to a different greenlet.', '        Because the actual request object is the same this cannot be used to', '        move a request context to a different thread unless access to the', '        request object is locked.', '', '        .. versionadded:: 0.10', '', '        .. versionchanged:: 1.1', '           The current session object is used instead of reloading the original', '           data. This prevents `flask.session` pointing to an out-of-date object.', '        \"\"\"', '        return self.__class__(', '            self.app,', '            environ=self.request.environ,', '            request=self.request,', '            session=self.session,', '        )', '', '    def match_request(self) -> None:', '        \"\"\"Can be overridden by a subclass to hook into the matching', '        of the request.', '        \"\"\"', '        try:', '            result = self.url_adapter.match(return_rule=True)  # type: ignore', '            self.request.url_rule, self.request.view_args = result  # type: ignore', '        except HTTPException as e:', '            self.request.routing_exception = e', '', '    def push(self) -> None:', '        # Before we push the request context we have to ensure that there', '        # is an application context.', '        app_ctx = _cv_app.get(None)', '', '        if app_ctx is None or app_ctx.app is not self.app:', '            app_ctx = self.app.app_context()', '            app_ctx.push()', '        else:', '            app_ctx = None', '', '        self._cv_tokens.append((_cv_request.set(self), app_ctx))', '', '        # Open the session at the moment that the request context is available.', '        # This allows a custom open_session method to use the request context.', '        # Only open a new session if this is the first time the request was', '        # pushed, otherwise stream_with_context loses the session.', '        if self.session is None:', '            session_interface = self.app.session_interface', '            self.session = session_interface.open_session(self.app, self.request)', '', '            if self.session is None:', '                self.session = session_interface.make_null_session(self.app)', '', '        # Match the request URL after loading the session, so that the', '        # session is available in custom URL converters.', '        if self.url_adapter is not None:', '            self.match_request()', '', '    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore', '        \"\"\"Pops the request context and unbinds it by doing that.  This will', '        also trigger the execution of functions registered by the', '        :meth:`~flask.Flask.teardown_request` decorator.', '', '        .. versionchanged:: 0.9', '           Added the `exc` argument.', '        \"\"\"', '        clear_request = len(self._cv_tokens) == 1', '', '        try:', '            if clear_request:', '                if exc is _sentinel:', '                    exc = sys.exc_info()[1]', '                self.app.do_teardown_request(exc)', '', '                request_close = getattr(self.request, \"close\", None)', '                if request_close is not None:', '                    request_close()', '        finally:', '            ctx = _cv_request.get()', '            token, app_ctx = self._cv_tokens.pop()', '            _cv_request.reset(token)', '', '            # get rid of circular dependencies at the end of the request', \"            # so that we don't require the GC to be active.\", '            if clear_request:', '                ctx.request.environ[\"werkzeug.request\"] = None', '', '            if app_ctx is not None:', '                app_ctx.pop(exc)', '', '            if ctx is not self:', '                raise AssertionError(', '                    f\"Popped wrong request context. ({ctx!r} instead of {self!r})\"', '                )', '', '    def __enter__(self) -> \"RequestContext\":', '        self.push()', '        return self', '', '    def __exit__(', '        self,', '        exc_type: t.Optional[type],', '        exc_value: t.Optional[BaseException],', '        tb: t.Optional[TracebackType],', '    ) -> None:', '        self.pop(exc_value)', '', '    def __repr__(self) -> str:', '        return (', '            f\"<{type(self).__name__} {self.request.url!r}\"', '            f\" [{self.request.method}] of {self.app.name}>\"', '        )'], 'methods': [{'name': '__init__', 'start_line': 300, 'end_line': 324, 'text': ['    def __init__(', '        self,', '        app: \"Flask\",', '        environ: dict,', '        request: t.Optional[\"Request\"] = None,', '        session: t.Optional[\"SessionMixin\"] = None,', '    ) -> None:', '        self.app = app', '        if request is None:', '            request = app.request_class(environ)', '            request.json_module = app.json', '        self.request: Request = request', '        self.url_adapter = None', '        try:', '            self.url_adapter = app.create_url_adapter(self.request)', '        except HTTPException as e:', '            self.request.routing_exception = e', '        self.flashes: t.Optional[t.List[t.Tuple[str, str]]] = None', '        self.session: t.Optional[\"SessionMixin\"] = session', '        # Functions that should be executed after the request on the response', '        # object.  These will be called before the regular \"after_request\"', '        # functions.', '        self._after_request_functions: t.List[ft.AfterRequestCallable] = []', '', '        self._cv_tokens: t.List[t.Tuple[contextvars.Token, t.Optional[AppContext]]] = []']}, {'name': 'copy', 'start_line': 326, 'end_line': 344, 'text': ['    def copy(self) -> \"RequestContext\":', '        \"\"\"Creates a copy of this request context with the same request object.', '        This can be used to move a request context to a different greenlet.', '        Because the actual request object is the same this cannot be used to', '        move a request context to a different thread unless access to the', '        request object is locked.', '', '        .. versionadded:: 0.10', '', '        .. versionchanged:: 1.1', '           The current session object is used instead of reloading the original', '           data. This prevents `flask.session` pointing to an out-of-date object.', '        \"\"\"', '        return self.__class__(', '            self.app,', '            environ=self.request.environ,', '            request=self.request,', '            session=self.session,', '        )']}, {'name': 'match_request', 'start_line': 346, 'end_line': 354, 'text': ['    def match_request(self) -> None:', '        \"\"\"Can be overridden by a subclass to hook into the matching', '        of the request.', '        \"\"\"', '        try:', '            result = self.url_adapter.match(return_rule=True)  # type: ignore', '            self.request.url_rule, self.request.view_args = result  # type: ignore', '        except HTTPException as e:', '            self.request.routing_exception = e']}, {'name': 'push', 'start_line': 356, 'end_line': 383, 'text': ['    def push(self) -> None:', '        # Before we push the request context we have to ensure that there', '        # is an application context.', '        app_ctx = _cv_app.get(None)', '', '        if app_ctx is None or app_ctx.app is not self.app:', '            app_ctx = self.app.app_context()', '            app_ctx.push()', '        else:', '            app_ctx = None', '', '        self._cv_tokens.append((_cv_request.set(self), app_ctx))', '', '        # Open the session at the moment that the request context is available.', '        # This allows a custom open_session method to use the request context.', '        # Only open a new session if this is the first time the request was', '        # pushed, otherwise stream_with_context loses the session.', '        if self.session is None:', '            session_interface = self.app.session_interface', '            self.session = session_interface.open_session(self.app, self.request)', '', '            if self.session is None:', '                self.session = session_interface.make_null_session(self.app)', '', '        # Match the request URL after loading the session, so that the', '        # session is available in custom URL converters.', '        if self.url_adapter is not None:', '            self.match_request()']}, {'name': 'pop', 'start_line': 385, 'end_line': 420, 'text': ['    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore', '        \"\"\"Pops the request context and unbinds it by doing that.  This will', '        also trigger the execution of functions registered by the', '        :meth:`~flask.Flask.teardown_request` decorator.', '', '        .. versionchanged:: 0.9', '           Added the `exc` argument.', '        \"\"\"', '        clear_request = len(self._cv_tokens) == 1', '', '        try:', '            if clear_request:', '                if exc is _sentinel:', '                    exc = sys.exc_info()[1]', '                self.app.do_teardown_request(exc)', '', '                request_close = getattr(self.request, \"close\", None)', '                if request_close is not None:', '                    request_close()', '        finally:', '            ctx = _cv_request.get()', '            token, app_ctx = self._cv_tokens.pop()', '            _cv_request.reset(token)', '', '            # get rid of circular dependencies at the end of the request', \"            # so that we don't require the GC to be active.\", '            if clear_request:', '                ctx.request.environ[\"werkzeug.request\"] = None', '', '            if app_ctx is not None:', '                app_ctx.pop(exc)', '', '            if ctx is not self:', '                raise AssertionError(', '                    f\"Popped wrong request context. ({ctx!r} instead of {self!r})\"', '                )']}, {'name': '__enter__', 'start_line': 422, 'end_line': 424, 'text': ['    def __enter__(self) -> \"RequestContext\":', '        self.push()', '        return self']}, {'name': '__exit__', 'start_line': 426, 'end_line': 432, 'text': ['    def __exit__(', '        self,', '        exc_type: t.Optional[type],', '        exc_value: t.Optional[BaseException],', '        tb: t.Optional[TracebackType],', '    ) -> None:', '        self.pop(exc_value)']}, {'name': '__repr__', 'start_line': 434, 'end_line': 438, 'text': ['    def __repr__(self) -> str:', '        return (', '            f\"<{type(self).__name__} {self.request.url!r}\"', '            f\" [{self.request.method}] of {self.app.name}>\"', '        )']}]}], 'functions': [{'name': 'after_this_request', 'start_line': 113, 'end_line': 143, 'text': ['def after_this_request(f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:', '    \"\"\"Executes a function after this request.  This is useful to modify', '    response objects.  The function is passed the response object and has', '    to return the same or a new one.', '', '    Example::', '', \"        @app.route('/')\", '        def index():', '            @after_this_request', '            def add_header(response):', \"                response.headers['X-Foo'] = 'Parachute'\", '                return response', \"            return 'Hello World!'\", '', '    This is more useful if a function other than the view function wants to', '    modify a response.  For instance think of a decorator that wants to add', '    some headers without converting the return value into a response object.', '', '    .. versionadded:: 0.9', '    \"\"\"', '    ctx = _cv_request.get(None)', '', '    if ctx is None:', '        raise RuntimeError(', '            \"\\'after_this_request\\' can only be used when a request\"', '            \" context is active, such as in a view function.\"', '        )', '', '    ctx._after_request_functions.append(f)', '    return f']}, {'name': 'copy_current_request_context', 'start_line': 146, 'end_line': 184, 'text': ['def copy_current_request_context(f: t.Callable) -> t.Callable:', '    \"\"\"A helper function that decorates a function to retain the current', '    request context.  This is useful when working with greenlets.  The moment', '    the function is decorated a copy of the request context is created and', '    then pushed when the function is called.  The current session is also', '    included in the copied request context.', '', '    Example::', '', '        import gevent', '        from flask import copy_current_request_context', '', \"        @app.route('/')\", '        def index():', '            @copy_current_request_context', '            def do_some_work():', '                # do some work here, it can access flask.request or', '                # flask.session like you would otherwise in the view function.', '                ...', '            gevent.spawn(do_some_work)', \"            return 'Regular response'\", '', '    .. versionadded:: 0.10', '    \"\"\"', '    ctx = _cv_request.get(None)', '', '    if ctx is None:', '        raise RuntimeError(', '            \"\\'copy_current_request_context\\' can only be used when a\"', '            \" request context is active, such as in a view function.\"', '        )', '', '    ctx = ctx.copy()', '', '    def wrapper(*args, **kwargs):', '        with ctx:', '            return ctx.app.ensure_sync(f)(*args, **kwargs)', '', '    return update_wrapper(wrapper, f)']}, {'name': 'has_request_context', 'start_line': 187, 'end_line': 216, 'text': ['def has_request_context() -> bool:', '    \"\"\"If you have code that wants to test if a request context is there or', '    not this function can be used.  For instance, you may want to take advantage', '    of request information if the request object is available, but fail', '    silently if it is unavailable.', '', '    ::', '', '        class User(db.Model):', '', '            def __init__(self, username, remote_addr=None):', '                self.username = username', '                if remote_addr is None and has_request_context():', '                    remote_addr = request.remote_addr', '                self.remote_addr = remote_addr', '', '    Alternatively you can also just test any of the context bound objects', '    (such as :class:`request` or :class:`g`) for truthness::', '', '        class User(db.Model):', '', '            def __init__(self, username, remote_addr=None):', '                self.username = username', '                if remote_addr is None and request:', '                    remote_addr = request.remote_addr', '                self.remote_addr = remote_addr', '', '    .. versionadded:: 0.7', '    \"\"\"', '    return _cv_request.get(None) is not None']}, {'name': 'has_app_context', 'start_line': 219, 'end_line': 226, 'text': ['def has_app_context() -> bool:', '    \"\"\"Works like :func:`has_request_context` but for the application', '    context.  You can also just do a boolean check on the', '    :data:`current_app` object instead.', '', '    .. versionadded:: 0.9', '    \"\"\"', '    return _cv_app.get(None) is not None']}, {'name': 'wrapper', 'start_line': 180, 'end_line': 182, 'text': ['    def wrapper(*args, **kwargs):', '        with ctx:', '            return ctx.app.ensure_sync(f)(*args, **kwargs)']}], 'text': ['import contextvars', 'import sys', 'import typing as t', 'from functools import update_wrapper', 'from types import TracebackType', '', 'from werkzeug.exceptions import HTTPException', '', 'from . import typing as ft', 'from .globals import _cv_app', 'from .globals import _cv_request', 'from .signals import appcontext_popped', 'from .signals import appcontext_pushed', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from .app import Flask', '    from .sessions import SessionMixin', '    from .wrappers import Request', '', '', '# a singleton sentinel value for parameter defaults', '_sentinel = object()', '', '', 'class _AppCtxGlobals:', '    \"\"\"A plain object. Used as a namespace for storing data during an', '    application context.', '', '    Creating an app context automatically creates this object, which is', '    made available as the :data:`g` proxy.', '', \"    .. describe:: 'key' in g\", '', '        Check whether an attribute is present.', '', '        .. versionadded:: 0.10', '', '    .. describe:: iter(g)', '', '        Return an iterator over the attribute names.', '', '        .. versionadded:: 0.10', '    \"\"\"', '', '    # Define attr methods to let mypy know this is a namespace object', '    # that has arbitrary attributes.', '', '    def __getattr__(self, name: str) -> t.Any:', '        try:', '            return self.__dict__[name]', '        except KeyError:', '            raise AttributeError(name) from None', '', '    def __setattr__(self, name: str, value: t.Any) -> None:', '        self.__dict__[name] = value', '', '    def __delattr__(self, name: str) -> None:', '        try:', '            del self.__dict__[name]', '        except KeyError:', '            raise AttributeError(name) from None', '', '    def get(self, name: str, default: t.Optional[t.Any] = None) -> t.Any:', '        \"\"\"Get an attribute by name, or a default value. Like', '        :meth:`dict.get`.', '', '        :param name: Name of attribute to get.', '        :param default: Value to return if the attribute is not present.', '', '        .. versionadded:: 0.10', '        \"\"\"', '        return self.__dict__.get(name, default)', '', '    def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:', '        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.', '', '        :param name: Name of attribute to pop.', '        :param default: Value to return if the attribute is not present,', '            instead of raising a ``KeyError``.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        if default is _sentinel:', '            return self.__dict__.pop(name)', '        else:', '            return self.__dict__.pop(name, default)', '', '    def setdefault(self, name: str, default: t.Any = None) -> t.Any:', '        \"\"\"Get the value of an attribute if it is present, otherwise', '        set and return a default value. Like :meth:`dict.setdefault`.', '', '        :param name: Name of attribute to get.', '        :param default: Value to set and return if the attribute is not', '            present.', '', '        .. versionadded:: 0.11', '        \"\"\"', '        return self.__dict__.setdefault(name, default)', '', '    def __contains__(self, item: str) -> bool:', '        return item in self.__dict__', '', '    def __iter__(self) -> t.Iterator[str]:', '        return iter(self.__dict__)', '', '    def __repr__(self) -> str:', '        ctx = _cv_app.get(None)', '        if ctx is not None:', '            return f\"<flask.g of \\'{ctx.app.name}\\'>\"', '        return object.__repr__(self)', '', '', 'def after_this_request(f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:', '    \"\"\"Executes a function after this request.  This is useful to modify', '    response objects.  The function is passed the response object and has', '    to return the same or a new one.', '', '    Example::', '', \"        @app.route('/')\", '        def index():', '            @after_this_request', '            def add_header(response):', \"                response.headers['X-Foo'] = 'Parachute'\", '                return response', \"            return 'Hello World!'\", '', '    This is more useful if a function other than the view function wants to', '    modify a response.  For instance think of a decorator that wants to add', '    some headers without converting the return value into a response object.', '', '    .. versionadded:: 0.9', '    \"\"\"', '    ctx = _cv_request.get(None)', '', '    if ctx is None:', '        raise RuntimeError(', '            \"\\'after_this_request\\' can only be used when a request\"', '            \" context is active, such as in a view function.\"', '        )', '', '    ctx._after_request_functions.append(f)', '    return f', '', '', 'def copy_current_request_context(f: t.Callable) -> t.Callable:', '    \"\"\"A helper function that decorates a function to retain the current', '    request context.  This is useful when working with greenlets.  The moment', '    the function is decorated a copy of the request context is created and', '    then pushed when the function is called.  The current session is also', '    included in the copied request context.', '', '    Example::', '', '        import gevent', '        from flask import copy_current_request_context', '', \"        @app.route('/')\", '        def index():', '            @copy_current_request_context', '            def do_some_work():', '                # do some work here, it can access flask.request or', '                # flask.session like you would otherwise in the view function.', '                ...', '            gevent.spawn(do_some_work)', \"            return 'Regular response'\", '', '    .. versionadded:: 0.10', '    \"\"\"', '    ctx = _cv_request.get(None)', '', '    if ctx is None:', '        raise RuntimeError(', '            \"\\'copy_current_request_context\\' can only be used when a\"', '            \" request context is active, such as in a view function.\"', '        )', '', '    ctx = ctx.copy()', '', '    def wrapper(*args, **kwargs):', '        with ctx:', '            return ctx.app.ensure_sync(f)(*args, **kwargs)', '', '    return update_wrapper(wrapper, f)', '', '', 'def has_request_context() -> bool:', '    \"\"\"If you have code that wants to test if a request context is there or', '    not this function can be used.  For instance, you may want to take advantage', '    of request information if the request object is available, but fail', '    silently if it is unavailable.', '', '    ::', '', '        class User(db.Model):', '', '            def __init__(self, username, remote_addr=None):', '                self.username = username', '                if remote_addr is None and has_request_context():', '                    remote_addr = request.remote_addr', '                self.remote_addr = remote_addr', '', '    Alternatively you can also just test any of the context bound objects', '    (such as :class:`request` or :class:`g`) for truthness::', '', '        class User(db.Model):', '', '            def __init__(self, username, remote_addr=None):', '                self.username = username', '                if remote_addr is None and request:', '                    remote_addr = request.remote_addr', '                self.remote_addr = remote_addr', '', '    .. versionadded:: 0.7', '    \"\"\"', '    return _cv_request.get(None) is not None', '', '', 'def has_app_context() -> bool:', '    \"\"\"Works like :func:`has_request_context` but for the application', '    context.  You can also just do a boolean check on the', '    :data:`current_app` object instead.', '', '    .. versionadded:: 0.9', '    \"\"\"', '    return _cv_app.get(None) is not None', '', '', 'class AppContext:', '    \"\"\"The app context contains application-specific information. An app', '    context is created and pushed at the beginning of each request if', '    one is not already active. An app context is also pushed when', '    running CLI commands.', '    \"\"\"', '', '    def __init__(self, app: \"Flask\") -> None:', '        self.app = app', '        self.url_adapter = app.create_url_adapter(None)', '        self.g: _AppCtxGlobals = app.app_ctx_globals_class()', '        self._cv_tokens: t.List[contextvars.Token] = []', '', '    def push(self) -> None:', '        \"\"\"Binds the app context to the current context.\"\"\"', '        self._cv_tokens.append(_cv_app.set(self))', '        appcontext_pushed.send(self.app)', '', '    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore', '        \"\"\"Pops the app context.\"\"\"', '        try:', '            if len(self._cv_tokens) == 1:', '                if exc is _sentinel:', '                    exc = sys.exc_info()[1]', '                self.app.do_teardown_appcontext(exc)', '        finally:', '            ctx = _cv_app.get()', '            _cv_app.reset(self._cv_tokens.pop())', '', '        if ctx is not self:', '            raise AssertionError(', '                f\"Popped wrong app context. ({ctx!r} instead of {self!r})\"', '            )', '', '        appcontext_popped.send(self.app)', '', '    def __enter__(self) -> \"AppContext\":', '        self.push()', '        return self', '', '    def __exit__(', '        self,', '        exc_type: t.Optional[type],', '        exc_value: t.Optional[BaseException],', '        tb: t.Optional[TracebackType],', '    ) -> None:', '        self.pop(exc_value)', '', '', 'class RequestContext:', '    \"\"\"The request context contains per-request information. The Flask', '    app creates and pushes it at the beginning of the request, then pops', '    it at the end of the request. It will create the URL adapter and', '    request object for the WSGI environment provided.', '', '    Do not attempt to use this class directly, instead use', '    :meth:`~flask.Flask.test_request_context` and', '    :meth:`~flask.Flask.request_context` to create this object.', '', '    When the request context is popped, it will evaluate all the', '    functions registered on the application for teardown execution', '    (:meth:`~flask.Flask.teardown_request`).', '', '    The request context is automatically popped at the end of the', '    request. When using the interactive debugger, the context will be', '    restored so ``request`` is still accessible. Similarly, the test', '    client can preserve the context after the request ends. However,', '    teardown functions may already have closed some resources such as', '    database connections.', '    \"\"\"', '', '    def __init__(', '        self,', '        app: \"Flask\",', '        environ: dict,', '        request: t.Optional[\"Request\"] = None,', '        session: t.Optional[\"SessionMixin\"] = None,', '    ) -> None:', '        self.app = app', '        if request is None:', '            request = app.request_class(environ)', '            request.json_module = app.json', '        self.request: Request = request', '        self.url_adapter = None', '        try:', '            self.url_adapter = app.create_url_adapter(self.request)', '        except HTTPException as e:', '            self.request.routing_exception = e', '        self.flashes: t.Optional[t.List[t.Tuple[str, str]]] = None', '        self.session: t.Optional[\"SessionMixin\"] = session', '        # Functions that should be executed after the request on the response', '        # object.  These will be called before the regular \"after_request\"', '        # functions.', '        self._after_request_functions: t.List[ft.AfterRequestCallable] = []', '', '        self._cv_tokens: t.List[t.Tuple[contextvars.Token, t.Optional[AppContext]]] = []', '', '    def copy(self) -> \"RequestContext\":', '        \"\"\"Creates a copy of this request context with the same request object.', '        This can be used to move a request context to a different greenlet.', '        Because the actual request object is the same this cannot be used to', '        move a request context to a different thread unless access to the', '        request object is locked.', '', '        .. versionadded:: 0.10', '', '        .. versionchanged:: 1.1', '           The current session object is used instead of reloading the original', '           data. This prevents `flask.session` pointing to an out-of-date object.', '        \"\"\"', '        return self.__class__(', '            self.app,', '            environ=self.request.environ,', '            request=self.request,', '            session=self.session,', '        )', '', '    def match_request(self) -> None:', '        \"\"\"Can be overridden by a subclass to hook into the matching', '        of the request.', '        \"\"\"', '        try:', '            result = self.url_adapter.match(return_rule=True)  # type: ignore', '            self.request.url_rule, self.request.view_args = result  # type: ignore', '        except HTTPException as e:', '            self.request.routing_exception = e', '', '    def push(self) -> None:', '        # Before we push the request context we have to ensure that there', '        # is an application context.', '        app_ctx = _cv_app.get(None)', '', '        if app_ctx is None or app_ctx.app is not self.app:', '            app_ctx = self.app.app_context()', '            app_ctx.push()', '        else:', '            app_ctx = None', '', '        self._cv_tokens.append((_cv_request.set(self), app_ctx))', '', '        # Open the session at the moment that the request context is available.', '        # This allows a custom open_session method to use the request context.', '        # Only open a new session if this is the first time the request was', '        # pushed, otherwise stream_with_context loses the session.', '        if self.session is None:', '            session_interface = self.app.session_interface', '            self.session = session_interface.open_session(self.app, self.request)', '', '            if self.session is None:', '                self.session = session_interface.make_null_session(self.app)', '', '        # Match the request URL after loading the session, so that the', '        # session is available in custom URL converters.', '        if self.url_adapter is not None:', '            self.match_request()', '', '    def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore', '        \"\"\"Pops the request context and unbinds it by doing that.  This will', '        also trigger the execution of functions registered by the', '        :meth:`~flask.Flask.teardown_request` decorator.', '', '        .. versionchanged:: 0.9', '           Added the `exc` argument.', '        \"\"\"', '        clear_request = len(self._cv_tokens) == 1', '', '        try:', '            if clear_request:', '                if exc is _sentinel:', '                    exc = sys.exc_info()[1]', '                self.app.do_teardown_request(exc)', '', '                request_close = getattr(self.request, \"close\", None)', '                if request_close is not None:', '                    request_close()', '        finally:', '            ctx = _cv_request.get()', '            token, app_ctx = self._cv_tokens.pop()', '            _cv_request.reset(token)', '', '            # get rid of circular dependencies at the end of the request', \"            # so that we don't require the GC to be active.\", '            if clear_request:', '                ctx.request.environ[\"werkzeug.request\"] = None', '', '            if app_ctx is not None:', '                app_ctx.pop(exc)', '', '            if ctx is not self:', '                raise AssertionError(', '                    f\"Popped wrong request context. ({ctx!r} instead of {self!r})\"', '                )', '', '    def __enter__(self) -> \"RequestContext\":', '        self.push()', '        return self', '', '    def __exit__(', '        self,', '        exc_type: t.Optional[type],', '        exc_value: t.Optional[BaseException],', '        tb: t.Optional[TracebackType],', '    ) -> None:', '        self.pop(exc_value)', '', '    def __repr__(self) -> str:', '        return (', '            f\"<{type(self).__name__} {self.request.url!r}\"', '            f\" [{self.request.method}] of {self.app.name}>\"', '        )']}, 'typing.py': {'classes': [], 'functions': [], 'text': ['import typing as t', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from _typeshed.wsgi import WSGIApplication  # noqa: F401', '    from werkzeug.datastructures import Headers  # noqa: F401', '    from werkzeug.wrappers import Response  # noqa: F401', '', '# The possible types that are directly convertible or are a Response object.', 'ResponseValue = t.Union[', '    \"Response\",', '    str,', '    bytes,', '    t.List[t.Any],', '    # Only dict is actually accepted, but Mapping allows for TypedDict.', '    t.Mapping[str, t.Any],', '    t.Iterator[str],', '    t.Iterator[bytes],', ']', '', '# the possible types for an individual HTTP header', \"# This should be a Union, but mypy doesn't pass unless it's a TypeVar.\", 'HeaderValue = t.Union[str, t.List[str], t.Tuple[str, ...]]', '', '# the possible types for HTTP headers', 'HeadersValue = t.Union[', '    \"Headers\",', '    t.Mapping[str, HeaderValue],', '    t.Sequence[t.Tuple[str, HeaderValue]],', ']', '', '# The possible types returned by a route function.', 'ResponseReturnValue = t.Union[', '    ResponseValue,', '    t.Tuple[ResponseValue, HeadersValue],', '    t.Tuple[ResponseValue, int],', '    t.Tuple[ResponseValue, int, HeadersValue],', '    \"WSGIApplication\",', ']', '', '# Allow any subclass of werkzeug.Response, such as the one from Flask,', '# as a callback argument. Using werkzeug.Response directly makes a', '# callback annotated with flask.Response fail type checking.', 'ResponseClass = t.TypeVar(\"ResponseClass\", bound=\"Response\")', '', 'AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named', 'AfterRequestCallable = t.Union[', '    t.Callable[[ResponseClass], ResponseClass],', '    t.Callable[[ResponseClass], t.Awaitable[ResponseClass]],', ']', 'BeforeFirstRequestCallable = t.Union[', '    t.Callable[[], None], t.Callable[[], t.Awaitable[None]]', ']', 'BeforeRequestCallable = t.Union[', '    t.Callable[[], t.Optional[ResponseReturnValue]],', '    t.Callable[[], t.Awaitable[t.Optional[ResponseReturnValue]]],', ']', 'ShellContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]', 'TeardownCallable = t.Union[', '    t.Callable[[t.Optional[BaseException]], None],', '    t.Callable[[t.Optional[BaseException]], t.Awaitable[None]],', ']', 'TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]', 'TemplateFilterCallable = t.Callable[..., t.Any]', 'TemplateGlobalCallable = t.Callable[..., t.Any]', 'TemplateTestCallable = t.Callable[..., bool]', 'URLDefaultCallable = t.Callable[[str, dict], None]', 'URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]', '', '# This should take Exception, but that either breaks typing the argument', '# with a specific exception, or decorating multiple times with different', '# exceptions (and using a union type on the argument).', '# https://github.com/pallets/flask/issues/4095', '# https://github.com/pallets/flask/issues/4295', '# https://github.com/pallets/flask/issues/4297', 'ErrorHandlerCallable = t.Callable[[t.Any], ResponseReturnValue]', '', 'RouteCallable = t.Union[', '    t.Callable[..., ResponseReturnValue],', '    t.Callable[..., t.Awaitable[ResponseReturnValue]],', ']']}, 'json': {'tag.py': {'classes': [{'name': 'JSONTag', 'start_line': 57, 'end_line': 87, 'text': ['class JSONTag:', '    \"\"\"Base class for defining type tags for :class:`TaggedJSONSerializer`.\"\"\"', '', '    __slots__ = (\"serializer\",)', '', '    #: The tag to mark the serialized object with. If ``None``, this tag is', '    #: only used as an intermediate step during tagging.', '    key: t.Optional[str] = None', '', '    def __init__(self, serializer: \"TaggedJSONSerializer\") -> None:', '        \"\"\"Create a tagger for the given serializer.\"\"\"', '        self.serializer = serializer', '', '    def check(self, value: t.Any) -> bool:', '        \"\"\"Check if the given value should be tagged by this tag.\"\"\"', '        raise NotImplementedError', '', '    def to_json(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the Python object to an object that is a valid JSON type.', '        The tag will be added later.\"\"\"', '        raise NotImplementedError', '', '    def to_python(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the JSON representation back to the correct type. The tag', '        will already be removed.\"\"\"', '        raise NotImplementedError', '', '    def tag(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the value to a valid JSON type and add the tag structure', '        around it.\"\"\"', '        return {self.key: self.to_json(value)}'], 'methods': [{'name': '__init__', 'start_line': 66, 'end_line': 68, 'text': ['    def __init__(self, serializer: \"TaggedJSONSerializer\") -> None:', '        \"\"\"Create a tagger for the given serializer.\"\"\"', '        self.serializer = serializer']}, {'name': 'check', 'start_line': 70, 'end_line': 72, 'text': ['    def check(self, value: t.Any) -> bool:', '        \"\"\"Check if the given value should be tagged by this tag.\"\"\"', '        raise NotImplementedError']}, {'name': 'to_json', 'start_line': 74, 'end_line': 77, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the Python object to an object that is a valid JSON type.', '        The tag will be added later.\"\"\"', '        raise NotImplementedError']}, {'name': 'to_python', 'start_line': 79, 'end_line': 82, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the JSON representation back to the correct type. The tag', '        will already be removed.\"\"\"', '        raise NotImplementedError']}, {'name': 'tag', 'start_line': 84, 'end_line': 87, 'text': ['    def tag(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the value to a valid JSON type and add the tag structure', '        around it.\"\"\"', '        return {self.key: self.to_json(value)}']}]}, {'name': 'TagDict', 'start_line': 90, 'end_line': 113, 'text': ['class TagDict(JSONTag):', '    \"\"\"Tag for 1-item dicts whose only key matches a registered tag.', '', '    Internally, the dict key is suffixed with `__`, and the suffix is removed', '    when deserializing.', '    \"\"\"', '', '    __slots__ = ()', '    key = \" di\"', '', '    def check(self, value: t.Any) -> bool:', '        return (', '            isinstance(value, dict)', '            and len(value) == 1', '            and next(iter(value)) in self.serializer.tags', '        )', '', '    def to_json(self, value: t.Any) -> t.Any:', '        key = next(iter(value))', '        return {f\"{key}__\": self.serializer.tag(value[key])}', '', '    def to_python(self, value: t.Any) -> t.Any:', '        key = next(iter(value))', '        return {key[:-2]: value[key]}'], 'methods': [{'name': 'check', 'start_line': 100, 'end_line': 105, 'text': ['    def check(self, value: t.Any) -> bool:', '        return (', '            isinstance(value, dict)', '            and len(value) == 1', '            and next(iter(value)) in self.serializer.tags', '        )']}, {'name': 'to_json', 'start_line': 107, 'end_line': 109, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        key = next(iter(value))', '        return {f\"{key}__\": self.serializer.tag(value[key])}']}, {'name': 'to_python', 'start_line': 111, 'end_line': 113, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        key = next(iter(value))', '        return {key[:-2]: value[key]}']}]}, {'name': 'PassDict', 'start_line': 116, 'end_line': 127, 'text': ['class PassDict(JSONTag):', '    __slots__ = ()', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, dict)', '', '    def to_json(self, value: t.Any) -> t.Any:', \"        # JSON objects may only have string keys, so don't bother tagging the\", '        # key here.', '        return {k: self.serializer.tag(v) for k, v in value.items()}', '', '    tag = to_json'], 'methods': [{'name': 'check', 'start_line': 119, 'end_line': 120, 'text': ['    def check(self, value: t.Any) -> bool:', '        return isinstance(value, dict)']}, {'name': 'to_json', 'start_line': 122, 'end_line': 125, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', \"        # JSON objects may only have string keys, so don't bother tagging the\", '        # key here.', '        return {k: self.serializer.tag(v) for k, v in value.items()}']}]}, {'name': 'TagTuple', 'start_line': 130, 'end_line': 141, 'text': ['class TagTuple(JSONTag):', '    __slots__ = ()', '    key = \" t\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, tuple)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return [self.serializer.tag(item) for item in value]', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return tuple(value)'], 'methods': [{'name': 'check', 'start_line': 134, 'end_line': 135, 'text': ['    def check(self, value: t.Any) -> bool:', '        return isinstance(value, tuple)']}, {'name': 'to_json', 'start_line': 137, 'end_line': 138, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        return [self.serializer.tag(item) for item in value]']}, {'name': 'to_python', 'start_line': 140, 'end_line': 141, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        return tuple(value)']}]}, {'name': 'PassList', 'start_line': 144, 'end_line': 153, 'text': ['class PassList(JSONTag):', '    __slots__ = ()', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, list)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return [self.serializer.tag(item) for item in value]', '', '    tag = to_json'], 'methods': [{'name': 'check', 'start_line': 147, 'end_line': 148, 'text': ['    def check(self, value: t.Any) -> bool:', '        return isinstance(value, list)']}, {'name': 'to_json', 'start_line': 150, 'end_line': 151, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        return [self.serializer.tag(item) for item in value]']}]}, {'name': 'TagBytes', 'start_line': 156, 'end_line': 167, 'text': ['class TagBytes(JSONTag):', '    __slots__ = ()', '    key = \" b\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, bytes)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return b64encode(value).decode(\"ascii\")', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return b64decode(value)'], 'methods': [{'name': 'check', 'start_line': 160, 'end_line': 161, 'text': ['    def check(self, value: t.Any) -> bool:', '        return isinstance(value, bytes)']}, {'name': 'to_json', 'start_line': 163, 'end_line': 164, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        return b64encode(value).decode(\"ascii\")']}, {'name': 'to_python', 'start_line': 166, 'end_line': 167, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        return b64decode(value)']}]}, {'name': 'TagMarkup', 'start_line': 170, 'end_line': 185, 'text': ['class TagMarkup(JSONTag):', '    \"\"\"Serialize anything matching the :class:`~markupsafe.Markup` API by', '    having a ``__html__`` method to the result of that method. Always', '    deserializes to an instance of :class:`~markupsafe.Markup`.\"\"\"', '', '    __slots__ = ()', '    key = \" m\"', '', '    def check(self, value: t.Any) -> bool:', '        return callable(getattr(value, \"__html__\", None))', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return str(value.__html__())', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return Markup(value)'], 'methods': [{'name': 'check', 'start_line': 178, 'end_line': 179, 'text': ['    def check(self, value: t.Any) -> bool:', '        return callable(getattr(value, \"__html__\", None))']}, {'name': 'to_json', 'start_line': 181, 'end_line': 182, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        return str(value.__html__())']}, {'name': 'to_python', 'start_line': 184, 'end_line': 185, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        return Markup(value)']}]}, {'name': 'TagUUID', 'start_line': 188, 'end_line': 199, 'text': ['class TagUUID(JSONTag):', '    __slots__ = ()', '    key = \" u\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, UUID)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return value.hex', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return UUID(value)'], 'methods': [{'name': 'check', 'start_line': 192, 'end_line': 193, 'text': ['    def check(self, value: t.Any) -> bool:', '        return isinstance(value, UUID)']}, {'name': 'to_json', 'start_line': 195, 'end_line': 196, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        return value.hex']}, {'name': 'to_python', 'start_line': 198, 'end_line': 199, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        return UUID(value)']}]}, {'name': 'TagDateTime', 'start_line': 202, 'end_line': 213, 'text': ['class TagDateTime(JSONTag):', '    __slots__ = ()', '    key = \" d\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, datetime)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return http_date(value)', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return parse_date(value)'], 'methods': [{'name': 'check', 'start_line': 206, 'end_line': 207, 'text': ['    def check(self, value: t.Any) -> bool:', '        return isinstance(value, datetime)']}, {'name': 'to_json', 'start_line': 209, 'end_line': 210, 'text': ['    def to_json(self, value: t.Any) -> t.Any:', '        return http_date(value)']}, {'name': 'to_python', 'start_line': 212, 'end_line': 213, 'text': ['    def to_python(self, value: t.Any) -> t.Any:', '        return parse_date(value)']}]}, {'name': 'TaggedJSONSerializer', 'start_line': 216, 'end_line': 312, 'text': ['class TaggedJSONSerializer:', '    \"\"\"Serializer that uses a tag system to compactly represent objects that', '    are not JSON types. Passed as the intermediate serializer to', '    :class:`itsdangerous.Serializer`.', '', '    The following extra types are supported:', '', '    * :class:`dict`', '    * :class:`tuple`', '    * :class:`bytes`', '    * :class:`~markupsafe.Markup`', '    * :class:`~uuid.UUID`', '    * :class:`~datetime.datetime`', '    \"\"\"', '', '    __slots__ = (\"tags\", \"order\")', '', '    #: Tag classes to bind when creating the serializer. Other tags can be', '    #: added later using :meth:`~register`.', '    default_tags = [', '        TagDict,', '        PassDict,', '        TagTuple,', '        PassList,', '        TagBytes,', '        TagMarkup,', '        TagUUID,', '        TagDateTime,', '    ]', '', '    def __init__(self) -> None:', '        self.tags: t.Dict[str, JSONTag] = {}', '        self.order: t.List[JSONTag] = []', '', '        for cls in self.default_tags:', '            self.register(cls)', '', '    def register(', '        self,', '        tag_class: t.Type[JSONTag],', '        force: bool = False,', '        index: t.Optional[int] = None,', '    ) -> None:', '        \"\"\"Register a new tag with this serializer.', '', '        :param tag_class: tag class to register. Will be instantiated with this', '            serializer instance.', '        :param force: overwrite an existing tag. If false (default), a', '            :exc:`KeyError` is raised.', '        :param index: index to insert the new tag in the tag order. Useful when', '            the new tag is a special case of an existing tag. If ``None``', '            (default), the tag is appended to the end of the order.', '', '        :raise KeyError: if the tag key is already registered and ``force`` is', '            not true.', '        \"\"\"', '        tag = tag_class(self)', '        key = tag.key', '', '        if key is not None:', '            if not force and key in self.tags:', '                raise KeyError(f\"Tag \\'{key}\\' is already registered.\")', '', '            self.tags[key] = tag', '', '        if index is None:', '            self.order.append(tag)', '        else:', '            self.order.insert(index, tag)', '', '    def tag(self, value: t.Any) -> t.Dict[str, t.Any]:', '        \"\"\"Convert a value to a tagged representation if necessary.\"\"\"', '        for tag in self.order:', '            if tag.check(value):', '                return tag.tag(value)', '', '        return value', '', '    def untag(self, value: t.Dict[str, t.Any]) -> t.Any:', '        \"\"\"Convert a tagged representation back to the original type.\"\"\"', '        if len(value) != 1:', '            return value', '', '        key = next(iter(value))', '', '        if key not in self.tags:', '            return value', '', '        return self.tags[key].to_python(value[key])', '', '    def dumps(self, value: t.Any) -> str:', '        \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"', '        return dumps(self.tag(value), separators=(\",\", \":\"))', '', '    def loads(self, value: str) -> t.Any:', '        \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"', '        return loads(value, object_hook=self.untag)'], 'methods': [{'name': '__init__', 'start_line': 246, 'end_line': 251, 'text': ['    def __init__(self) -> None:', '        self.tags: t.Dict[str, JSONTag] = {}', '        self.order: t.List[JSONTag] = []', '', '        for cls in self.default_tags:', '            self.register(cls)']}, {'name': 'register', 'start_line': 253, 'end_line': 284, 'text': ['    def register(', '        self,', '        tag_class: t.Type[JSONTag],', '        force: bool = False,', '        index: t.Optional[int] = None,', '    ) -> None:', '        \"\"\"Register a new tag with this serializer.', '', '        :param tag_class: tag class to register. Will be instantiated with this', '            serializer instance.', '        :param force: overwrite an existing tag. If false (default), a', '            :exc:`KeyError` is raised.', '        :param index: index to insert the new tag in the tag order. Useful when', '            the new tag is a special case of an existing tag. If ``None``', '            (default), the tag is appended to the end of the order.', '', '        :raise KeyError: if the tag key is already registered and ``force`` is', '            not true.', '        \"\"\"', '        tag = tag_class(self)', '        key = tag.key', '', '        if key is not None:', '            if not force and key in self.tags:', '                raise KeyError(f\"Tag \\'{key}\\' is already registered.\")', '', '            self.tags[key] = tag', '', '        if index is None:', '            self.order.append(tag)', '        else:', '            self.order.insert(index, tag)']}, {'name': 'tag', 'start_line': 286, 'end_line': 292, 'text': ['    def tag(self, value: t.Any) -> t.Dict[str, t.Any]:', '        \"\"\"Convert a value to a tagged representation if necessary.\"\"\"', '        for tag in self.order:', '            if tag.check(value):', '                return tag.tag(value)', '', '        return value']}, {'name': 'untag', 'start_line': 294, 'end_line': 304, 'text': ['    def untag(self, value: t.Dict[str, t.Any]) -> t.Any:', '        \"\"\"Convert a tagged representation back to the original type.\"\"\"', '        if len(value) != 1:', '            return value', '', '        key = next(iter(value))', '', '        if key not in self.tags:', '            return value', '', '        return self.tags[key].to_python(value[key])']}, {'name': 'dumps', 'start_line': 306, 'end_line': 308, 'text': ['    def dumps(self, value: t.Any) -> str:', '        \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"', '        return dumps(self.tag(value), separators=(\",\", \":\"))']}, {'name': 'loads', 'start_line': 310, 'end_line': 312, 'text': ['    def loads(self, value: str) -> t.Any:', '        \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"', '        return loads(value, object_hook=self.untag)']}]}], 'functions': [], 'text': ['\"\"\"', 'Tagged JSON', '~~~~~~~~~~~', '', 'A compact representation for lossless serialization of non-standard JSON', 'types. :class:`~flask.sessions.SecureCookieSessionInterface` uses this', 'to serialize the session data, but it may be useful in other places. It', 'can be extended to support other types.', '', '.. autoclass:: TaggedJSONSerializer', '    :members:', '', '.. autoclass:: JSONTag', '    :members:', '', \"Let's see an example that adds support for\", \":class:`~collections.OrderedDict`. Dicts don't have an order in JSON, so\", 'to handle this we will dump the items as a list of ``[key, value]``', \"pairs. Subclass :class:`JSONTag` and give it the new key ``' od'`` to\", 'identify the type. The session serializer processes dicts first, so', 'insert the new tag at the front of the order since ``OrderedDict`` must', 'be processed before ``dict``.', '', '.. code-block:: python', '', '    from flask.json.tag import JSONTag', '', '    class TagOrderedDict(JSONTag):', \"        __slots__ = ('serializer',)\", \"        key = ' od'\", '', '        def check(self, value):', '            return isinstance(value, OrderedDict)', '', '        def to_json(self, value):', '            return [[k, self.serializer.tag(v)] for k, v in iteritems(value)]', '', '        def to_python(self, value):', '            return OrderedDict(value)', '', '    app.session_interface.serializer.register(TagOrderedDict, index=0)', '\"\"\"', 'import typing as t', 'from base64 import b64decode', 'from base64 import b64encode', 'from datetime import datetime', 'from uuid import UUID', '', 'from markupsafe import Markup', 'from werkzeug.http import http_date', 'from werkzeug.http import parse_date', '', 'from ..json import dumps', 'from ..json import loads', '', '', 'class JSONTag:', '    \"\"\"Base class for defining type tags for :class:`TaggedJSONSerializer`.\"\"\"', '', '    __slots__ = (\"serializer\",)', '', '    #: The tag to mark the serialized object with. If ``None``, this tag is', '    #: only used as an intermediate step during tagging.', '    key: t.Optional[str] = None', '', '    def __init__(self, serializer: \"TaggedJSONSerializer\") -> None:', '        \"\"\"Create a tagger for the given serializer.\"\"\"', '        self.serializer = serializer', '', '    def check(self, value: t.Any) -> bool:', '        \"\"\"Check if the given value should be tagged by this tag.\"\"\"', '        raise NotImplementedError', '', '    def to_json(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the Python object to an object that is a valid JSON type.', '        The tag will be added later.\"\"\"', '        raise NotImplementedError', '', '    def to_python(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the JSON representation back to the correct type. The tag', '        will already be removed.\"\"\"', '        raise NotImplementedError', '', '    def tag(self, value: t.Any) -> t.Any:', '        \"\"\"Convert the value to a valid JSON type and add the tag structure', '        around it.\"\"\"', '        return {self.key: self.to_json(value)}', '', '', 'class TagDict(JSONTag):', '    \"\"\"Tag for 1-item dicts whose only key matches a registered tag.', '', '    Internally, the dict key is suffixed with `__`, and the suffix is removed', '    when deserializing.', '    \"\"\"', '', '    __slots__ = ()', '    key = \" di\"', '', '    def check(self, value: t.Any) -> bool:', '        return (', '            isinstance(value, dict)', '            and len(value) == 1', '            and next(iter(value)) in self.serializer.tags', '        )', '', '    def to_json(self, value: t.Any) -> t.Any:', '        key = next(iter(value))', '        return {f\"{key}__\": self.serializer.tag(value[key])}', '', '    def to_python(self, value: t.Any) -> t.Any:', '        key = next(iter(value))', '        return {key[:-2]: value[key]}', '', '', 'class PassDict(JSONTag):', '    __slots__ = ()', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, dict)', '', '    def to_json(self, value: t.Any) -> t.Any:', \"        # JSON objects may only have string keys, so don't bother tagging the\", '        # key here.', '        return {k: self.serializer.tag(v) for k, v in value.items()}', '', '    tag = to_json', '', '', 'class TagTuple(JSONTag):', '    __slots__ = ()', '    key = \" t\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, tuple)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return [self.serializer.tag(item) for item in value]', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return tuple(value)', '', '', 'class PassList(JSONTag):', '    __slots__ = ()', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, list)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return [self.serializer.tag(item) for item in value]', '', '    tag = to_json', '', '', 'class TagBytes(JSONTag):', '    __slots__ = ()', '    key = \" b\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, bytes)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return b64encode(value).decode(\"ascii\")', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return b64decode(value)', '', '', 'class TagMarkup(JSONTag):', '    \"\"\"Serialize anything matching the :class:`~markupsafe.Markup` API by', '    having a ``__html__`` method to the result of that method. Always', '    deserializes to an instance of :class:`~markupsafe.Markup`.\"\"\"', '', '    __slots__ = ()', '    key = \" m\"', '', '    def check(self, value: t.Any) -> bool:', '        return callable(getattr(value, \"__html__\", None))', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return str(value.__html__())', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return Markup(value)', '', '', 'class TagUUID(JSONTag):', '    __slots__ = ()', '    key = \" u\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, UUID)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return value.hex', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return UUID(value)', '', '', 'class TagDateTime(JSONTag):', '    __slots__ = ()', '    key = \" d\"', '', '    def check(self, value: t.Any) -> bool:', '        return isinstance(value, datetime)', '', '    def to_json(self, value: t.Any) -> t.Any:', '        return http_date(value)', '', '    def to_python(self, value: t.Any) -> t.Any:', '        return parse_date(value)', '', '', 'class TaggedJSONSerializer:', '    \"\"\"Serializer that uses a tag system to compactly represent objects that', '    are not JSON types. Passed as the intermediate serializer to', '    :class:`itsdangerous.Serializer`.', '', '    The following extra types are supported:', '', '    * :class:`dict`', '    * :class:`tuple`', '    * :class:`bytes`', '    * :class:`~markupsafe.Markup`', '    * :class:`~uuid.UUID`', '    * :class:`~datetime.datetime`', '    \"\"\"', '', '    __slots__ = (\"tags\", \"order\")', '', '    #: Tag classes to bind when creating the serializer. Other tags can be', '    #: added later using :meth:`~register`.', '    default_tags = [', '        TagDict,', '        PassDict,', '        TagTuple,', '        PassList,', '        TagBytes,', '        TagMarkup,', '        TagUUID,', '        TagDateTime,', '    ]', '', '    def __init__(self) -> None:', '        self.tags: t.Dict[str, JSONTag] = {}', '        self.order: t.List[JSONTag] = []', '', '        for cls in self.default_tags:', '            self.register(cls)', '', '    def register(', '        self,', '        tag_class: t.Type[JSONTag],', '        force: bool = False,', '        index: t.Optional[int] = None,', '    ) -> None:', '        \"\"\"Register a new tag with this serializer.', '', '        :param tag_class: tag class to register. Will be instantiated with this', '            serializer instance.', '        :param force: overwrite an existing tag. If false (default), a', '            :exc:`KeyError` is raised.', '        :param index: index to insert the new tag in the tag order. Useful when', '            the new tag is a special case of an existing tag. If ``None``', '            (default), the tag is appended to the end of the order.', '', '        :raise KeyError: if the tag key is already registered and ``force`` is', '            not true.', '        \"\"\"', '        tag = tag_class(self)', '        key = tag.key', '', '        if key is not None:', '            if not force and key in self.tags:', '                raise KeyError(f\"Tag \\'{key}\\' is already registered.\")', '', '            self.tags[key] = tag', '', '        if index is None:', '            self.order.append(tag)', '        else:', '            self.order.insert(index, tag)', '', '    def tag(self, value: t.Any) -> t.Dict[str, t.Any]:', '        \"\"\"Convert a value to a tagged representation if necessary.\"\"\"', '        for tag in self.order:', '            if tag.check(value):', '                return tag.tag(value)', '', '        return value', '', '    def untag(self, value: t.Dict[str, t.Any]) -> t.Any:', '        \"\"\"Convert a tagged representation back to the original type.\"\"\"', '        if len(value) != 1:', '            return value', '', '        key = next(iter(value))', '', '        if key not in self.tags:', '            return value', '', '        return self.tags[key].to_python(value[key])', '', '    def dumps(self, value: t.Any) -> str:', '        \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"', '        return dumps(self.tag(value), separators=(\",\", \":\"))', '', '    def loads(self, value: str) -> t.Any:', '        \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"', '        return loads(value, object_hook=self.untag)']}, '__init__.py': {'classes': [], 'functions': [{'name': 'dumps', 'start_line': 13, 'end_line': 44, 'text': ['def dumps(obj: t.Any, **kwargs: t.Any) -> str:', '    \"\"\"Serialize data as JSON.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`', '    method, otherwise it will use :func:`json.dumps`.', '', '    :param obj: The data to serialize.', '    :param kwargs: Arguments passed to the ``dumps`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.dumps``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0.2', '        :class:`decimal.Decimal` is supported by converting to a string.', '', '    .. versionchanged:: 2.0', '        ``encoding`` will be removed in Flask 2.1.', '', '    .. versionchanged:: 1.0.3', '        ``app`` can be passed directly, rather than requiring an app', '        context for configuration.', '    \"\"\"', '    if current_app:', '        return current_app.json.dumps(obj, **kwargs)', '', '    kwargs.setdefault(\"default\", _default)', '    return _json.dumps(obj, **kwargs)']}, {'name': 'dump', 'start_line': 47, 'end_line': 74, 'text': ['def dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:', '    \"\"\"Serialize data as JSON and write to a file.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`', '    method, otherwise it will use :func:`json.dump`.', '', '    :param obj: The data to serialize.', '    :param fp: A file opened for writing text. Should use the UTF-8', '        encoding to be valid JSON.', '    :param kwargs: Arguments passed to the ``dump`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.dump``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0', '        Writing to a binary file, and the ``encoding`` argument, will be', '        removed in Flask 2.1.', '    \"\"\"', '    if current_app:', '        current_app.json.dump(obj, fp, **kwargs)', '    else:', '        kwargs.setdefault(\"default\", _default)', '        _json.dump(obj, fp, **kwargs)']}, {'name': 'loads', 'start_line': 77, 'end_line': 105, 'text': ['def loads(s: str | bytes, **kwargs: t.Any) -> t.Any:', '    \"\"\"Deserialize data as JSON.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`', '    method, otherwise it will use :func:`json.loads`.', '', '    :param s: Text or UTF-8 bytes.', '    :param kwargs: Arguments passed to the ``loads`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.loads``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0', '        ``encoding`` will be removed in Flask 2.1. The data must be a', '        string or UTF-8 bytes.', '', '    .. versionchanged:: 1.0.3', '        ``app`` can be passed directly, rather than requiring an app', '        context for configuration.', '    \"\"\"', '    if current_app:', '        return current_app.json.loads(s, **kwargs)', '', '    return _json.loads(s, **kwargs)']}, {'name': 'load', 'start_line': 108, 'end_line': 135, 'text': ['def load(fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:', '    \"\"\"Deserialize data as JSON read from a file.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.load() <flask.json.provider.JSONProvider.load>`', '    method, otherwise it will use :func:`json.load`.', '', '    :param fp: A file opened for reading text or UTF-8 bytes.', '    :param kwargs: Arguments passed to the ``load`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.load``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.2', '        The ``app`` parameter will be removed in Flask 2.3.', '', '    .. versionchanged:: 2.0', '        ``encoding`` will be removed in Flask 2.1. The file must be text', '        mode, or binary mode with UTF-8 bytes.', '    \"\"\"', '    if current_app:', '        return current_app.json.load(fp, **kwargs)', '', '    return _json.load(fp, **kwargs)']}, {'name': 'jsonify', 'start_line': 138, 'end_line': 170, 'text': ['def jsonify(*args: t.Any, **kwargs: t.Any) -> Response:', '    \"\"\"Serialize the given arguments as JSON, and return a', '    :class:`~flask.Response` object with the ``application/json``', '    mimetype. A dict or list returned from a view will be converted to a', '    JSON response automatically without needing to call this.', '', '    This requires an active request or application context, and calls', '    :meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.', '', '    In debug mode, the output is formatted with indentation to make it', '    easier to read. This may also be controlled by the provider.', '', '    Either positional or keyword arguments can be given, not both.', '    If no arguments are given, ``None`` is serialized.', '', '    :param args: A single value to serialize, or multiple values to', '        treat as a list to serialize.', '    :param kwargs: Treat as a dict to serialize.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.response``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0.2', '        :class:`decimal.Decimal` is supported by converting to a string.', '', '    .. versionchanged:: 0.11', '        Added support for serializing top-level arrays. This was a', '        security risk in ancient browsers. See :ref:`security-json`.', '', '    .. versionadded:: 0.2', '    \"\"\"', '    return current_app.json.response(*args, **kwargs)']}], 'text': ['from __future__ import annotations', '', 'import json as _json', 'import typing as t', '', 'from ..globals import current_app', 'from .provider import _default', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from ..wrappers import Response', '', '', 'def dumps(obj: t.Any, **kwargs: t.Any) -> str:', '    \"\"\"Serialize data as JSON.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`', '    method, otherwise it will use :func:`json.dumps`.', '', '    :param obj: The data to serialize.', '    :param kwargs: Arguments passed to the ``dumps`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.dumps``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0.2', '        :class:`decimal.Decimal` is supported by converting to a string.', '', '    .. versionchanged:: 2.0', '        ``encoding`` will be removed in Flask 2.1.', '', '    .. versionchanged:: 1.0.3', '        ``app`` can be passed directly, rather than requiring an app', '        context for configuration.', '    \"\"\"', '    if current_app:', '        return current_app.json.dumps(obj, **kwargs)', '', '    kwargs.setdefault(\"default\", _default)', '    return _json.dumps(obj, **kwargs)', '', '', 'def dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:', '    \"\"\"Serialize data as JSON and write to a file.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`', '    method, otherwise it will use :func:`json.dump`.', '', '    :param obj: The data to serialize.', '    :param fp: A file opened for writing text. Should use the UTF-8', '        encoding to be valid JSON.', '    :param kwargs: Arguments passed to the ``dump`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.dump``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0', '        Writing to a binary file, and the ``encoding`` argument, will be', '        removed in Flask 2.1.', '    \"\"\"', '    if current_app:', '        current_app.json.dump(obj, fp, **kwargs)', '    else:', '        kwargs.setdefault(\"default\", _default)', '        _json.dump(obj, fp, **kwargs)', '', '', 'def loads(s: str | bytes, **kwargs: t.Any) -> t.Any:', '    \"\"\"Deserialize data as JSON.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`', '    method, otherwise it will use :func:`json.loads`.', '', '    :param s: Text or UTF-8 bytes.', '    :param kwargs: Arguments passed to the ``loads`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.loads``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0', '        ``encoding`` will be removed in Flask 2.1. The data must be a', '        string or UTF-8 bytes.', '', '    .. versionchanged:: 1.0.3', '        ``app`` can be passed directly, rather than requiring an app', '        context for configuration.', '    \"\"\"', '    if current_app:', '        return current_app.json.loads(s, **kwargs)', '', '    return _json.loads(s, **kwargs)', '', '', 'def load(fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:', '    \"\"\"Deserialize data as JSON read from a file.', '', '    If :data:`~flask.current_app` is available, it will use its', '    :meth:`app.json.load() <flask.json.provider.JSONProvider.load>`', '    method, otherwise it will use :func:`json.load`.', '', '    :param fp: A file opened for reading text or UTF-8 bytes.', '    :param kwargs: Arguments passed to the ``load`` implementation.', '', '    .. versionchanged:: 2.3', '        The ``app`` parameter was removed.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.load``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.2', '        The ``app`` parameter will be removed in Flask 2.3.', '', '    .. versionchanged:: 2.0', '        ``encoding`` will be removed in Flask 2.1. The file must be text', '        mode, or binary mode with UTF-8 bytes.', '    \"\"\"', '    if current_app:', '        return current_app.json.load(fp, **kwargs)', '', '    return _json.load(fp, **kwargs)', '', '', 'def jsonify(*args: t.Any, **kwargs: t.Any) -> Response:', '    \"\"\"Serialize the given arguments as JSON, and return a', '    :class:`~flask.Response` object with the ``application/json``', '    mimetype. A dict or list returned from a view will be converted to a', '    JSON response automatically without needing to call this.', '', '    This requires an active request or application context, and calls', '    :meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.', '', '    In debug mode, the output is formatted with indentation to make it', '    easier to read. This may also be controlled by the provider.', '', '    Either positional or keyword arguments can be given, not both.', '    If no arguments are given, ``None`` is serialized.', '', '    :param args: A single value to serialize, or multiple values to', '        treat as a list to serialize.', '    :param kwargs: Treat as a dict to serialize.', '', '    .. versionchanged:: 2.2', '        Calls ``current_app.json.response``, allowing an app to override', '        the behavior.', '', '    .. versionchanged:: 2.0.2', '        :class:`decimal.Decimal` is supported by converting to a string.', '', '    .. versionchanged:: 0.11', '        Added support for serializing top-level arrays. This was a', '        security risk in ancient browsers. See :ref:`security-json`.', '', '    .. versionadded:: 0.2', '    \"\"\"', '    return current_app.json.response(*args, **kwargs)']}, 'provider.py': {'classes': [{'name': 'JSONProvider', 'start_line': 18, 'end_line': 104, 'text': ['class JSONProvider:', '    \"\"\"A standard set of JSON operations for an application. Subclasses', '    of this can be used to customize JSON behavior or use different', '    JSON libraries.', '', '    To implement a provider for a specific library, subclass this base', '    class and implement at least :meth:`dumps` and :meth:`loads`. All', '    other methods have default implementations.', '', '    To use a different provider, either subclass ``Flask`` and set', '    :attr:`~flask.Flask.json_provider_class` to a provider class, or set', '    :attr:`app.json <flask.Flask.json>` to an instance of the class.', '', '    :param app: An application instance. This will be stored as a', '        :class:`weakref.proxy` on the :attr:`_app` attribute.', '', '    .. versionadded:: 2.2', '    \"\"\"', '', '    def __init__(self, app: Flask) -> None:', '        self._app = weakref.proxy(app)', '', '    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:', '        \"\"\"Serialize data as JSON.', '', '        :param obj: The data to serialize.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        raise NotImplementedError', '', '    def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:', '        \"\"\"Serialize data as JSON and write to a file.', '', '        :param obj: The data to serialize.', '        :param fp: A file opened for writing text. Should use the UTF-8', '            encoding to be valid JSON.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        fp.write(self.dumps(obj, **kwargs))', '', '    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON.', '', '        :param s: Text or UTF-8 bytes.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        raise NotImplementedError', '', '    def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON read from a file.', '', '        :param fp: A file opened for reading text or UTF-8 bytes.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        return self.loads(fp.read(), **kwargs)', '', '    def _prepare_response_obj(', '        self, args: t.Tuple[t.Any, ...], kwargs: t.Dict[str, t.Any]', '    ) -> t.Any:', '        if args and kwargs:', '            raise TypeError(\"app.json.response() takes either args or kwargs, not both\")', '', '        if not args and not kwargs:', '            return None', '', '        if len(args) == 1:', '            return args[0]', '', '        return args or kwargs', '', '    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:', '        \"\"\"Serialize the given arguments as JSON, and return a', '        :class:`~flask.Response` object with the ``application/json``', '        mimetype.', '', '        The :func:`~flask.json.jsonify` function calls this method for', '        the current application.', '', '        Either positional or keyword arguments can be given, not both.', '        If no arguments are given, ``None`` is serialized.', '', '        :param args: A single value to serialize, or multiple values to', '            treat as a list to serialize.', '        :param kwargs: Treat as a dict to serialize.', '        \"\"\"', '        obj = self._prepare_response_obj(args, kwargs)', '        return self._app.response_class(self.dumps(obj), mimetype=\"application/json\")'], 'methods': [{'name': '__init__', 'start_line': 37, 'end_line': 38, 'text': ['    def __init__(self, app: Flask) -> None:', '        self._app = weakref.proxy(app)']}, {'name': 'dumps', 'start_line': 40, 'end_line': 46, 'text': ['    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:', '        \"\"\"Serialize data as JSON.', '', '        :param obj: The data to serialize.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        raise NotImplementedError']}, {'name': 'dump', 'start_line': 48, 'end_line': 56, 'text': ['    def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:', '        \"\"\"Serialize data as JSON and write to a file.', '', '        :param obj: The data to serialize.', '        :param fp: A file opened for writing text. Should use the UTF-8', '            encoding to be valid JSON.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        fp.write(self.dumps(obj, **kwargs))']}, {'name': 'loads', 'start_line': 58, 'end_line': 64, 'text': ['    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON.', '', '        :param s: Text or UTF-8 bytes.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        raise NotImplementedError']}, {'name': 'load', 'start_line': 66, 'end_line': 72, 'text': ['    def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON read from a file.', '', '        :param fp: A file opened for reading text or UTF-8 bytes.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        return self.loads(fp.read(), **kwargs)']}, {'name': '_prepare_response_obj', 'start_line': 74, 'end_line': 86, 'text': ['    def _prepare_response_obj(', '        self, args: t.Tuple[t.Any, ...], kwargs: t.Dict[str, t.Any]', '    ) -> t.Any:', '        if args and kwargs:', '            raise TypeError(\"app.json.response() takes either args or kwargs, not both\")', '', '        if not args and not kwargs:', '            return None', '', '        if len(args) == 1:', '            return args[0]', '', '        return args or kwargs']}, {'name': 'response', 'start_line': 88, 'end_line': 104, 'text': ['    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:', '        \"\"\"Serialize the given arguments as JSON, and return a', '        :class:`~flask.Response` object with the ``application/json``', '        mimetype.', '', '        The :func:`~flask.json.jsonify` function calls this method for', '        the current application.', '', '        Either positional or keyword arguments can be given, not both.', '        If no arguments are given, ``None`` is serialized.', '', '        :param args: A single value to serialize, or multiple values to', '            treat as a list to serialize.', '        :param kwargs: Treat as a dict to serialize.', '        \"\"\"', '        obj = self._prepare_response_obj(args, kwargs)', '        return self._app.response_class(self.dumps(obj), mimetype=\"application/json\")']}]}, {'name': 'DefaultJSONProvider', 'start_line': 123, 'end_line': 216, 'text': ['class DefaultJSONProvider(JSONProvider):', '    \"\"\"Provide JSON operations using Python\\'s built-in :mod:`json`', '    library. Serializes the following additional data types:', '', '    -   :class:`datetime.datetime` and :class:`datetime.date` are', '        serialized to :rfc:`822` strings. This is the same as the HTTP', '        date format.', '    -   :class:`uuid.UUID` is serialized to a string.', '    -   :class:`dataclasses.dataclass` is passed to', '        :func:`dataclasses.asdict`.', '    -   :class:`~markupsafe.Markup` (or any object with a ``__html__``', '        method) will call the ``__html__`` method to get a string.', '    \"\"\"', '', '    default: t.Callable[[t.Any], t.Any] = staticmethod(', '        _default', '    )  # type: ignore[assignment]', '    \"\"\"Apply this function to any object that :meth:`json.dumps` does', '    not know how to serialize. It should return a valid JSON type or', '    raise a ``TypeError``.', '    \"\"\"', '', '    ensure_ascii = True', '    \"\"\"Replace non-ASCII characters with escape sequences. This may be', '    more compatible with some clients, but can be disabled for better', '    performance and size.', '    \"\"\"', '', '    sort_keys = True', '    \"\"\"Sort the keys in any serialized dicts. This may be useful for', '    some caching situations, but can be disabled for better performance.', '    When enabled, keys must all be strings, they are not converted', '    before sorting.', '    \"\"\"', '', '    compact: bool | None = None', '    \"\"\"If ``True``, or ``None`` out of debug mode, the :meth:`response`', '    output will not add indentation, newlines, or spaces. If ``False``,', '    or ``None`` in debug mode, it will use a non-compact representation.', '    \"\"\"', '', '    mimetype = \"application/json\"', '    \"\"\"The mimetype set in :meth:`response`.\"\"\"', '', '    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:', '        \"\"\"Serialize data as JSON to a string.', '', '        Keyword arguments are passed to :func:`json.dumps`. Sets some', '        parameter defaults from the :attr:`default`,', '        :attr:`ensure_ascii`, and :attr:`sort_keys` attributes.', '', '        :param obj: The data to serialize.', '        :param kwargs: Passed to :func:`json.dumps`.', '        \"\"\"', '        kwargs.setdefault(\"default\", self.default)', '        kwargs.setdefault(\"ensure_ascii\", self.ensure_ascii)', '        kwargs.setdefault(\"sort_keys\", self.sort_keys)', '        return json.dumps(obj, **kwargs)', '', '    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON from a string or bytes.', '', '        :param s: Text or UTF-8 bytes.', '        :param kwargs: Passed to :func:`json.loads`.', '        \"\"\"', '        return json.loads(s, **kwargs)', '', '    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:', '        \"\"\"Serialize the given arguments as JSON, and return a', '        :class:`~flask.Response` object with it. The response mimetype', '        will be \"application/json\" and can be changed with', '        :attr:`mimetype`.', '', '        If :attr:`compact` is ``False`` or debug mode is enabled, the', '        output will be formatted to be easier to read.', '', '        Either positional or keyword arguments can be given, not both.', '        If no arguments are given, ``None`` is serialized.', '', '        :param args: A single value to serialize, or multiple values to', '            treat as a list to serialize.', '        :param kwargs: Treat as a dict to serialize.', '        \"\"\"', '        obj = self._prepare_response_obj(args, kwargs)', '        dump_args: t.Dict[str, t.Any] = {}', '', '        if (self.compact is None and self._app.debug) or self.compact is False:', '            dump_args.setdefault(\"indent\", 2)', '        else:', '            dump_args.setdefault(\"separators\", (\",\", \":\"))', '', '        return self._app.response_class(', '            f\"{self.dumps(obj, **dump_args)}\\\\n\", mimetype=self.mimetype', '        )'], 'methods': [{'name': 'dumps', 'start_line': 167, 'end_line': 180, 'text': ['    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:', '        \"\"\"Serialize data as JSON to a string.', '', '        Keyword arguments are passed to :func:`json.dumps`. Sets some', '        parameter defaults from the :attr:`default`,', '        :attr:`ensure_ascii`, and :attr:`sort_keys` attributes.', '', '        :param obj: The data to serialize.', '        :param kwargs: Passed to :func:`json.dumps`.', '        \"\"\"', '        kwargs.setdefault(\"default\", self.default)', '        kwargs.setdefault(\"ensure_ascii\", self.ensure_ascii)', '        kwargs.setdefault(\"sort_keys\", self.sort_keys)', '        return json.dumps(obj, **kwargs)']}, {'name': 'loads', 'start_line': 182, 'end_line': 188, 'text': ['    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON from a string or bytes.', '', '        :param s: Text or UTF-8 bytes.', '        :param kwargs: Passed to :func:`json.loads`.', '        \"\"\"', '        return json.loads(s, **kwargs)']}, {'name': 'response', 'start_line': 190, 'end_line': 216, 'text': ['    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:', '        \"\"\"Serialize the given arguments as JSON, and return a', '        :class:`~flask.Response` object with it. The response mimetype', '        will be \"application/json\" and can be changed with', '        :attr:`mimetype`.', '', '        If :attr:`compact` is ``False`` or debug mode is enabled, the', '        output will be formatted to be easier to read.', '', '        Either positional or keyword arguments can be given, not both.', '        If no arguments are given, ``None`` is serialized.', '', '        :param args: A single value to serialize, or multiple values to', '            treat as a list to serialize.', '        :param kwargs: Treat as a dict to serialize.', '        \"\"\"', '        obj = self._prepare_response_obj(args, kwargs)', '        dump_args: t.Dict[str, t.Any] = {}', '', '        if (self.compact is None and self._app.debug) or self.compact is False:', '            dump_args.setdefault(\"indent\", 2)', '        else:', '            dump_args.setdefault(\"separators\", (\",\", \":\"))', '', '        return self._app.response_class(', '            f\"{self.dumps(obj, **dump_args)}\\\\n\", mimetype=self.mimetype', '        )']}]}], 'functions': [{'name': '_default', 'start_line': 107, 'end_line': 120, 'text': ['def _default(o: t.Any) -> t.Any:', '    if isinstance(o, date):', '        return http_date(o)', '', '    if isinstance(o, (decimal.Decimal, uuid.UUID)):', '        return str(o)', '', '    if dataclasses and dataclasses.is_dataclass(o):', '        return dataclasses.asdict(o)', '', '    if hasattr(o, \"__html__\"):', '        return str(o.__html__())', '', '    raise TypeError(f\"Object of type {type(o).__name__} is not JSON serializable\")']}], 'text': ['from __future__ import annotations', '', 'import dataclasses', 'import decimal', 'import json', 'import typing as t', 'import uuid', 'import weakref', 'from datetime import date', '', 'from werkzeug.http import http_date', '', 'if t.TYPE_CHECKING:  # pragma: no cover', '    from ..app import Flask', '    from ..wrappers import Response', '', '', 'class JSONProvider:', '    \"\"\"A standard set of JSON operations for an application. Subclasses', '    of this can be used to customize JSON behavior or use different', '    JSON libraries.', '', '    To implement a provider for a specific library, subclass this base', '    class and implement at least :meth:`dumps` and :meth:`loads`. All', '    other methods have default implementations.', '', '    To use a different provider, either subclass ``Flask`` and set', '    :attr:`~flask.Flask.json_provider_class` to a provider class, or set', '    :attr:`app.json <flask.Flask.json>` to an instance of the class.', '', '    :param app: An application instance. This will be stored as a', '        :class:`weakref.proxy` on the :attr:`_app` attribute.', '', '    .. versionadded:: 2.2', '    \"\"\"', '', '    def __init__(self, app: Flask) -> None:', '        self._app = weakref.proxy(app)', '', '    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:', '        \"\"\"Serialize data as JSON.', '', '        :param obj: The data to serialize.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        raise NotImplementedError', '', '    def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:', '        \"\"\"Serialize data as JSON and write to a file.', '', '        :param obj: The data to serialize.', '        :param fp: A file opened for writing text. Should use the UTF-8', '            encoding to be valid JSON.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        fp.write(self.dumps(obj, **kwargs))', '', '    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON.', '', '        :param s: Text or UTF-8 bytes.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        raise NotImplementedError', '', '    def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON read from a file.', '', '        :param fp: A file opened for reading text or UTF-8 bytes.', '        :param kwargs: May be passed to the underlying JSON library.', '        \"\"\"', '        return self.loads(fp.read(), **kwargs)', '', '    def _prepare_response_obj(', '        self, args: t.Tuple[t.Any, ...], kwargs: t.Dict[str, t.Any]', '    ) -> t.Any:', '        if args and kwargs:', '            raise TypeError(\"app.json.response() takes either args or kwargs, not both\")', '', '        if not args and not kwargs:', '            return None', '', '        if len(args) == 1:', '            return args[0]', '', '        return args or kwargs', '', '    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:', '        \"\"\"Serialize the given arguments as JSON, and return a', '        :class:`~flask.Response` object with the ``application/json``', '        mimetype.', '', '        The :func:`~flask.json.jsonify` function calls this method for', '        the current application.', '', '        Either positional or keyword arguments can be given, not both.', '        If no arguments are given, ``None`` is serialized.', '', '        :param args: A single value to serialize, or multiple values to', '            treat as a list to serialize.', '        :param kwargs: Treat as a dict to serialize.', '        \"\"\"', '        obj = self._prepare_response_obj(args, kwargs)', '        return self._app.response_class(self.dumps(obj), mimetype=\"application/json\")', '', '', 'def _default(o: t.Any) -> t.Any:', '    if isinstance(o, date):', '        return http_date(o)', '', '    if isinstance(o, (decimal.Decimal, uuid.UUID)):', '        return str(o)', '', '    if dataclasses and dataclasses.is_dataclass(o):', '        return dataclasses.asdict(o)', '', '    if hasattr(o, \"__html__\"):', '        return str(o.__html__())', '', '    raise TypeError(f\"Object of type {type(o).__name__} is not JSON serializable\")', '', '', 'class DefaultJSONProvider(JSONProvider):', '    \"\"\"Provide JSON operations using Python\\'s built-in :mod:`json`', '    library. Serializes the following additional data types:', '', '    -   :class:`datetime.datetime` and :class:`datetime.date` are', '        serialized to :rfc:`822` strings. This is the same as the HTTP', '        date format.', '    -   :class:`uuid.UUID` is serialized to a string.', '    -   :class:`dataclasses.dataclass` is passed to', '        :func:`dataclasses.asdict`.', '    -   :class:`~markupsafe.Markup` (or any object with a ``__html__``', '        method) will call the ``__html__`` method to get a string.', '    \"\"\"', '', '    default: t.Callable[[t.Any], t.Any] = staticmethod(', '        _default', '    )  # type: ignore[assignment]', '    \"\"\"Apply this function to any object that :meth:`json.dumps` does', '    not know how to serialize. It should return a valid JSON type or', '    raise a ``TypeError``.', '    \"\"\"', '', '    ensure_ascii = True', '    \"\"\"Replace non-ASCII characters with escape sequences. This may be', '    more compatible with some clients, but can be disabled for better', '    performance and size.', '    \"\"\"', '', '    sort_keys = True', '    \"\"\"Sort the keys in any serialized dicts. This may be useful for', '    some caching situations, but can be disabled for better performance.', '    When enabled, keys must all be strings, they are not converted', '    before sorting.', '    \"\"\"', '', '    compact: bool | None = None', '    \"\"\"If ``True``, or ``None`` out of debug mode, the :meth:`response`', '    output will not add indentation, newlines, or spaces. If ``False``,', '    or ``None`` in debug mode, it will use a non-compact representation.', '    \"\"\"', '', '    mimetype = \"application/json\"', '    \"\"\"The mimetype set in :meth:`response`.\"\"\"', '', '    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:', '        \"\"\"Serialize data as JSON to a string.', '', '        Keyword arguments are passed to :func:`json.dumps`. Sets some', '        parameter defaults from the :attr:`default`,', '        :attr:`ensure_ascii`, and :attr:`sort_keys` attributes.', '', '        :param obj: The data to serialize.', '        :param kwargs: Passed to :func:`json.dumps`.', '        \"\"\"', '        kwargs.setdefault(\"default\", self.default)', '        kwargs.setdefault(\"ensure_ascii\", self.ensure_ascii)', '        kwargs.setdefault(\"sort_keys\", self.sort_keys)', '        return json.dumps(obj, **kwargs)', '', '    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:', '        \"\"\"Deserialize data as JSON from a string or bytes.', '', '        :param s: Text or UTF-8 bytes.', '        :param kwargs: Passed to :func:`json.loads`.', '        \"\"\"', '        return json.loads(s, **kwargs)', '', '    def response(self, *args: t.Any, **kwargs: t.Any) -> Response:', '        \"\"\"Serialize the given arguments as JSON, and return a', '        :class:`~flask.Response` object with it. The response mimetype', '        will be \"application/json\" and can be changed with', '        :attr:`mimetype`.', '', '        If :attr:`compact` is ``False`` or debug mode is enabled, the', '        output will be formatted to be easier to read.', '', '        Either positional or keyword arguments can be given, not both.', '        If no arguments are given, ``None`` is serialized.', '', '        :param args: A single value to serialize, or multiple values to', '            treat as a list to serialize.', '        :param kwargs: Treat as a dict to serialize.', '        \"\"\"', '        obj = self._prepare_response_obj(args, kwargs)', '        dump_args: t.Dict[str, t.Any] = {}', '', '        if (self.compact is None and self._app.debug) or self.compact is False:', '            dump_args.setdefault(\"indent\", 2)', '        else:', '            dump_args.setdefault(\"separators\", (\",\", \":\"))', '', '        return self._app.response_class(', '            f\"{self.dumps(obj, **dump_args)}\\\\n\", mimetype=self.mimetype', '        )']}}}}}\n\n###\n\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)"}
