{"instance_id": "mwaskom__seaborn-3069", "message": "Please look through the following GitHub problem description and Repository structure and provide a list of files that one would need to edit to fix the problem.\n\n### GitHub Problem Description ###\nNominal scale should be drawn the same way as categorical scales\nThree distinctive things happen on the categorical axis in seaborn's categorical plots:\r\n\r\n1. The scale is drawn to +/- 0.5 from the first and last tick, rather than using the normal margin logic\r\n2. A grid is not shown, even when it otherwise would be with the active style\r\n3. If on the y axis, the axis is inverted\r\n\r\nIt probably makes sense to have `so.Nominal` scales (including inferred ones) do this too. Some comments on implementation:\r\n\r\n1. This is actually trickier than you'd think; I may have posted an issue over in matplotlib about this at one point, or just discussed on their gitter. I believe the suggested approach is to add an invisible artist with sticky edges and set the margin to 0. Feels like a hack! I might have looked into setting the sticky edges _on the spine artist_ at one point?\r\n\r\n2. Probably straightforward to do in `Plotter._finalize_figure`. Always a good idea? How do we defer to the theme if the user wants to force a grid? Should the grid be something that is set in the scale object itself\r\n\r\n3. Probably straightforward to implement but I am not exactly sure where would be best.\n\n\n###\n\n### Repository Structure ###\nseaborn/\n    palettes.py\n    _statistics.py\n    matrix.py\n    widgets.py\n    _oldcore.py\n    __init__.py\n    utils.py\n    distributions.py\n    _docstrings.py\n    objects.py\n    relational.py\n    cm.py\n    _compat.py\n    categorical.py\n    regression.py\n    axisgrid.py\n    _decorators.py\n    miscplot.py\n    rcmod.py\n    _testing.py\n    algorithms.py\n    _core/\n        data.py\n        plot.py\n        __init__.py\n        groupby.py\n        properties.py\n        moves.py\n        subplots.py\n        scales.py\n        rules.py\n        typing.py\n    _marks/\n        base.py\n        line.py\n        __init__.py\n        text.py\n        area.py\n        bar.py\n        dot.py\n    external/\n        docscrape.py\n        version.py\n        __init__.py\n        kde.py\n        husl.py\n        appdirs.py\n    _stats/\n        base.py\n        aggregation.py\n        order.py\n        __init__.py\n        histogram.py\n        regression.py\n    colors/\n        xkcd_rgb.py\n        crayons.py\n        __init__.py\nci/\n    check_gallery.py\n    cache_datasets.py\ndoc/\n    conf.py\n    tools/\n        nb_to_doc.py\n        generate_logos.py\n        extract_examples.py\n        set_nb_kernels.py\n    sphinxext/\n        gallery_generator.py\n        tutorial_builder.py\nexamples/\n    residplot.py\n    radial_facets.py\n    strip_regplot.py\n    pair_grid_with_kde.py\n    horizontal_boxplot.py\n    part_whole_bars.py\n    faceted_histogram.py\n    grouped_violinplots.py\n    layered_bivariate_plot.py\n    kde_ridgeplot.py\n    multiple_regression.py\n    scatterplot_sizes.py\n    hexbin_marginals.py\n    multiple_ecdf.py\n    grouped_boxplot.py\n    timeseries_facets.py\n    regression_marginals.py\n    jitter_stripplot.py\n    faceted_lineplot.py\n    simple_violinplots.py\n    joint_histogram.py\n    three_variable_histogram.py\n    multiple_bivariate_kde.py\n    spreadsheet_heatmap.py\n    paired_pointplots.py\n    anscombes_quartet.py\n    marginal_ticks.py\n    logistic_regression.py\n    scatterplot_categorical.py\n    histogram_stacked.py\n    joint_kde.py\n    smooth_bivariate_kde.py\n    large_distributions.py\n    errorband_lineplots.py\n    pointplot_anova.py\n    grouped_barplot.py\n    many_facets.py\n    pairgrid_dotplot.py\n    wide_data_lineplot.py\n    different_scatter_variables.py\n    scatter_bubbles.py\n    wide_form_violinplot.py\n    palette_choices.py\n    scatterplot_matrix.py\n    heat_scatter.py\n    structured_heatmap.py\n    multiple_conditional_kde.py\n    many_pairwise_correlations.py\n    palette_generation.py\n\n###\n\nPlease only provide the full path and return at most 5 files.\nThe returned files should be separated by new lines ordered by most to least important and wrapped with ```\nFor example:\n```\nfile1.py\nfile2.py\n```", "num_tokens of the message": 1006}
